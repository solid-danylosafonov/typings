[
  {
    "_": -1,
    "namespace": "",
    "from": "mainLoop /Users/dazzlemon/github/typings/typings/work/inputmask/out/temp/https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/inputmask/index.d.ts",
    "items": {
      "structs": [],
      "typedefs": [],
      "modules": [
        {
          "_": 8,
          "namespace": "Inputmask",
          "from": "submodule ",
          "items": {
            "structs": [
              {
                "isClass": false,
                "_": -1,
                "name": "IInline0",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Range",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 9,
                    "source": " start: string;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 9,
                    "source": " end: string",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline1",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 151,
                    "source": " begin: number;",
                    "name": "begin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 151,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 151,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 151,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline2",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 302,
                    "source": " begin: number;",
                    "name": "begin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 302,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 302,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 302,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline3",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 429,
                    "source": " front: string;",
                    "name": "front",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 429,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 429,
                    "source": " back: string",
                    "name": "back",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 429,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline4",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 488,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 488,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 488,
                    "source": " [shortcut: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline5",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Options",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 543,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Definition",
                      "targs": [],
                      "isNullable": false,
                      "_": 543,
                      "source": " Definition"
                    },
                    "doc": "",
                    "_": 543,
                    "source": "\n                  [key: string]: Definition;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 26,
                "name": "Options",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Change the mask placeholder. Instead of \"_\", you can change the unfilled characters mask as you like, simply\n by adding the placeholder option. For example, placeholder: \" \" will change the default autofill with empty\n values.\n\n @default \"_\"",
                    "isMethod": false,
                    "_": 34,
                    "source": "\n        /**\n         * Change the mask placeholder. Instead of \"_\", you can change the unfilled characters mask as you like, simply\n         * by adding the placeholder option. For example, placeholder: \" \" will change the default autofill with empty\n         * values.\n         *\n         * @default \"_\"\n         */\n        placeholder?: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 34,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 34,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 34,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate an optional part in the mask.\n\n @default { start: \"[\", end: \"]\" }",
                    "isMethod": false,
                    "_": 40,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate an optional part in the mask.\n         *\n         * @default { start: \"[\", end: \"]\" }\n         */\n        optionalmarker?: Range | undefined;",
                    "name": "optionalmarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 40,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 40,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 40,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate a quantifier in the mask.\n\n @default { start: \"{\", end: \"}\" }",
                    "isMethod": false,
                    "_": 46,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate a quantifier in the mask.\n         *\n         * @default { start: \"{\", end: \"}\" }\n         */\n        quantifiermarker?: Range | undefined;",
                    "name": "quantifiermarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 46,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 46,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 46,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate a group in the mask.\n\n @default { start: \"(\", end: \")\" }",
                    "isMethod": false,
                    "_": 52,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate a group in the mask.\n         *\n         * @default { start: \"(\", end: \")\" }\n         */\n        groupmarker?: Range | undefined;",
                    "name": "groupmarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Range",
                          "targs": [],
                          "isNullable": false,
                          "_": 52,
                          "source": " Range"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 52,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 52,
                      "source": " Range | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to indicate an alternator part in the mask.\n\n @default \"|\"",
                    "isMethod": false,
                    "_": 58,
                    "source": "\n        /**\n         * Definition of the symbols used to indicate an alternator part in the mask.\n         *\n         * @default \"|\"\n         */\n        alternatormarker?: string | undefined;",
                    "name": "alternatormarker",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 58,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 58,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 58,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Definition of the symbols used to escape a part in the mask.\n\n @default \"\\\\\"",
                    "isMethod": false,
                    "_": 64,
                    "source": "\n        /**\n         * Definition of the symbols used to escape a part in the mask.\n         *\n         * @default \"\\\\\"\n         */\n        escapeChar?: string | undefined;",
                    "name": "escapeChar",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 64,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 64,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 64,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "The mask to use.",
                    "isMethod": false,
                    "_": 68,
                    "source": "\n        /**\n         * The mask to use.\n         */\n        mask?: string | string[] | ((opts: Options) => string | string[]) | undefined;",
                    "name": "mask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 68,
                          "source": " string"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 68,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 68,
                          "source": " string[]"
                        },
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 68,
                                "source": " string"
                              },
                              {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 68,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 68,
                                "source": " string[]"
                              }
                            ],
                            "isNullable": false,
                            "_": 68,
                            "source": " string | string[]"
                          },
                          "params": [
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 68,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 68,
                          "source": " ((opts: Options) => string | string[])"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 68,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 68,
                      "source": " string | string[] | ((opts: Options) => string | string[]) | undefined"
                    }
                  },
                  {
                    "doc": "Use a regular expression as a mask. When using shorthands be aware that you need to double escape or use\n String.raw with a string literal.",
                    "isMethod": false,
                    "_": 73,
                    "source": "\n        /**\n         * Use a regular expression as a mask. When using shorthands be aware that you need to double escape or use\n         * String.raw with a string literal.\n         */\n        regex?: string | undefined;",
                    "name": "regex",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 73,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 73,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 73,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is completed.",
                    "isMethod": false,
                    "_": 77,
                    "source": "\n        /**\n         * Execute a function when the mask is completed.\n         */\n        oncomplete?: (() => void) | undefined;",
                    "name": "oncomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 77,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 77,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 77,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 77,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is cleared.",
                    "isMethod": false,
                    "_": 81,
                    "source": "\n        /**\n         * Execute a function when the mask is cleared.\n         */\n        onincomplete?: (() => void) | undefined;",
                    "name": "onincomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 81,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 81,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 81,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 81,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Execute a function when the mask is cleared.",
                    "isMethod": false,
                    "_": 85,
                    "source": "\n        /**\n         * Execute a function when the mask is cleared.\n         */\n        oncleared?: (() => void) | undefined;",
                    "name": "oncleared",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 85,
                            "source": " void"
                          },
                          "params": [],
                          "isNullable": false,
                          "_": 85,
                          "source": " (() => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 85,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 85,
                      "source": " (() => void) | undefined"
                    }
                  },
                  {
                    "doc": "Mask repeat function. Repeat the mask definition x-times.\n `*` ~ forever, otherwise specify an integer\n\n @default 0",
                    "isMethod": false,
                    "_": 92,
                    "source": "\n        /**\n         * Mask repeat function. Repeat the mask definition x-times.\n         * `*` ~ forever, otherwise specify an integer\n         *\n         * @default 0\n         */\n        repeat?: number | string | undefined;",
                    "name": "repeat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 92,
                          "source": " number"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 92,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 92,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 92,
                      "source": " number | string | undefined"
                    }
                  },
                  {
                    "doc": "Toggle to allocate as much possible or the opposite. Non-greedy repeat function. With the non-greedy option\n set to `false`, you can specify `*` as repeat. This makes an endless repeat.\n\n @default false",
                    "isMethod": false,
                    "_": 99,
                    "source": "\n        /**\n         * Toggle to allocate as much possible or the opposite. Non-greedy repeat function. With the non-greedy option\n         * set to `false`, you can specify `*` as repeat. This makes an endless repeat.\n         *\n         * @default false\n         */\n        greedy?: boolean | undefined;",
                    "name": "greedy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 99,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 99,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 99,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Automatically unmask the value when retrieved.\n\n When setting this option to true the plugin also expects the initial value from the server to be unmasked.\n\n @default false",
                    "isMethod": false,
                    "_": 107,
                    "source": "\n        /**\n         * Automatically unmask the value when retrieved.\n         *\n         * When setting this option to true the plugin also expects the initial value from the server to be unmasked.\n         *\n         * @default false\n         */\n        autoUnmask?: boolean | undefined;",
                    "name": "autoUnmask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 107,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 107,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 107,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Remove the mask before submitting the form.\n\n @default false",
                    "isMethod": false,
                    "_": 113,
                    "source": "\n        /**\n         * Remove the mask before submitting the form.\n         *\n         * @default false\n         */\n        removeMaskOnSubmit?: boolean | undefined;",
                    "name": "removeMaskOnSubmit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 113,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 113,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 113,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Remove the empty mask on blur or when not empty remove the optional trailing part.\n\n @default true",
                    "isMethod": false,
                    "_": 119,
                    "source": "\n        /**\n         * Remove the empty mask on blur or when not empty remove the optional trailing part.\n         *\n         * @default true\n         */\n        clearMaskOnLostFocus?: boolean | undefined;",
                    "name": "clearMaskOnLostFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 119,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 119,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 119,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Toggle to insert or overwrite input. This option can be altered by pressing the Insert key.\n\n @default true",
                    "isMethod": false,
                    "_": 125,
                    "source": "\n        /**\n         * Toggle to insert or overwrite input. This option can be altered by pressing the Insert key.\n         *\n         * @default true\n         */\n        insertMode?: boolean | undefined;",
                    "name": "insertMode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 125,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 125,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 125,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Show selected caret when `insertMode = false`.\n\n @default true",
                    "isMethod": false,
                    "_": 131,
                    "source": "\n        /**\n         * Show selected caret when `insertMode = false`.\n         *\n         * @default true\n         */\n        insertModeVisual?: boolean | undefined;",
                    "name": "insertModeVisual",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 131,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 131,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 131,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Clear the incomplete input on blur.\n\n @default false",
                    "isMethod": false,
                    "_": 137,
                    "source": "\n        /**\n         * Clear the incomplete input on blur.\n         *\n         * @default false\n         */\n        clearIncomplete?: boolean | undefined;",
                    "name": "clearIncomplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 137,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 137,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 137,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "The alias to use.\n\n @default null",
                    "isMethod": false,
                    "_": 143,
                    "source": "\n        /**\n         * The alias to use.\n         *\n         * @default null\n         */\n        alias?: string | undefined;",
                    "name": "alias",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 143,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 143,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 143,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Callback to implement autocomplete on certain keys for example.",
                    "isMethod": false,
                    "_": 147,
                    "source": "\n        /**\n         * Callback to implement autocomplete on certain keys for example.\n         */\n        onKeyDown?:\n            | ((\n                  event: KeyboardEvent,\n                  buffer: string[],\n                  caretPos: { begin: number; end: number },\n                  opts: Options,\n              ) => void)\n            | undefined;",
                    "name": "onKeyDown",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 153,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "event",
                              "type": {
                                "ref": "KeyboardEvent",
                                "targs": [],
                                "isNullable": false,
                                "_": 149,
                                "source": " KeyboardEvent"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 150,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 150,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "ref": "IInline1",
                                "targs": [],
                                "isNullable": false,
                                "_": 151,
                                "source": " { begin: number; end: number }"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 152,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 148,
                          "source": " ((\n                  event: KeyboardEvent,\n                  buffer: string[],\n                  caretPos: { begin: number; end: number },\n                  opts: Options,\n              ) => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 154,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 148,
                      "source": "\n            | ((\n                  event: KeyboardEvent,\n                  buffer: string[],\n                  caretPos: { begin: number; end: number },\n                  opts: Options,\n              ) => void)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Executes before masking the initial value to allow preprocessing of the initial value.",
                    "isMethod": false,
                    "_": 158,
                    "source": "\n        /**\n         * Executes before masking the initial value to allow preprocessing of the initial value.\n         */\n        onBeforeMask?: ((initialValue: string, opts: Options) => string) | undefined;",
                    "name": "onBeforeMask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 158,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "initialValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 158,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 158,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 158,
                          "source": " ((initialValue: string, opts: Options) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 158,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 158,
                      "source": " ((initialValue: string, opts: Options) => string) | undefined"
                    }
                  },
                  {
                    "doc": "This callback allows for preprocessing the pasted value before actually handling the value for masking.\n This can be useful for stripping away some characters before processing. You can also disable pasting\n a value by returning false in the `onBeforePaste` call.",
                    "isMethod": false,
                    "_": 164,
                    "source": "\n        /**\n         * This callback allows for preprocessing the pasted value before actually handling the value for masking.\n         * This can be useful for stripping away some characters before processing. You can also disable pasting\n         * a value by returning false in the `onBeforePaste` call.\n         */\n        onBeforePaste?: ((pastedValue: string, opts: Options) => string) | undefined;",
                    "name": "onBeforePaste",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 164,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "pastedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 164,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 164,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 164,
                          "source": " ((pastedValue: string, opts: Options) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 164,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 164,
                      "source": " ((pastedValue: string, opts: Options) => string) | undefined"
                    }
                  },
                  {
                    "doc": "Executes before writing to the masked element. Use this to do some extra processing of the input. This can\n be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.",
                    "isMethod": false,
                    "_": 169,
                    "source": "\n        /**\n         * Executes before writing to the masked element. Use this to do some extra processing of the input. This can\n         * be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.\n         */\n        onBeforeWrite?:\n            | ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)\n            | undefined;",
                    "name": "onBeforeWrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "ref": "CommandObject",
                            "targs": [],
                            "isNullable": false,
                            "_": 170,
                            "source": " CommandObject"
                          },
                          "params": [
                            {
                              "name": "event",
                              "type": {
                                "ref": "KeyboardEvent",
                                "targs": [],
                                "isNullable": false,
                                "_": 170,
                                "source": " KeyboardEvent"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 170,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 170,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 170,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 170,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 170,
                          "source": " ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 171,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 170,
                      "source": "\n            | ((event: KeyboardEvent, buffer: string[], caretPos: number, opts: Options) => CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Executes after unmasking to allow post-processing of the unmaskedvalue.\n\n @returns New unmasked value",
                    "isMethod": false,
                    "_": 177,
                    "source": "\n        /**\n         * Executes after unmasking to allow post-processing of the unmaskedvalue.\n         *\n         * @returns New unmasked value\n         */\n        onUnMask?: ((maskedValue: string, unmaskedValue: string) => string) | undefined;",
                    "name": "onUnMask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "string",
                            "isNullable": false,
                            "_": 177,
                            "source": " string"
                          },
                          "params": [
                            {
                              "name": "maskedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 177,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "unmaskedValue",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 177,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 177,
                          "source": " ((maskedValue: string, unmaskedValue: string) => string)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 177,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 177,
                      "source": " ((maskedValue: string, unmaskedValue: string) => string) | undefined"
                    }
                  },
                  {
                    "doc": "Shows the mask when the input gets focus.\n\n @default true",
                    "isMethod": false,
                    "_": 183,
                    "source": "\n        /**\n         * Shows the mask when the input gets focus.\n         *\n         * @default true\n         */\n        showMaskOnFocus?: boolean | undefined;",
                    "name": "showMaskOnFocus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 183,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 183,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 183,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Shows the mask when the input is hevered by the mouse cursor.\n\n @default true",
                    "isMethod": false,
                    "_": 189,
                    "source": "\n        /**\n         * Shows the mask when the input is hevered by the mouse cursor.\n         *\n         * @default true\n         */\n        showMaskOnHover?: boolean | undefined;",
                    "name": "showMaskOnHover",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 189,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 189,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 189,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Callback function is executed on every keyvalidation with the key, result as the parameter.",
                    "isMethod": false,
                    "_": 193,
                    "source": "\n        /**\n         * Callback function is executed on every keyvalidation with the key, result as the parameter.\n         */\n        onKeyValidation?: ((key: number, result: boolean) => void) | undefined;",
                    "name": "onKeyValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "void",
                            "isNullable": false,
                            "_": 193,
                            "source": " void"
                          },
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 193,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "result",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 193,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 193,
                          "source": " ((key: number, result: boolean) => void)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 193,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 193,
                      "source": " ((key: number, result: boolean) => void) | undefined"
                    }
                  },
                  {
                    "doc": "A character which can be used to skip an optional part of a mask.\n\n @default \" \"",
                    "isMethod": false,
                    "_": 199,
                    "source": "\n        /**\n         * A character which can be used to skip an optional part of a mask.\n         *\n         * @default \" \"\n         */\n        skipOptionalPartCharacter?: string | undefined;",
                    "name": "skipOptionalPartCharacter",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 199,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 199,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 199,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Numeric input direction. Keeps the caret at the end.\n\n @default false",
                    "isMethod": false,
                    "_": 205,
                    "source": "\n        /**\n         * Numeric input direction. Keeps the caret at the end.\n         *\n         * @default false\n         */\n        numericInput?: boolean | undefined;",
                    "name": "numericInput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 205,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 205,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 205,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Align the input to the right\n\n By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination of\n the `numericInput` option or the `dir-attribute`.\n\n @default true",
                    "isMethod": false,
                    "_": 214,
                    "source": "\n        /**\n         * Align the input to the right\n         *\n         * By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination of\n         * the `numericInput` option or the `dir-attribute`.\n         *\n         * @default true\n         */\n        rightAlign?: boolean | undefined;",
                    "name": "rightAlign",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 214,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 214,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 214,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Make escape behave like undo. (ctrl-Z) Pressing escape reverts the value to the value before focus.\n\n @default true",
                    "isMethod": false,
                    "_": 220,
                    "source": "\n        /**\n         * Make escape behave like undo. (ctrl-Z) Pressing escape reverts the value to the value before focus.\n         *\n         * @default true\n         */\n        undoOnEscape?: boolean | undefined;",
                    "name": "undoOnEscape",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 220,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 220,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 220,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define the radixpoint (decimal separator)\n\n @default \"\"",
                    "isMethod": false,
                    "_": 226,
                    "source": "\n        /**\n         * Define the radixpoint (decimal separator)\n         *\n         * @default \"\"\n         */\n        radixPoint?: string | undefined;",
                    "name": "radixPoint",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 226,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 226,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 226,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Define the groupseparator.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 232,
                    "source": "\n        /**\n         * Define the groupseparator.\n         *\n         * @default \"\"\n         */\n        groupSeparator?: string | undefined;",
                    "name": "groupSeparator",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 232,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 232,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 232,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the\n mask will be postponed if possible.\n\n ex. $(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\n\n typing 1212345123 => should result in +55-12-1234-5123 type extra 4 => switch to +55-12-12345-1234\n\n When the option is not set, it will default to `false`, except for multiple masks it will default to `true`!",
                    "isMethod": false,
                    "_": 243,
                    "source": "\n        /**\n         * Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the\n         * mask will be postponed if possible.\n         *\n         * ex. $(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\n         *\n         * typing 1212345123 => should result in +55-12-1234-5123 type extra 4 => switch to +55-12-12345-1234\n         *\n         * When the option is not set, it will default to `false`, except for multiple masks it will default to `true`!\n         */\n        keepStatic?: boolean | null | undefined;",
                    "name": "keepStatic",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 243,
                          "source": " boolean"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 243,
                          "source": " null"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 243,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 243,
                      "source": " boolean | null | undefined"
                    }
                  },
                  {
                    "doc": "When enabled the caret position is set after the latest valid position on TAB.\n\n @default true",
                    "isMethod": false,
                    "_": 249,
                    "source": "\n        /**\n         * When enabled the caret position is set after the latest valid position on TAB.\n         *\n         * @default true\n         */\n        positionCaretOnTab?: boolean | undefined;",
                    "name": "positionCaretOnTab",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 249,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 249,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 249,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Allows for tabbing through the different parts of the masked field.\n\n @default false",
                    "isMethod": false,
                    "_": 255,
                    "source": "\n        /**\n         * Allows for tabbing through the different parts of the masked field.\n         *\n         * @default false\n         */\n        tabThrough?: boolean | undefined;",
                    "name": "tabThrough",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 255,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 255,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 255,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "List with the supported input types\n\n @default [\"text\", \"tel\", \"url\", \"password\", \"search\"]",
                    "isMethod": false,
                    "_": 261,
                    "source": "\n        /**\n         * List with the supported input types\n         *\n         * @default [\"text\", \"tel\", \"url\", \"password\", \"search\"]\n         */\n        supportsInputType?: string[] | undefined;",
                    "name": "supportsInputType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 261,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 261,
                          "source": " string[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 261,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 261,
                      "source": " string[] | undefined"
                    }
                  },
                  {
                    "doc": "Specify keyCodes which should not be considered in the keypress event, otherwise the `preventDefault` will\n stop their default behavior especially in FF.",
                    "isMethod": false,
                    "_": 266,
                    "source": "\n        /**\n         * Specify keyCodes which should not be considered in the keypress event, otherwise the `preventDefault` will\n         * stop their default behavior especially in FF.\n         */\n        ignorables?: number[] | undefined;",
                    "name": "ignorables",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 266,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 266,
                          "source": " number[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 266,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 266,
                      "source": " number[] | undefined"
                    }
                  },
                  {
                    "doc": "With this call-in (hook) you can override the default implementation of the isComplete function.",
                    "isMethod": false,
                    "_": 270,
                    "source": "\n        /**\n         * With this call-in (hook) you can override the default implementation of the isComplete function.\n         */\n        isComplete?: ((buffer: string[], opts: Options) => boolean) | undefined;",
                    "name": "isComplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "boolean",
                            "isNullable": false,
                            "_": 270,
                            "source": " boolean"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 270,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 270,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 270,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 270,
                          "source": " ((buffer: string[], opts: Options) => boolean)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 270,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 270,
                      "source": " ((buffer: string[], opts: Options) => boolean) | undefined"
                    }
                  },
                  {
                    "doc": "Hook to postValidate the result from `isValid`. Useful for validating the entry as a whole.",
                    "isMethod": false,
                    "_": 274,
                    "source": "\n        /**\n         * Hook to postValidate the result from `isValid`. Useful for validating the entry as a whole.\n         */\n        postValidation?:\n            | ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  currentResult: boolean,\n                  opts: Options,\n                  maskset: any,\n                  strict: boolean,\n                  fromCheckval: boolean,\n              ) => boolean | CommandObject)\n            | undefined;",
                    "name": "postValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 284,
                                "source": " boolean"
                              },
                              {
                                "ref": "CommandObject",
                                "targs": [],
                                "isNullable": false,
                                "_": 284,
                                "source": " CommandObject"
                              }
                            ],
                            "isNullable": false,
                            "_": 284,
                            "source": " boolean | CommandObject"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 276,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 276,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "pos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 277,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "char",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 278,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "currentResult",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 279,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 280,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "maskset",
                              "type": {
                                "core": "any",
                                "isNullable": false,
                                "_": 281,
                                "source": " any"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "strict",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 282,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "fromCheckval",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 283,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 275,
                          "source": " ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  currentResult: boolean,\n                  opts: Options,\n                  maskset: any,\n                  strict: boolean,\n                  fromCheckval: boolean,\n              ) => boolean | CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 285,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 275,
                      "source": "\n            | ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  currentResult: boolean,\n                  opts: Options,\n                  maskset: any,\n                  strict: boolean,\n                  fromCheckval: boolean,\n              ) => boolean | CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "Hook to preValidate the input. Useful for validating regardless of the definition.\n\n When returning `true`, the normal validation kicks in, otherwise, it is skipped.\n\n When returning a command object the actions are executed and further validation is stopped. If you want to\n continue further validation, you need to add the `rewritePosition` action.",
                    "isMethod": false,
                    "_": 294,
                    "source": "\n        /**\n         * Hook to preValidate the input. Useful for validating regardless of the definition.\n         *\n         * When returning `true`, the normal validation kicks in, otherwise, it is skipped.\n         *\n         * When returning a command object the actions are executed and further validation is stopped. If you want to\n         * continue further validation, you need to add the `rewritePosition` action.\n         */\n        preValidation?:\n            | ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  isSelection: boolean,\n                  opts: Options,\n                  maskset: any,\n                  caretPos: { begin: number; end: number },\n                  strict: boolean,\n              ) => boolean | CommandObject)\n            | undefined;",
                    "name": "preValidation",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 304,
                                "source": " boolean"
                              },
                              {
                                "ref": "CommandObject",
                                "targs": [],
                                "isNullable": false,
                                "_": 304,
                                "source": " CommandObject"
                              }
                            ],
                            "isNullable": false,
                            "_": 304,
                            "source": " boolean | CommandObject"
                          },
                          "params": [
                            {
                              "name": "buffer",
                              "type": {
                                "core": "array",
                                "targs": [
                                  {
                                    "core": "string",
                                    "isNullable": false,
                                    "_": 296,
                                    "source": " string"
                                  }
                                ],
                                "isNullable": false,
                                "_": 296,
                                "source": " string[]"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "pos",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 297,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "char",
                              "type": {
                                "core": "string",
                                "isNullable": false,
                                "_": 298,
                                "source": " string"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "isSelection",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 299,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "opts",
                              "type": {
                                "ref": "Options",
                                "targs": [],
                                "isNullable": false,
                                "_": 300,
                                "source": " Options"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "maskset",
                              "type": {
                                "core": "any",
                                "isNullable": false,
                                "_": 301,
                                "source": " any"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "caretPos",
                              "type": {
                                "ref": "IInline2",
                                "targs": [],
                                "isNullable": false,
                                "_": 302,
                                "source": " { begin: number; end: number }"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "strict",
                              "type": {
                                "core": "boolean",
                                "isNullable": false,
                                "_": 303,
                                "source": " boolean"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 295,
                          "source": " ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  isSelection: boolean,\n                  opts: Options,\n                  maskset: any,\n                  caretPos: { begin: number; end: number },\n                  strict: boolean,\n              ) => boolean | CommandObject)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 305,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 295,
                      "source": "\n            | ((\n                  buffer: string[],\n                  pos: number,\n                  char: string,\n                  isSelection: boolean,\n                  opts: Options,\n                  maskset: any,\n                  caretPos: { begin: number; end: number },\n                  strict: boolean,\n              ) => boolean | CommandObject)\n            | undefined"
                    }
                  },
                  {
                    "doc": "The `staticDefinitionSymbol` option is used to indicate that the static entries in the mask can match a\n certain definition. Especially useful with alternators so that static element in the mask can match\n another alternation.\n\n @default undefined",
                    "isMethod": false,
                    "_": 313,
                    "source": "\n        /**\n         * The `staticDefinitionSymbol` option is used to indicate that the static entries in the mask can match a\n         * certain definition. Especially useful with alternators so that static element in the mask can match\n         * another alternation.\n         *\n         * @default undefined\n         */\n        staticDefinitionSymbol?: string | undefined;",
                    "name": "staticDefinitionSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 313,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 313,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 313,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Just in time masking. With the `jitMasking` option you can enable jit masking. The mask will only be\n visible for the user entered characters.\n\n @default false",
                    "isMethod": false,
                    "_": 320,
                    "source": "\n        /**\n         * Just in time masking. With the `jitMasking` option you can enable jit masking. The mask will only be\n         * visible for the user entered characters.\n         *\n         * @default false\n         */\n        jitMasking?: boolean | undefined;",
                    "name": "jitMasking",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 320,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 320,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 320,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Return nothing from the input `value` property when the user hasn't entered anything. If this is false,\n the mask might be returned.\n\n @default true",
                    "isMethod": false,
                    "_": 327,
                    "source": "\n        /**\n         * Return nothing from the input `value` property when the user hasn't entered anything. If this is false,\n         * the mask might be returned.\n         *\n         * @default true\n         */\n        nullable?: boolean | undefined;",
                    "name": "nullable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 327,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 327,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 327,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Disable value property patching\n\n @default false",
                    "isMethod": false,
                    "_": 333,
                    "source": "\n        /**\n         * Disable value property patching\n         *\n         * @default false\n         */\n        noValuePatching?: boolean | undefined;",
                    "name": "noValuePatching",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 333,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 333,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 333,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Positioning of the caret on click.\n\n Options:\n\n * `none`\n * `lvp` - based on the last valid position (default)\n * `radixFocus` - position caret to radixpoint on initial click\n * `select` - select the whole input\n * `ignore` - ignore the click and continue the mask\n\n @default \"lvp\"",
                    "isMethod": false,
                    "_": 347,
                    "source": "\n        /**\n         * Positioning of the caret on click.\n         *\n         * Options:\n         *\n         * * `none`\n         * * `lvp` - based on the last valid position (default)\n         * * `radixFocus` - position caret to radixpoint on initial click\n         * * `select` - select the whole input\n         * * `ignore` - ignore the click and continue the mask\n         *\n         * @default \"lvp\"\n         */\n        positionCaretOnClick?: PositionCaretOnClick | undefined;",
                    "name": "positionCaretOnClick",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "PositionCaretOnClick",
                          "targs": [],
                          "isNullable": false,
                          "_": 347,
                          "source": " PositionCaretOnClick"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 347,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 347,
                      "source": " PositionCaretOnClick | undefined"
                    }
                  },
                  {
                    "doc": "Apply casing at the mask-level.\n\n @default undefined",
                    "isMethod": false,
                    "_": 353,
                    "source": "\n        /**\n         * Apply casing at the mask-level.\n         *\n         * @default undefined\n         */\n        casing?: Casing | undefined;",
                    "name": "casing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Casing",
                          "targs": [],
                          "isNullable": false,
                          "_": 353,
                          "source": " Casing"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 353,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 353,
                      "source": " Casing | undefined"
                    }
                  },
                  {
                    "doc": "Specify the inputmode - already in place for when browsers start to support them\n https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\n\n @default \"verbatim\"",
                    "isMethod": false,
                    "_": 360,
                    "source": "\n        /**\n         * Specify the inputmode - already in place for when browsers start to support them\n         * https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\n         *\n         * @default \"verbatim\"\n         */\n        inputmode?: InputMode | undefined;",
                    "name": "inputmode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "InputMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 360,
                          "source": " InputMode"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 360,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 360,
                      "source": " InputMode | undefined"
                    }
                  },
                  {
                    "doc": "Specify to use the `data-inputmask` attributes or to ignore them.\n\n If you don't use data attributes you can disable the import by specifying `importDataAttributes: false`.\n\n @default true",
                    "isMethod": false,
                    "_": 368,
                    "source": "\n        /**\n         * Specify to use the `data-inputmask` attributes or to ignore them.\n         *\n         * If you don't use data attributes you can disable the import by specifying `importDataAttributes: false`.\n         *\n         * @default true\n         */\n        importDataAttributes?: boolean | undefined;",
                    "name": "importDataAttributes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 368,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 368,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 368,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Alter the behavior of the char shifting on entry or deletion.\n\n In some cases shifting the mask entries or deletion should be more restrictive.\n\n Ex. date masks. Shifting month to day makes no sense\n\n @default true",
                    "isMethod": false,
                    "_": 378,
                    "source": "\n        /**\n         * Alter the behavior of the char shifting on entry or deletion.\n         *\n         * In some cases shifting the mask entries or deletion should be more restrictive.\n         *\n         * Ex. date masks. Shifting month to day makes no sense\n         *\n         * @default true\n         */\n        shiftPositions?: boolean | undefined;",
                    "name": "shiftPositions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 378,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 378,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 378,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Use the default defined definitions from the prototype.\n\n @default true",
                    "isMethod": false,
                    "_": 384,
                    "source": "\n        /**\n         * Use the default defined definitions from the prototype.\n         *\n         * @default true\n         */\n        usePrototypeDefinitions?: boolean | undefined;",
                    "name": "usePrototypeDefinitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 384,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 384,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 384,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Minimum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.",
                    "isMethod": false,
                    "_": 388,
                    "source": "\n        /**\n         * Minimum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.\n         */\n        min?: string | number | undefined;",
                    "name": "min",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 388,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 388,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 388,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 388,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Maximum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.",
                    "isMethod": false,
                    "_": 392,
                    "source": "\n        /**\n         * Maximum value. This needs to be in the same format as the `inputFormat` when used with the datetime alias.\n         */\n        max?: string | number | undefined;",
                    "name": "max",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 392,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 392,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 392,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 392,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Number of fractionalDigits.\n\n Possible values:\n\n * A number describing the number of fractional digits.\n * `*`\n * Quantifier syntax like `2,4`. When the quantifier syntax is used, the `digitsOptional` option is ignored\n\n @default \"*\"",
                    "isMethod": false,
                    "_": 405,
                    "source": "\n\n        /**\n         * Number of fractionalDigits.\n         *\n         * Possible values:\n         *\n         * * A number describing the number of fractional digits.\n         * * `*`\n         * * Quantifier syntax like `2,4`. When the quantifier syntax is used, the `digitsOptional` option is ignored\n         *\n         * @default \"*\"\n         */\n        digits?: string | number | undefined;",
                    "name": "digits",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 405,
                          "source": " string"
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 405,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 405,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 405,
                      "source": " string | number | undefined"
                    }
                  },
                  {
                    "doc": "Specify wheter the digits are optional.\n\n @default true",
                    "isMethod": false,
                    "_": 411,
                    "source": "\n        /**\n         * Specify wheter the digits are optional.\n         *\n         * @default true\n         */\n        digitsOptional?: boolean | undefined;",
                    "name": "digitsOptional",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 411,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 411,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 411,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Enforces the decimal part when leaving the input field.\n\n @default false",
                    "isMethod": false,
                    "_": 417,
                    "source": "\n        /**\n         * Enforces the decimal part when leaving the input field.\n         *\n         * @default false\n         */\n        enforceDigitsOnBlur?: boolean | undefined;",
                    "name": "enforceDigitsOnBlur",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 417,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 417,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 417,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Allow to enter -.\n\n @default true",
                    "isMethod": false,
                    "_": 423,
                    "source": "\n        /**\n         * Allow to enter -.\n         *\n         * @default true\n         */\n        allowMinus?: boolean | undefined;",
                    "name": "allowMinus",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 423,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 423,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 423,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define your negationSymbol.\n\n @default { front: \"-\", back: \"\" }",
                    "isMethod": false,
                    "_": 429,
                    "source": "\n        /**\n         * Define your negationSymbol.\n         *\n         * @default { front: \"-\", back: \"\" }\n         */\n        negationSymbol?: { front: string; back: string } | undefined;",
                    "name": "negationSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline3",
                          "targs": [],
                          "isNullable": false,
                          "_": 429,
                          "source": " { front: string; back: string }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 429,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 429,
                      "source": " { front: string; back: string } | undefined"
                    }
                  },
                  {
                    "doc": "Define a prefix.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 435,
                    "source": "\n        /**\n         * Define a prefix.\n         *\n         * @default \"\"\n         */\n        prefix?: string | undefined;",
                    "name": "prefix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 435,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 435,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 435,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Define a suffix.\n\n @default \"\"",
                    "isMethod": false,
                    "_": 441,
                    "source": "\n        /**\n         * Define a suffix.\n         *\n         * @default \"\"\n         */\n        suffix?: string | undefined;",
                    "name": "suffix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 441,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 441,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 441,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Set the maximum value when the user types a number which is greater that the value of max.\n\n @default false",
                    "isMethod": false,
                    "_": 447,
                    "source": "\n        /**\n         * Set the maximum value when the user types a number which is greater that the value of max.\n         *\n         * @default false\n         */\n        SetMaxOnOverflow?: boolean | undefined;",
                    "name": "SetMaxOnOverflow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 447,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 447,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 447,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Define the step the ctrl-up & ctrl-down must take.\n\n @default 1",
                    "isMethod": false,
                    "_": 453,
                    "source": "\n        /**\n         * Define the step the ctrl-up & ctrl-down must take.\n         *\n         * @default 1\n         */\n        step?: number | undefined;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 453,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 453,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 453,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Make unmasking returning a number instead of a string.\n\n Be warned that using the unmaskAsNumber option together with jQuery.serialize will fail as serialize expects a string. (See issue #1288)\n\n @default false",
                    "isMethod": false,
                    "_": 461,
                    "source": "\n        /**\n         * Make unmasking returning a number instead of a string.\n         *\n         * Be warned that using the unmaskAsNumber option together with jQuery.serialize will fail as serialize expects a string. (See issue #1288)\n         *\n         * @default false\n         */\n        unmaskAsNumber?: boolean | undefined;",
                    "name": "unmaskAsNumber",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 461,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 461,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 461,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "Indicates whether the value passed for initialization is text or a number.\n\n * `text` - radixpoint should be the same as in the options\n * `number` - radixpoint should be a . as the default for a number in js\n\n @default \"text\"",
                    "isMethod": false,
                    "_": 470,
                    "source": "\n        /**\n         * Indicates whether the value passed for initialization is text or a number.\n         *\n         * * `text` - radixpoint should be the same as in the options\n         * * `number` - radixpoint should be a . as the default for a number in js\n         *\n         * @default \"text\"\n         */\n        inputType?: 'text' | 'number' | undefined;",
                    "name": "inputType",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "'text'",
                          "isNullable": false,
                          "_": 470,
                          "source": " 'text'"
                        },
                        {
                          "core": "'number'",
                          "isNullable": false,
                          "_": 470,
                          "source": " 'number'"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 470,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 470,
                      "source": " 'text' | 'number' | undefined"
                    }
                  },
                  {
                    "doc": "Set the function for rounding the values when set.\n\n Other examples:\n * `Math.floor`\n * `fn(x) { // do your own rounding logic // return x; }`\n\n @default Math.round",
                    "isMethod": false,
                    "_": 480,
                    "source": "\n        /**\n         * Set the function for rounding the values when set.\n         *\n         * Other examples:\n         * * `Math.floor`\n         * * `fn(x) { // do your own rounding logic // return x; }`\n         *\n         * @default Math.round\n         */\n        roundingFN?: ((input: number) => number) | undefined;",
                    "name": "roundingFN",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "number",
                            "isNullable": false,
                            "_": 480,
                            "source": " number"
                          },
                          "params": [
                            {
                              "name": "input",
                              "type": {
                                "core": "number",
                                "isNullable": false,
                                "_": 480,
                                "source": " number"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 480,
                          "source": " ((input: number) => number)"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 480,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 480,
                      "source": " ((input: number) => number) | undefined"
                    }
                  },
                  {
                    "doc": "Define shortcuts. This will allow typing 1k => 1000, 2m => 2000000\n\n To disable just pass shortcuts: `null` as option\n\n @default {k: \"000\", m: \"000000\"}",
                    "isMethod": false,
                    "_": 488,
                    "source": "\n        /**\n         * Define shortcuts. This will allow typing 1k => 1000, 2m => 2000000\n         *\n         * To disable just pass shortcuts: `null` as option\n         *\n         * @default {k: \"000\", m: \"000000\"}\n         */\n        shortcuts?: { [shortcut: string]: string } | null | undefined;",
                    "name": "shortcuts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline4",
                          "targs": [],
                          "isNullable": false,
                          "_": 488,
                          "source": " { [shortcut: string]: string }"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 488,
                          "source": " null"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 488,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 488,
                      "source": " { [shortcut: string]: string } | null | undefined"
                    }
                  },
                  {
                    "doc": "Format used to input a date. This option is only effective for the datetime alias.\n\n Supported symbols\n\n * `d` - Day of the month as digits; no leading zero for single-digit days.\n * `dd` - Day of the month as digits; leading zero for single-digit days.\n * `ddd` - Day of the week as a three-letter abbreviation.\n * `dddd` - Day of the week as its full name.\n * `m` - Month as digits; no leading zero for single-digit months.\n * `mm` - Month as digits; leading zero for single-digit months.\n * `mmm` - Month as a three-letter abbreviation.\n * `mmmm` - Month as its full name.\n * `yy` - Year as last two digits; leading zero for years less than 10.\n * `yyyy` - Year as 4 digits.\n * `h` - Hours; no leading zero for single-digit hours (12-hour clock).\n * `hh` - Hours; leading zero for single-digit hours (12-hour clock).\n * `hx` - Hours; no limit; `x` = number of digits ~ use as h2, h3, ...\n * `H` - Hours; no leading zero for single-digit hours (24-hour clock).\n * `HH` - Hours; leading zero for single-digit hours (24-hour clock).\n * `Hx` - Hours; no limit; `x` = number of digits ~ use as H2, H3, ...\n * `M` - Minutes; no leading zero for single-digit minutes. Uppercase M unlike CF timeFormat's m to avoid\n         conflict with months.\n * `MM` - Minutes; leading zero for single-digit minutes. Uppercase MM unlike CF timeFormat's mm to avoid\n          conflict with months.\n * `s` - Seconds; no leading zero for single-digit seconds.\n * `ss` - Seconds; leading zero for single-digit seconds.\n * `l` - Milliseconds. 3 digits.\n * `L` - Milliseconds. 2 digits.\n * `t` - Lowercase, single-character time marker string: a or p.\n * `tt` - Two-character time marker string: am or pm.\n * `T` - Single-character time marker string: A or P.\n * `TT` - Two-character time marker string: AM or PM.\n * `Z` - US timezone abbreviation, e.g. EST or MDT. With non-US timezones or in the Opera browser, the\n         GMT/UTC offset is returned, e.g. GMT-0500\n * `o` - GMT/UTC timezone offset, e.g. -0500 or +0230.\n * `S` - The date's ordinal suffix (st, nd, rd, or th). Works well with d.\n\n @default \"isoDateTime\"",
                    "isMethod": false,
                    "_": 529,
                    "source": "\n        /**\n         * Format used to input a date. This option is only effective for the datetime alias.\n         *\n         * Supported symbols\n         *\n         * * `d` - Day of the month as digits; no leading zero for single-digit days.\n         * * `dd` - Day of the month as digits; leading zero for single-digit days.\n         * * `ddd` - Day of the week as a three-letter abbreviation.\n         * * `dddd` - Day of the week as its full name.\n         * * `m` - Month as digits; no leading zero for single-digit months.\n         * * `mm` - Month as digits; leading zero for single-digit months.\n         * * `mmm` - Month as a three-letter abbreviation.\n         * * `mmmm` - Month as its full name.\n         * * `yy` - Year as last two digits; leading zero for years less than 10.\n         * * `yyyy` - Year as 4 digits.\n         * * `h` - Hours; no leading zero for single-digit hours (12-hour clock).\n         * * `hh` - Hours; leading zero for single-digit hours (12-hour clock).\n         * * `hx` - Hours; no limit; `x` = number of digits ~ use as h2, h3, ...\n         * * `H` - Hours; no leading zero for single-digit hours (24-hour clock).\n         * * `HH` - Hours; leading zero for single-digit hours (24-hour clock).\n         * * `Hx` - Hours; no limit; `x` = number of digits ~ use as H2, H3, ...\n         * * `M` - Minutes; no leading zero for single-digit minutes. Uppercase M unlike CF timeFormat's m to avoid\n         *         conflict with months.\n         * * `MM` - Minutes; leading zero for single-digit minutes. Uppercase MM unlike CF timeFormat's mm to avoid\n         *          conflict with months.\n         * * `s` - Seconds; no leading zero for single-digit seconds.\n         * * `ss` - Seconds; leading zero for single-digit seconds.\n         * * `l` - Milliseconds. 3 digits.\n         * * `L` - Milliseconds. 2 digits.\n         * * `t` - Lowercase, single-character time marker string: a or p.\n         * * `tt` - Two-character time marker string: am or pm.\n         * * `T` - Single-character time marker string: A or P.\n         * * `TT` - Two-character time marker string: AM or PM.\n         * * `Z` - US timezone abbreviation, e.g. EST or MDT. With non-US timezones or in the Opera browser, the\n         *         GMT/UTC offset is returned, e.g. GMT-0500\n         * * `o` - GMT/UTC timezone offset, e.g. -0500 or +0230.\n         * * `S` - The date's ordinal suffix (st, nd, rd, or th). Works well with d.\n         *\n         * @default \"isoDateTime\"\n         */\n        inputFormat?: string | undefined;",
                    "name": "inputFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 529,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 529,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 529,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Format of the unmasked value. This is only effective when used with the datetime alias.",
                    "isMethod": false,
                    "_": 533,
                    "source": "\n        /**\n         * Format of the unmasked value. This is only effective when used with the datetime alias.\n         */\n        outputFormat?: string | undefined;",
                    "name": "outputFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 533,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 533,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 533,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Visual format when the input looses focus",
                    "isMethod": false,
                    "_": 537,
                    "source": "\n        /**\n         * Visual format when the input looses focus\n         */\n        displayFormat?: string | undefined;",
                    "name": "displayFormat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 537,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 537,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 537,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Add new definitions to this inputmask.",
                    "isMethod": false,
                    "_": 541,
                    "source": "\n        /**\n         * Add new definitions to this inputmask.\n         */\n        definitions?:\n            | {\n                  [key: string]: Definition;\n              }\n            | undefined;",
                    "name": "definitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "IInline5",
                          "targs": [],
                          "isNullable": false,
                          "_": 542,
                          "source": " {\n                  [key: string]: Definition;\n              }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 545,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 542,
                      "source": "\n            | {\n                  [key: string]: Definition;\n              }\n            | undefined"
                    }
                  },
                  {
                    "doc": "Enable/disable prefilling of the year.\n Although you can just over type the proposed value without deleting, many seems to see a problem with the year prediction.\n This options is to disable this feature.\n\n @default true",
                    "isMethod": false,
                    "_": 553,
                    "source": "\n        /**\n         * Enable/disable prefilling of the year.\n         * Although you can just over type the proposed value without deleting, many seems to see a problem with the year prediction.\n         * This options is to disable this feature.\n         *\n         * @default true\n         */\n        prefillYear?: boolean | undefined;",
                    "name": "prefillYear",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 553,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 553,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 553,
                      "source": " boolean | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 556,
                "name": "Instance",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Return the default (empty) mask value.",
                    "isMethod": true,
                    "_": 560,
                    "source": "\n        /**\n         * Return the default (empty) mask value.\n         */\n        getemptymask(): string;",
                    "name": "getemptymask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 560,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If\n only a mask is provided the mask definition will be returned by the getmetadata.",
                    "isMethod": true,
                    "_": 565,
                    "source": "\n        /**\n         * The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If\n         * only a mask is provided the mask definition will be returned by the getmetadata.\n         */\n        getmetadata(): any;",
                    "name": "getmetadata",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 565,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "Check whether the returned value is masked or not; currently only works reliably when using `jquery.val` fn\n to retrieve the value",
                    "isMethod": true,
                    "_": 570,
                    "source": "\n        /**\n         * Check whether the returned value is masked or not; currently only works reliably when using `jquery.val` fn\n         * to retrieve the value\n         */\n        hasMaskedValue(): boolean;",
                    "name": "hasMaskedValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 570,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Verify whether the current value is complete or not.",
                    "isMethod": true,
                    "_": 574,
                    "source": "\n        /**\n         * Verify whether the current value is complete or not.\n         */\n        isComplete(): boolean;",
                    "name": "isComplete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 574,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Validate a given value against the mask.",
                    "isMethod": true,
                    "_": 578,
                    "source": "\n        /**\n         * Validate a given value against the mask.\n         */\n        isValid(): boolean;",
                    "name": "isValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 578,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Create a mask for the input.\n\n @param el Element selector, a single element or an array of elements.",
                    "isMethod": true,
                    "_": 584,
                    "source": "\n        /**\n         * Create a mask for the input.\n         *\n         * @param el Element selector, a single element or an array of elements.\n         */\n        mask(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>): Instance;",
                    "name": "mask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 584,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 584,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 584,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 584,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 584,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 584,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "Get an option on an existing inputmask.\n\n @param key Name of option to retrieve.",
                    "isMethod": true,
                    "_": 590,
                    "source": "\n        /**\n         * Get an option on an existing inputmask.\n         *\n         * @param key Name of option to retrieve.\n         */\n        option(key: string): any;",
                    "name": "option",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 590,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 590,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "Set an option on an existing inputmask. The option method is intented for adding extra options like\n callbacks, etc at a later time to the mask.\n\n When extra options are set the mask is automatically reapplied, unless you pas true for the `noremask`\n argument.",
                    "isMethod": true,
                    "_": 598,
                    "source": "\n        /**\n         * Set an option on an existing inputmask. The option method is intented for adding extra options like\n         * callbacks, etc at a later time to the mask.\n         *\n         * When extra options are set the mask is automatically reapplied, unless you pas true for the `noremask`\n         * argument.\n         */\n        option(opts: Options, noremask?: boolean): Instance;",
                    "name": "option",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 598,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "noremask",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 598,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 598,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "Remove the inputmask.",
                    "isMethod": true,
                    "_": 602,
                    "source": "\n        /**\n         * Remove the inputmask.\n         */\n        remove(): void;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 602,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The `setvalue` functionality is to set a value to the inputmask like you would do with `jQuery.val`, BUT it\n will trigger the internal event used by the inputmask always, whatever the case. This is particular useful\n when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the\n first event (`mouseenter`, `focus`, ...) the inputmask can detect if it where cloned and can reactivate the\n masking. However when setting the value with jQuery.val there is none of the events triggered in that case.\n The `setvalue` functionality does this for you.",
                    "isMethod": true,
                    "_": 611,
                    "source": "\n        /**\n         * The `setvalue` functionality is to set a value to the inputmask like you would do with `jQuery.val`, BUT it\n         * will trigger the internal event used by the inputmask always, whatever the case. This is particular useful\n         * when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the\n         * first event (`mouseenter`, `focus`, ...) the inputmask can detect if it where cloned and can reactivate the\n         * masking. However when setting the value with jQuery.val there is none of the events triggered in that case.\n         * The `setvalue` functionality does this for you.\n         */\n        setValue(value: string): void;",
                    "name": "setValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 611,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 611,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Gets the unmasked value.",
                    "isMethod": true,
                    "_": 615,
                    "source": "\n        /**\n         * Gets the unmasked value.\n         */\n        unmaskedvalue(): string;",
                    "name": "unmaskedvalue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 615,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 618,
                "name": "Definition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 619,
                    "source": "\n        validator: string | DefinitionValidator;",
                    "name": "validator",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 619,
                          "source": " string"
                        },
                        {
                          "ref": "DefinitionValidator",
                          "targs": [],
                          "isNullable": false,
                          "_": 619,
                          "source": " DefinitionValidator"
                        }
                      ],
                      "isNullable": false,
                      "_": 619,
                      "source": " string | DefinitionValidator"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 620,
                    "source": "\n        casing?: Casing | undefined;",
                    "name": "casing",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Casing",
                          "targs": [],
                          "isNullable": false,
                          "_": 620,
                          "source": " Casing"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 620,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 620,
                      "source": " Casing | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 621,
                    "source": "\n        cardinality?: number | undefined;",
                    "name": "cardinality",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 621,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 621,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 621,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 622,
                    "source": "\n        placeholder?: string | undefined;",
                    "name": "placeholder",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 622,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 622,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 622,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 623,
                    "source": "\n        definitionSymbol?: string | undefined;",
                    "name": "definitionSymbol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 623,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 623,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 623,
                      "source": " string | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 626,
                "name": "InsertPosition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Position to insert.",
                    "isMethod": false,
                    "_": 630,
                    "source": "\n        /**\n         * Position to insert.\n         */\n        pos: number;",
                    "name": "pos",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 630,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Character to insert.",
                    "isMethod": false,
                    "_": 634,
                    "source": "\n        /**\n         * Character to insert.\n         */\n        c: string;",
                    "name": "c",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 634,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "@default true",
                    "isMethod": false,
                    "_": 638,
                    "source": "\n        /**\n         * @default true\n         */\n        fromIsValid?: boolean | undefined;",
                    "name": "fromIsValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 638,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 638,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 638,
                      "source": " boolean | undefined"
                    }
                  },
                  {
                    "doc": "@default true",
                    "isMethod": false,
                    "_": 642,
                    "source": "\n        /**\n         * @default true\n         */\n        strict?: boolean | undefined;",
                    "name": "strict",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 642,
                          "source": " boolean"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 642,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 642,
                      "source": " boolean | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline6",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "CommandObject",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 670,
                    "source": " start: number;",
                    "name": "start",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 670,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 670,
                    "source": " end: number",
                    "name": "end",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 670,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 645,
                "name": "CommandObject",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Position to insert.",
                    "isMethod": false,
                    "_": 649,
                    "source": "\n        /**\n         * Position to insert.\n         */\n        pos?: number | undefined;",
                    "name": "pos",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 649,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 649,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 649,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Character to insert.",
                    "isMethod": false,
                    "_": 653,
                    "source": "\n        /**\n         * Character to insert.\n         */\n        c?: string | undefined;",
                    "name": "c",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 653,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 653,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 653,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Position of the caret.",
                    "isMethod": false,
                    "_": 657,
                    "source": "\n        /**\n         * Position of the caret.\n         */\n        caret?: number | undefined;",
                    "name": "caret",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 657,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 657,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 657,
                      "source": " number | undefined"
                    }
                  },
                  {
                    "doc": "Position(s) to remove.",
                    "isMethod": false,
                    "_": 661,
                    "source": "\n        /**\n         * Position(s) to remove.\n         */\n        remove?: number | number[] | undefined;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 661,
                          "source": " number"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 661,
                              "source": " number"
                            }
                          ],
                          "isNullable": false,
                          "_": 661,
                          "source": " number[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 661,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 661,
                      "source": " number | number[] | undefined"
                    }
                  },
                  {
                    "doc": "Position(s) to add.",
                    "isMethod": false,
                    "_": 665,
                    "source": "\n        /**\n         * Position(s) to add.\n         */\n        insert?: InsertPosition | InsertPosition[] | undefined;",
                    "name": "insert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "InsertPosition",
                          "targs": [],
                          "isNullable": false,
                          "_": 665,
                          "source": " InsertPosition"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "InsertPosition",
                              "targs": [],
                              "isNullable": false,
                              "_": 665,
                              "source": " InsertPosition"
                            }
                          ],
                          "isNullable": false,
                          "_": 665,
                          "source": " InsertPosition[]"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 665,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 665,
                      "source": " InsertPosition | InsertPosition[] | undefined"
                    }
                  },
                  {
                    "doc": "* `true` => refresh validPositions from the complete buffer .\n * `{ start: , end: }` => refresh from start to end.",
                    "isMethod": false,
                    "_": 670,
                    "source": "\n        /**\n         * * `true` => refresh validPositions from the complete buffer .\n         * * `{ start: , end: }` => refresh from start to end.\n         */\n        refreshFromBuffer?: true | { start: number; end: number } | undefined;",
                    "name": "refreshFromBuffer",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "true",
                          "isNullable": false,
                          "_": 670,
                          "source": " true"
                        },
                        {
                          "ref": "IInline6",
                          "targs": [],
                          "isNullable": false,
                          "_": 670,
                          "source": " { start: number; end: number }"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 670,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 670,
                      "source": " true | { start: number; end: number } | undefined"
                    }
                  },
                  {
                    "doc": "Rewrite the maskPos within the isvalid function.",
                    "isMethod": false,
                    "_": 674,
                    "source": "\n        /**\n         * Rewrite the maskPos within the isvalid function.\n         */\n        rewritePosition?: number | undefined;",
                    "name": "rewritePosition",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 674,
                          "source": " number"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 674,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 674,
                      "source": " number | undefined"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline7",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Static",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 713,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Definition",
                      "targs": [],
                      "isNullable": false,
                      "_": 713,
                      "source": " Definition"
                    },
                    "doc": "",
                    "_": 713,
                    "source": " [key: string]: Definition",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline8",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Static",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 717,
                      "source": " string"
                    },
                    "value": {
                      "ref": "Options",
                      "targs": [],
                      "isNullable": false,
                      "_": 717,
                      "source": " Options"
                    },
                    "doc": "",
                    "_": 717,
                    "source": " [key: string]: Options",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 677,
                "name": "Static",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 698,
                    "source": "\n\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param maskOrAlias A mask pattern or a reference to a predefined alias.\n         * @param opts Mask options.\n         */\n        new (maskOrAlias: string, opts?: Options): Instance;",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "maskOrAlias",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 698,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 698,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 698,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 704,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param opts Mask options.\n         */\n        new (opts?: Options): Instance;",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 704,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 704,
                      "source": " Instance"
                    }
                  }
                ],
                "members": [
                  {
                    "doc": "Extends the default inputmask options.",
                    "isMethod": true,
                    "_": 709,
                    "source": "\n\n        /**\n         * Extends the default inputmask options.\n         */\n        extendDefaults(opts: Options): void;",
                    "name": "extendDefaults",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 709,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 709,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Extends the set of available definitions.",
                    "isMethod": true,
                    "_": 713,
                    "source": "\n        /**\n         * Extends the set of available definitions.\n         */\n        extendDefinitions(definitions: { [key: string]: Definition }): void;",
                    "name": "extendDefinitions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "definitions",
                        "type": {
                          "ref": "IInline7",
                          "targs": [],
                          "isNullable": false,
                          "_": 713,
                          "source": " { [key: string]: Definition }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 713,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Extends the set of available mask aliases.",
                    "isMethod": true,
                    "_": 717,
                    "source": "\n        /**\n         * Extends the set of available mask aliases.\n         */\n        extendAliases(aliases: { [key: string]: Options }): void;",
                    "name": "extendAliases",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "aliases",
                        "type": {
                          "ref": "IInline8",
                          "targs": [],
                          "isNullable": false,
                          "_": 717,
                          "source": " { [key: string]: Options }"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 717,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Instead of masking an input element it is also possible to use the inputmask for formatting given values.\n Think of formatting values to show in jqGrid or on other elements then inputs.\n\n @param value Value to format.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 725,
                    "source": "\n        /**\n         * Instead of masking an input element it is also possible to use the inputmask for formatting given values.\n         * Think of formatting values to show in jqGrid or on other elements then inputs.\n         *\n         * @param value Value to format.\n         * @param opts Mask options.\n         */\n        format(value: string, opts: Options): string;",
                    "name": "format",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 725,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 725,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 725,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Validate a given value against the mask.\n\n @param value Value to validate.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 732,
                    "source": "\n        /**\n         * Validate a given value against the mask.\n         *\n         * @param value Value to validate.\n         * @param opts Mask options.\n         */\n        isValid(value: string, opts: Options): boolean;",
                    "name": "isValid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 732,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 732,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 732,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Remove the inputmask.",
                    "isMethod": true,
                    "_": 736,
                    "source": "\n        /**\n         * Remove the inputmask.\n         */\n        remove(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>): void;",
                    "name": "remove",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 736,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 736,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 736,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 736,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 736,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 736,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will\n trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when\n cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first\n event (mouseenter, focus, ...) the inputmask can detect if it where cloned and can reactivate the masking.\n However when setting the value with jQuery.val there is none of the events triggered in that case. The\n setvalue functionality does this for you.",
                    "isMethod": true,
                    "_": 745,
                    "source": "\n        /**\n         * The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will\n         * trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when\n         * cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first\n         * event (mouseenter, focus, ...) the inputmask can detect if it where cloned and can reactivate the masking.\n         * However when setting the value with jQuery.val there is none of the events triggered in that case. The\n         * setvalue functionality does this for you.\n         */\n        setValue(selectorOrElement: string | HTMLElement | ArrayLike<HTMLElement>, value: string): void;",
                    "name": "setValue",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "selectorOrElement",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 745,
                              "source": " string"
                            },
                            {
                              "ref": "HTMLElement",
                              "targs": [],
                              "isNullable": false,
                              "_": 745,
                              "source": " HTMLElement"
                            },
                            {
                              "ref": "ArrayLike",
                              "targs": [
                                {
                                  "ref": "HTMLElement",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 745,
                                  "source": "HTMLElement"
                                }
                              ],
                              "isNullable": false,
                              "_": 745,
                              "source": " ArrayLike<HTMLElement>"
                            }
                          ],
                          "isNullable": false,
                          "_": 745,
                          "source": " string | HTMLElement | ArrayLike<HTMLElement>"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 745,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 745,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Unmask a given value against the mask.\n\n @param value Value to be unmasked.\n @param opts Mask options.",
                    "isMethod": true,
                    "_": 752,
                    "source": "\n        /**\n         * Unmask a given value against the mask.\n         *\n         * @param value Value to be unmasked.\n         * @param opts Mask options.\n         */\n        unmask(value: string, opts: Options): string;",
                    "name": "unmask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 752,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 752,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 752,
                      "source": " string"
                    }
                  }
                ],
                "calls": [
                  {
                    "params": [
                      {
                        "name": "maskOrAlias",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 684,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 684,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 684,
                      "source": " Instance"
                    },
                    "generics": [],
                    "doc": "",
                    "_": 684,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param maskOrAlias A mask pattern or a reference to a predefined alias.\n         * @param opts Mask options.\n         */\n        (maskOrAlias: string, opts?: Options): Instance;"
                  },
                  {
                    "params": [
                      {
                        "name": "opts",
                        "type": {
                          "ref": "Options",
                          "targs": [],
                          "isNullable": false,
                          "_": 690,
                          "source": " Options"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 690,
                      "source": " Instance"
                    },
                    "generics": [],
                    "doc": "",
                    "_": 690,
                    "source": "\n        /**\n         * Creates a new Inputmask instance.\n         *\n         * @param opts Mask options.\n         */\n        (opts?: Options): Instance;"
                  }
                ],
                "isClass": false
              }
            ],
            "typedefs": [
              {
                "name": "Range",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "IInline0",
                      "targs": [],
                      "isNullable": false,
                      "_": 9,
                      "source": " { start: string; end: string }"
                    },
                    {
                      "tuple": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 9,
                          "source": "string"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 9,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 9,
                      "source": " [string, string]"
                    }
                  ],
                  "isNullable": false,
                  "_": 9,
                  "source": " { start: string; end: string } | [string, string]",
                  "parent": "Range"
                },
                "doc": "",
                "_": 9,
                "source": "\n    type Range = { start: string; end: string } | [string, string];"
              },
              {
                "name": "PositionCaretOnClick",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "'none'",
                      "isNullable": false,
                      "_": 11,
                      "source": " 'none'"
                    },
                    {
                      "core": "'lvp'",
                      "isNullable": false,
                      "_": 11,
                      "source": " 'lvp'"
                    },
                    {
                      "core": "'radixFocus'",
                      "isNullable": false,
                      "_": 11,
                      "source": " 'radixFocus'"
                    },
                    {
                      "core": "'select'",
                      "isNullable": false,
                      "_": 11,
                      "source": " 'select'"
                    },
                    {
                      "core": "'ignore'",
                      "isNullable": false,
                      "_": 11,
                      "source": " 'ignore'"
                    }
                  ],
                  "isNullable": false,
                  "_": 11,
                  "source": " 'none' | 'lvp' | 'radixFocus' | 'select' | 'ignore'",
                  "parent": "PositionCaretOnClick"
                },
                "doc": "",
                "_": 11,
                "source": "\n\n    type PositionCaretOnClick = 'none' | 'lvp' | 'radixFocus' | 'select' | 'ignore';"
              },
              {
                "name": "InputMode",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "'verbatim'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'verbatim'"
                    },
                    {
                      "core": "'none'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'none'"
                    },
                    {
                      "core": "'text'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'text'"
                    },
                    {
                      "core": "'decimal'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'decimal'"
                    },
                    {
                      "core": "'numeric'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'numeric'"
                    },
                    {
                      "core": "'tel'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'tel'"
                    },
                    {
                      "core": "'search'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'search'"
                    },
                    {
                      "core": "'email'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'email'"
                    },
                    {
                      "core": "'url'",
                      "isNullable": false,
                      "_": 13,
                      "source": " 'url'"
                    }
                  ],
                  "isNullable": false,
                  "_": 13,
                  "source": " 'verbatim' | 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'",
                  "parent": "InputMode"
                },
                "doc": "",
                "_": 13,
                "source": "\n\n    type InputMode = 'verbatim' | 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';"
              },
              {
                "name": "Casing",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "'upper'",
                      "isNullable": false,
                      "_": 15,
                      "source": " 'upper'"
                    },
                    {
                      "core": "'lower'",
                      "isNullable": false,
                      "_": 15,
                      "source": " 'lower'"
                    },
                    {
                      "core": "'title'",
                      "isNullable": false,
                      "_": 15,
                      "source": " 'title'"
                    }
                  ],
                  "isNullable": false,
                  "_": 15,
                  "source": " 'upper' | 'lower' | 'title'",
                  "parent": "Casing"
                },
                "doc": "",
                "_": 15,
                "source": "\n\n    type Casing = 'upper' | 'lower' | 'title';"
              },
              {
                "name": "DefinitionValidator",
                "generics": [],
                "type": {
                  "ctor": false,
                  "generics": [],
                  "returns": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 24,
                        "source": " boolean"
                      },
                      {
                        "ref": "CommandObject",
                        "targs": [],
                        "isNullable": false,
                        "_": 24,
                        "source": " CommandObject"
                      }
                    ],
                    "isNullable": false,
                    "_": 24,
                    "source": " boolean | CommandObject"
                  },
                  "params": [
                    {
                      "name": "chrs",
                      "type": {
                        "core": "string",
                        "isNullable": false,
                        "_": 19,
                        "source": " string"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "maskset",
                      "type": {
                        "core": "any",
                        "isNullable": false,
                        "_": 20,
                        "source": " any"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "pos",
                      "type": {
                        "core": "number",
                        "isNullable": false,
                        "_": 21,
                        "source": " number"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "strict",
                      "type": {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 22,
                        "source": " boolean"
                      },
                      "varargs": false,
                      "isNullable": false
                    },
                    {
                      "name": "opts",
                      "type": {
                        "ref": "Options",
                        "targs": [],
                        "isNullable": false,
                        "_": 23,
                        "source": " Options"
                      },
                      "varargs": false,
                      "isNullable": false
                    }
                  ],
                  "isNullable": false,
                  "_": 18,
                  "source": " (\n        chrs: string,\n        maskset: any,\n        pos: number,\n        strict: boolean,\n        opts: Options,\n    ) => boolean | CommandObject",
                  "parent": "DefinitionValidator"
                },
                "doc": "",
                "_": 18,
                "source": "\n\n    // `maskset` typed as `any`, since its content is not described in the documentation\n    type DefinitionValidator = (\n        chrs: string,\n        maskset: any,\n        pos: number,\n        strict: boolean,\n        opts: Options,\n    ) => boolean | CommandObject;"
              }
            ],
            "modules": [],
            "funcs": [],
            "vars": [],
            "enums": []
          }
        },
        {
          "_": 757,
          "namespace": "Inputmask_",
          "from": "submodule ",
          "items": {
            "structs": [],
            "typedefs": [],
            "modules": [],
            "funcs": [],
            "vars": [],
            "enums": []
          }
        }
      ],
      "funcs": [],
      "vars": [
        {
          "_": 852,
          "name": "Inputmask",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Inputmask.Static",
            "targs": [],
            "isNullable": false,
            "_": 852,
            "source": " Inputmask.Static"
          },
          "source": " Inputmask: Inputmask.Static"
        }
      ],
      "enums": []
    },
    "name": "index.d.ts"
  }
]