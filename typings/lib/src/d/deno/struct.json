[
  {
    "_": -1,
    "namespace": "",
    "from": "mainLoop /Users/dazzlemon/github/typings/typings/work/deno/download/0lib.deno.d.ts",
    "items": {
      "structs": [
        {
          "_": 13,
          "name": "ImportMeta",
          "generics": [],
          "doc": "The type of `import.meta`.\r\n\r\nIf you need to declare that a given property exists on `import.meta`,\r\nthis type may be augmented via interface merging.\nDeno provides extra properties on `import.meta`. These are included here\nto ensure that these are still available when using the Deno namespace in\nconjunction with other type libs, like `dom`.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "A string representation of the fully qualified module URL. When the\n module is loaded locally, the value will be a file URL (e.g.\n `file:///path/module.ts`).\n\n You can also parse the string as a URL to determine more information about\n how the current module was loaded. For example to determine if a module was\n local or not:\n\n ```ts\n const url = new URL(import.meta.url);\n if (url.protocol === \"file:\") {\n   console.log(\"this module was loaded locally\");\n }\n ```",
              "isMethod": false,
              "_": 29,
              "source": "\n  /** A string representation of the fully qualified module URL. When the\n   * module is loaded locally, the value will be a file URL (e.g.\n   * `file:///path/module.ts`).\n   *\n   * You can also parse the string as a URL to determine more information about\n   * how the current module was loaded. For example to determine if a module was\n   * local or not:\n   *\n   * ```ts\n   * const url = new URL(import.meta.url);\n   * if (url.protocol === \"file:\") {\n   *   console.log(\"this module was loaded locally\");\n   * }\n   * ```\n   */\n  url: string;",
              "name": "url",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 29,
                "source": " string"
              }
            },
            {
              "doc": "A flag that indicates if the current module is the main module that was\n called when starting the program under Deno.\n\n ```ts\n if (import.meta.main) {\n   // this was loaded as the main module, maybe do some bootstrapping\n }\n ```",
              "isMethod": false,
              "_": 40,
              "source": "\n\n  /** A flag that indicates if the current module is the main module that was\n   * called when starting the program under Deno.\n   *\n   * ```ts\n   * if (import.meta.main) {\n   *   // this was loaded as the main module, maybe do some bootstrapping\n   * }\n   * ```\n   */\n  main: boolean;",
              "name": "main",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 40,
                "source": " boolean"
              }
            },
            {
              "doc": "A function that returns resolved specifier as if it would be imported\n using `import(specifier)`.\n\n ```ts\n console.log(import.meta.resolve(\"./foo.js\"));\n // file:///dev/foo.js\n ```",
              "isMethod": true,
              "_": 50,
              "source": "\n\n  /** A function that returns resolved specifier as if it would be imported\n   * using `import(specifier)`.\n   *\n   * ```ts\n   * console.log(import.meta.resolve(\"./foo.js\"));\n   * // file:///dev/foo.js\n   * ```\n   */\n  resolve(specifier: string): string;",
              "name": "resolve",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "specifier",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 50,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 50,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 62,
          "name": "Performance",
          "generics": [],
          "doc": "Deno supports [User Timing Level 3](https://w3c.github.io/user-timing)\nwhich is not widely supported yet in other runtimes.\n\nCheck out the\n[Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\ndocumentation on MDN for further information about how to use the API.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Stores a timestamp with the associated name (a \"mark\").",
              "isMethod": true,
              "_": 64,
              "source": "\n  /** Stores a timestamp with the associated name (a \"mark\"). */\n  mark(markName: string, options?: PerformanceMarkOptions): PerformanceMark;",
              "name": "mark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "markName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 64,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PerformanceMarkOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 64,
                    "source": " PerformanceMarkOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceMark",
                "targs": [],
                "isNullable": false,
                "_": 64,
                "source": " PerformanceMark"
              }
            },
            {
              "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\n associated name (a \"measure\").",
              "isMethod": true,
              "_": 68,
              "source": "\n\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    options?: PerformanceMeasureOptions,\n  ): PerformanceMeasure;",
              "name": "measure",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "measureName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 69,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PerformanceMeasureOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 70,
                    "source": " PerformanceMeasureOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceMeasure",
                "targs": [],
                "isNullable": false,
                "_": 71,
                "source": " PerformanceMeasure"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 82,
          "name": "PerformanceMarkOptions",
          "generics": [],
          "doc": "Options which are used in conjunction with `performance.mark`. Check out the\nMDN\n[`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark#markoptions)\ndocumentation for more details.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Metadata to be included in the mark.",
              "isMethod": false,
              "_": 85,
              "source": "\n  /** Metadata to be included in the mark. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 85,
                "source": " any"
              }
            },
            {
              "doc": "Timestamp to be used as the mark time.",
              "isMethod": false,
              "_": 88,
              "source": "\n\n  /** Timestamp to be used as the mark time. */\n  startTime?: number;",
              "name": "startTime",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 88,
                "source": " number"
              }
            },
            {
              "doc": "Metadata to be included in the mark.",
              "isMethod": false,
              "_": 9050,
              "source": "\n  /** Metadata to be included in the mark. */\n  detail?: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9050,
                "source": " any"
              }
            },
            {
              "doc": "Timestamp to be used as the mark time.",
              "isMethod": false,
              "_": 9053,
              "source": "\n\n  /** Timestamp to be used as the mark time. */\n  startTime?: number;",
              "name": "startTime",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9053,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 99,
          "name": "PerformanceMeasureOptions",
          "generics": [],
          "doc": "Options which are used in conjunction with `performance.measure`. Check out the\nMDN\n[`performance.mark()`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure#measureoptions)\ndocumentation for more details.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Metadata to be included in the measure.",
              "isMethod": false,
              "_": 102,
              "source": "\n  /** Metadata to be included in the measure. */\n  // deno-lint-ignore no-explicit-any\n  detail?: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 102,
                "source": " any"
              }
            },
            {
              "doc": "Timestamp to be used as the start time or string to be used as start\n mark.",
              "isMethod": false,
              "_": 106,
              "source": "\n\n  /** Timestamp to be used as the start time or string to be used as start\n   * mark. */\n  start?: string | number;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 106,
                    "source": " string"
                  },
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 106,
                    "source": " number"
                  }
                ],
                "isNullable": false,
                "_": 106,
                "source": " string | number"
              }
            },
            {
              "doc": "Duration between the start and end times.",
              "isMethod": false,
              "_": 109,
              "source": "\n\n  /** Duration between the start and end times. */\n  duration?: number;",
              "name": "duration",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 109,
                "source": " number"
              }
            },
            {
              "doc": "Timestamp to be used as the end time or string to be used as end mark.",
              "isMethod": false,
              "_": 112,
              "source": "\n\n  /** Timestamp to be used as the end time or string to be used as end mark. */\n  end?: string | number;",
              "name": "end",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 112,
                    "source": " string"
                  },
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 112,
                    "source": " number"
                  }
                ],
                "isNullable": false,
                "_": 112,
                "source": " string | number"
              }
            },
            {
              "doc": "Metadata to be included in the measure.",
              "isMethod": false,
              "_": 9058,
              "source": "\n  /** Metadata to be included in the measure. */\n  detail?: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9058,
                "source": " any"
              }
            },
            {
              "doc": "Timestamp to be used as the start time or string to be used as start\n mark.",
              "isMethod": false,
              "_": 9062,
              "source": "\n\n  /** Timestamp to be used as the start time or string to be used as start\n   * mark. */\n  start?: string | number;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 9062,
                    "source": " string"
                  },
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 9062,
                    "source": " number"
                  }
                ],
                "isNullable": false,
                "_": 9062,
                "source": " string | number"
              }
            },
            {
              "doc": "Duration between the start and end times.",
              "isMethod": false,
              "_": 9065,
              "source": "\n\n  /** Duration between the start and end times. */\n  duration?: number;",
              "name": "duration",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9065,
                "source": " number"
              }
            },
            {
              "doc": "Timestamp to be used as the end time or string to be used as end mark.",
              "isMethod": false,
              "_": 9068,
              "source": "\n\n  /** Timestamp to be used as the end time or string to be used as end mark. */\n  end?: string | number;",
              "name": "end",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 9068,
                    "source": " string"
                  },
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 9068,
                    "source": " number"
                  }
                ],
                "isNullable": false,
                "_": 9068,
                "source": " string | number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 5613,
          "name": "Console",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5614,
              "source": "\n  assert(condition?: boolean, ...data: any[]): void;",
              "name": "assert",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "condition",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 5614,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5614,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5614,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5614,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5615,
              "source": "\n  clear(): void;",
              "name": "clear",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5615,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5616,
              "source": "\n  count(label?: string): void;",
              "name": "count",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5616,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5616,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5617,
              "source": "\n  countReset(label?: string): void;",
              "name": "countReset",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5617,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5617,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5618,
              "source": "\n  debug(...data: any[]): void;",
              "name": "debug",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5618,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5618,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5618,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5619,
              "source": "\n  dir(item?: any, options?: any): void;",
              "name": "dir",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "item",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 5619,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "options",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 5619,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5619,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5620,
              "source": "\n  dirxml(...data: any[]): void;",
              "name": "dirxml",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5620,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5620,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5620,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5621,
              "source": "\n  error(...data: any[]): void;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5621,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5621,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5621,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5622,
              "source": "\n  group(...data: any[]): void;",
              "name": "group",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5622,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5622,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5622,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5623,
              "source": "\n  groupCollapsed(...data: any[]): void;",
              "name": "groupCollapsed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5623,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5623,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5623,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5624,
              "source": "\n  groupEnd(): void;",
              "name": "groupEnd",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5624,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5625,
              "source": "\n  info(...data: any[]): void;",
              "name": "info",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5625,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5625,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5625,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5626,
              "source": "\n  log(...data: any[]): void;",
              "name": "log",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5626,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5626,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5626,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5627,
              "source": "\n  table(tabularData?: any, properties?: string[]): void;",
              "name": "table",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "tabularData",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 5627,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "properties",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5627,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 5627,
                    "source": " string[]"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5627,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5628,
              "source": "\n  time(label?: string): void;",
              "name": "time",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5628,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5628,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5629,
              "source": "\n  timeEnd(label?: string): void;",
              "name": "timeEnd",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5629,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5629,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5630,
              "source": "\n  timeLog(label?: string, ...data: any[]): void;",
              "name": "timeLog",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5630,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5630,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5630,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5630,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5631,
              "source": "\n  trace(...data: any[]): void;",
              "name": "trace",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5631,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5631,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5631,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5632,
              "source": "\n  warn(...data: any[]): void;",
              "name": "warn",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 5632,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 5632,
                    "source": " any[]"
                  },
                  "varargs": true,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5632,
                "source": " void"
              }
            },
            {
              "doc": "This method is a noop, unless used in inspector",
              "isMethod": true,
              "_": 5635,
              "source": "\n\n  /** This method is a noop, unless used in inspector */\n  timeStamp(label?: string): void;",
              "name": "timeStamp",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5635,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5635,
                "source": " void"
              }
            },
            {
              "doc": "This method is a noop, unless used in inspector",
              "isMethod": true,
              "_": 5638,
              "source": "\n\n  /** This method is a noop, unless used in inspector */\n  profile(label?: string): void;",
              "name": "profile",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5638,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5638,
                "source": " void"
              }
            },
            {
              "doc": "This method is a noop, unless used in inspector",
              "isMethod": true,
              "_": 5641,
              "source": "\n\n  /** This method is a noop, unless used in inspector */\n  profileEnd(label?: string): void;",
              "name": "profileEnd",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5641,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5641,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 5652,
          "name": "URLSearchParams",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5653,
              "source": "\n  constructor(\n    init?: string[][] | Record<string, string> | string | URLSearchParams,\n  );",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "init",
                  "type": {
                    "union": [
                      {
                        "core": "array",
                        "targs": [
                          {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 5654,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 5654,
                            "source": " string[]"
                          }
                        ],
                        "isNullable": false,
                        "_": 5654,
                        "source": " string[][]"
                      },
                      {
                        "ref": "Record",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 5654,
                            "source": "string"
                          },
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 5654,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 5654,
                        "source": " Record<string, string>"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5654,
                        "source": " string"
                      },
                      {
                        "ref": "URLSearchParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 5654,
                        "source": " URLSearchParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 5654,
                    "source": " string[][] | Record<string, string> | string | URLSearchParams"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5656,
              "source": "\n  static toString(): string;",
              "name": "toString",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5656,
                "source": " string"
              }
            },
            {
              "doc": "Appends a specified key/value pair as a new search parameter.\n\n ```ts\n let searchParams = new URLSearchParams();\n searchParams.append('name', 'first');\n searchParams.append('name', 'second');\n ```",
              "isMethod": true,
              "_": 5666,
              "source": "\n\n  /** Appends a specified key/value pair as a new search parameter.\n   *\n   * ```ts\n   * let searchParams = new URLSearchParams();\n   * searchParams.append('name', 'first');\n   * searchParams.append('name', 'second');\n   * ```\n   */\n  append(name: string, value: string): void;",
              "name": "append",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5666,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5666,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5666,
                "source": " void"
              }
            },
            {
              "doc": "Deletes the given search parameter and its associated value,\n from the list of all search parameters.\n\n ```ts\n let searchParams = new URLSearchParams([['name', 'value']]);\n searchParams.delete('name');\n ```",
              "isMethod": true,
              "_": 5676,
              "source": "\n\n  /** Deletes the given search parameter and its associated value,\n   * from the list of all search parameters.\n   *\n   * ```ts\n   * let searchParams = new URLSearchParams([['name', 'value']]);\n   * searchParams.delete('name');\n   * ```\n   */\n  delete(name: string): void;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5676,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5676,
                "source": " void"
              }
            },
            {
              "doc": "Returns all the values associated with a given search parameter\n as an array.\n\n ```ts\n searchParams.getAll('name');\n ```",
              "isMethod": true,
              "_": 5685,
              "source": "\n\n  /** Returns all the values associated with a given search parameter\n   * as an array.\n   *\n   * ```ts\n   * searchParams.getAll('name');\n   * ```\n   */\n  getAll(name: string): string[];",
              "name": "getAll",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5685,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "array",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5685,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 5685,
                "source": " string[]"
              }
            },
            {
              "doc": "Returns the first value associated to the given search parameter.\n\n ```ts\n searchParams.get('name');\n ```",
              "isMethod": true,
              "_": 5693,
              "source": "\n\n  /** Returns the first value associated to the given search parameter.\n   *\n   * ```ts\n   * searchParams.get('name');\n   * ```\n   */\n  get(name: string): string | null;",
              "name": "get",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5693,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5693,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 5693,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 5693,
                "source": " string | null"
              }
            },
            {
              "doc": "Returns a Boolean that indicates whether a parameter with the\n specified name exists.\n\n ```ts\n searchParams.has('name');\n ```",
              "isMethod": true,
              "_": 5702,
              "source": "\n\n  /** Returns a Boolean that indicates whether a parameter with the\n   * specified name exists.\n   *\n   * ```ts\n   * searchParams.has('name');\n   * ```\n   */\n  has(name: string): boolean;",
              "name": "has",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5702,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 5702,
                "source": " boolean"
              }
            },
            {
              "doc": "Sets the value associated with a given search parameter to the\n given value. If there were several matching values, this method\n deletes the others. If the search parameter doesn't exist, this\n method creates it.\n\n ```ts\n searchParams.set('name', 'value');\n ```",
              "isMethod": true,
              "_": 5713,
              "source": "\n\n  /** Sets the value associated with a given search parameter to the\n   * given value. If there were several matching values, this method\n   * deletes the others. If the search parameter doesn't exist, this\n   * method creates it.\n   *\n   * ```ts\n   * searchParams.set('name', 'value');\n   * ```\n   */\n  set(name: string, value: string): void;",
              "name": "set",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5713,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5713,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5713,
                "source": " void"
              }
            },
            {
              "doc": "Sort all key/value pairs contained in this object in place and\n return undefined. The sort order is according to Unicode code\n points of the keys.\n\n ```ts\n searchParams.sort();\n ```",
              "isMethod": true,
              "_": 5723,
              "source": "\n\n  /** Sort all key/value pairs contained in this object in place and\n   * return undefined. The sort order is according to Unicode code\n   * points of the keys.\n   *\n   * ```ts\n   * searchParams.sort();\n   * ```\n   */\n  sort(): void;",
              "name": "sort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5723,
                "source": " void"
              }
            },
            {
              "doc": "Calls a function for each element contained in this object in\n place and return undefined. Optionally accepts an object to use\n as this when executing callback as second argument.\n\n ```ts\n const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n params.forEach((value, key, parent) => {\n   console.log(value, key, parent);\n });\n ```",
              "isMethod": true,
              "_": 5736,
              "source": "\n\n  /** Calls a function for each element contained in this object in\n   * place and return undefined. Optionally accepts an object to use\n   * as this when executing callback as second argument.\n   *\n   * ```ts\n   * const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n   * params.forEach((value, key, parent) => {\n   *   console.log(value, key, parent);\n   * });\n   * ```\n   */\n  forEach(\n    callbackfn: (value: string, key: string, parent: this) => void,\n    thisArg?: any,\n  ): void;",
              "name": "forEach",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "callbackfn",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 5737,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5737,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 5737,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "core": "this",
                          "isNullable": false,
                          "_": 5737,
                          "source": " this"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 5737,
                    "source": " (value: string, key: string, parent: this) => void"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "thisArg",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 5738,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5739,
                "source": " void"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all keys contained\n in this object.\n\n ```ts\n const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n for (const key of params.keys()) {\n   console.log(key);\n }\n ```",
              "isMethod": true,
              "_": 5751,
              "source": "\n\n  /** Returns an iterator allowing to go through all keys contained\n   * in this object.\n   *\n   * ```ts\n   * const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n   * for (const key of params.keys()) {\n   *   console.log(key);\n   * }\n   * ```\n   */\n  keys(): IterableIterator<string>;",
              "name": "keys",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5751,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 5751,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all values contained\n in this object.\n\n ```ts\n const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n for (const value of params.values()) {\n   console.log(value);\n }\n ```",
              "isMethod": true,
              "_": 5763,
              "source": "\n\n  /** Returns an iterator allowing to go through all values contained\n   * in this object.\n   *\n   * ```ts\n   * const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n   * for (const value of params.values()) {\n   *   console.log(value);\n   * }\n   * ```\n   */\n  values(): IterableIterator<string>;",
              "name": "values",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5763,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 5763,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all key/value\n pairs contained in this object.\n\n ```ts\n const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n for (const [key, value] of params.entries()) {\n   console.log(key, value);\n }\n ```",
              "isMethod": true,
              "_": 5775,
              "source": "\n\n  /** Returns an iterator allowing to go through all key/value\n   * pairs contained in this object.\n   *\n   * ```ts\n   * const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n   * for (const [key, value] of params.entries()) {\n   *   console.log(key, value);\n   * }\n   * ```\n   */\n  entries(): IterableIterator<[string, string]>;",
              "name": "entries",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5775,
                        "source": "string"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5775,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 5775,
                    "source": "[string, string]"
                  }
                ],
                "isNullable": false,
                "_": 5775,
                "source": " IterableIterator<[string, string]>"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all key/value\n pairs contained in this object.\n\n ```ts\n const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n for (const [key, value] of params) {\n   console.log(key, value);\n }\n ```",
              "isMethod": true,
              "_": 5787,
              "source": "\n\n  /** Returns an iterator allowing to go through all key/value\n   * pairs contained in this object.\n   *\n   * ```ts\n   * const params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\n   * for (const [key, value] of params) {\n   *   console.log(key, value);\n   * }\n   * ```\n   */\n  [Symbol.iterator](): IterableIterator<[string, string]>;",
              "name": "[Symbol.iterator]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5787,
                        "source": "string"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5787,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 5787,
                    "source": "[string, string]"
                  }
                ],
                "isNullable": false,
                "_": 5787,
                "source": " IterableIterator<[string, string]>"
              }
            },
            {
              "doc": "Returns a query string suitable for use in a URL.\n\n ```ts\n searchParams.toString();\n ```",
              "isMethod": true,
              "_": 5795,
              "source": "\n\n  /** Returns a query string suitable for use in a URL.\n   *\n   * ```ts\n   * searchParams.toString();\n   * ```\n   */\n  toString(): string;",
              "name": "toString",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5795,
                "source": " string"
              }
            },
            {
              "doc": "Contains the number of search parameters\n\n ```ts\n searchParams.size\n ```",
              "isMethod": false,
              "_": 5803,
              "source": "\n\n  /** Contains the number of search parameters\n   *\n   * ```ts\n   * searchParams.size\n   * ```\n   */\n  size: number;",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 5803,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 5811,
          "name": "URL",
          "generics": [],
          "doc": "The URL interface represents an object providing static methods used for\ncreating object URLs.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5812,
              "source": "\n  constructor(url: string | URL, base?: string | URL);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5812,
                        "source": " string"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 5812,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 5812,
                    "source": " string | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "base",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5812,
                        "source": " string"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 5812,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 5812,
                    "source": " string | URL"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5813,
              "source": "\n  static createObjectURL(blob: Blob): string;",
              "name": "createObjectURL",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blob",
                  "type": {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 5813,
                    "source": " Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5813,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5814,
              "source": "\n  static revokeObjectURL(url: string): void;",
              "name": "revokeObjectURL",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5814,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 5814,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5816,
              "source": "\n\n  hash: string;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5816,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5817,
              "source": "\n  host: string;",
              "name": "host",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5817,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5818,
              "source": "\n  hostname: string;",
              "name": "hostname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5818,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5819,
              "source": "\n  href: string;",
              "name": "href",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5819,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5820,
              "source": "\n  toString(): string;",
              "name": "toString",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5820,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5821,
              "source": "\n  readonly origin: string;",
              "name": "origin",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5821,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5822,
              "source": "\n  password: string;",
              "name": "password",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5822,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5823,
              "source": "\n  pathname: string;",
              "name": "pathname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5823,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5824,
              "source": "\n  port: string;",
              "name": "port",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5824,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5825,
              "source": "\n  protocol: string;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5825,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5826,
              "source": "\n  search: string;",
              "name": "search",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5826,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5827,
              "source": "\n  readonly searchParams: URLSearchParams;",
              "name": "searchParams",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "URLSearchParams",
                "targs": [],
                "isNullable": false,
                "_": 5827,
                "source": " URLSearchParams"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5828,
              "source": "\n  username: string;",
              "name": "username",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5828,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 5829,
              "source": "\n  toJSON(): string;",
              "name": "toJSON",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5829,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 5833,
          "name": "URLPatternInit",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 5834,
              "source": "\n  protocol?: string;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5834,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5835,
              "source": "\n  username?: string;",
              "name": "username",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5835,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5836,
              "source": "\n  password?: string;",
              "name": "password",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5836,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5837,
              "source": "\n  hostname?: string;",
              "name": "hostname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5837,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5838,
              "source": "\n  port?: string;",
              "name": "port",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5838,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5839,
              "source": "\n  pathname?: string;",
              "name": "pathname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5839,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5840,
              "source": "\n  search?: string;",
              "name": "search",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5840,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5841,
              "source": "\n  hash?: string;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5841,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5842,
              "source": "\n  baseURL?: string;",
              "name": "baseURL",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5842,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 5849,
          "name": "URLPatternComponentResult",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 5850,
              "source": "\n  input: string;",
              "name": "input",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5850,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5851,
              "source": "\n  groups: Record<string, string>;",
              "name": "groups",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Record",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5851,
                    "source": "string"
                  },
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 5851,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 5851,
                "source": " Record<string, string>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 5858,
          "name": "URLPatternResult",
          "generics": [],
          "doc": "`URLPatternResult` is the object returned from `URLPattern.exec`.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "The inputs provided when matching.",
              "isMethod": false,
              "_": 5860,
              "source": "\n  /** The inputs provided when matching. */\n  inputs: [URLPatternInit] | [URLPatternInit, string];",
              "name": "inputs",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "tuple": [
                      {
                        "ref": "URLPatternInit",
                        "targs": [],
                        "isNullable": false,
                        "_": 5860,
                        "source": "URLPatternInit"
                      }
                    ],
                    "isNullable": false,
                    "_": 5860,
                    "source": " [URLPatternInit]"
                  },
                  {
                    "tuple": [
                      {
                        "ref": "URLPatternInit",
                        "targs": [],
                        "isNullable": false,
                        "_": 5860,
                        "source": "URLPatternInit"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 5860,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 5860,
                    "source": " [URLPatternInit, string]"
                  }
                ],
                "isNullable": false,
                "_": 5860,
                "source": " [URLPatternInit] | [URLPatternInit, string]"
              }
            },
            {
              "doc": "The matched result for the `protocol` matcher.",
              "isMethod": false,
              "_": 5863,
              "source": "\n\n  /** The matched result for the `protocol` matcher. */\n  protocol: URLPatternComponentResult;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5863,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `username` matcher.",
              "isMethod": false,
              "_": 5865,
              "source": "\n  /** The matched result for the `username` matcher. */\n  username: URLPatternComponentResult;",
              "name": "username",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5865,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `password` matcher.",
              "isMethod": false,
              "_": 5867,
              "source": "\n  /** The matched result for the `password` matcher. */\n  password: URLPatternComponentResult;",
              "name": "password",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5867,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `hostname` matcher.",
              "isMethod": false,
              "_": 5869,
              "source": "\n  /** The matched result for the `hostname` matcher. */\n  hostname: URLPatternComponentResult;",
              "name": "hostname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5869,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `port` matcher.",
              "isMethod": false,
              "_": 5871,
              "source": "\n  /** The matched result for the `port` matcher. */\n  port: URLPatternComponentResult;",
              "name": "port",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5871,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `pathname` matcher.",
              "isMethod": false,
              "_": 5873,
              "source": "\n  /** The matched result for the `pathname` matcher. */\n  pathname: URLPatternComponentResult;",
              "name": "pathname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5873,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `search` matcher.",
              "isMethod": false,
              "_": 5875,
              "source": "\n  /** The matched result for the `search` matcher. */\n  search: URLPatternComponentResult;",
              "name": "search",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5875,
                "source": " URLPatternComponentResult"
              }
            },
            {
              "doc": "The matched result for the `hash` matcher.",
              "isMethod": false,
              "_": 5877,
              "source": "\n  /** The matched result for the `hash` matcher. */\n  hash: URLPatternComponentResult;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "URLPatternComponentResult",
                "targs": [],
                "isNullable": false,
                "_": 5877,
                "source": " URLPatternComponentResult"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 5910,
          "name": "URLPattern",
          "generics": [],
          "doc": "The URLPattern API provides a web platform primitive for matching URLs based\non a convenient pattern syntax.\n\nThe syntax is based on path-to-regexp. Wildcards, named capture groups,\nregular groups, and group modifiers are all supported.\n\n```ts\n// Specify the pattern as structured data.\nconst pattern = new URLPattern({ pathname: \"/users/:user\" });\nconst match = pattern.exec(\"https://blog.example.com/users/joe\");\nconsole.log(match.pathname.groups.user); // joe\n```\n\n```ts\n// Specify a fully qualified string pattern.\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"https://deno.land/books/123\")); // false\n```\n\n```ts\n// Specify a relative string pattern with a base URL.\nconst pattern = new URLPattern(\"/article/:id\", \"https://blog.example.com\");\nconsole.log(pattern.test(\"https://blog.example.com/article\")); // false\nconsole.log(pattern.test(\"https://blog.example.com/article/123\")); // true\n```",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5911,
              "source": "\n  constructor(input: URLPatternInput, baseURL?: string);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "ref": "URLPatternInput",
                    "targs": [],
                    "isNullable": false,
                    "_": 5911,
                    "source": " URLPatternInput"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "baseURL",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5911,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Test if the given input matches the stored pattern.\n\n The input can either be provided as an absolute URL string with an optional base,\n relative URL string with a required base, or as individual components\n in the form of an `URLPatternInit` object.\n\n ```ts\n const pattern = new URLPattern(\"https://example.com/books/:id\");\n\n // Test an absolute url string.\n console.log(pattern.test(\"https://example.com/books/123\")); // true\n\n // Test a relative url with a base.\n console.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n\n // Test an object of url components.\n console.log(pattern.test({ pathname: \"/books/123\" })); // true\n ```",
              "isMethod": true,
              "_": 5933,
              "source": "\n\n  /**\n   * Test if the given input matches the stored pattern.\n   *\n   * The input can either be provided as an absolute URL string with an optional base,\n   * relative URL string with a required base, or as individual components\n   * in the form of an `URLPatternInit` object.\n   *\n   * ```ts\n   * const pattern = new URLPattern(\"https://example.com/books/:id\");\n   *\n   * // Test an absolute url string.\n   * console.log(pattern.test(\"https://example.com/books/123\")); // true\n   *\n   * // Test a relative url with a base.\n   * console.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n   *\n   * // Test an object of url components.\n   * console.log(pattern.test({ pathname: \"/books/123\" })); // true\n   * ```\n   */\n  test(input: URLPatternInput, baseURL?: string): boolean;",
              "name": "test",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "ref": "URLPatternInput",
                    "targs": [],
                    "isNullable": false,
                    "_": 5933,
                    "source": " URLPatternInput"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "baseURL",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5933,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 5933,
                "source": " boolean"
              }
            },
            {
              "doc": "Match the given input against the stored pattern.\n\n The input can either be provided as an absolute URL string with an optional base,\n relative URL string with a required base, or as individual components\n in the form of an `URLPatternInit` object.\n\n ```ts\n const pattern = new URLPattern(\"https://example.com/books/:id\");\n\n // Match an absolute url string.\n let match = pattern.exec(\"https://example.com/books/123\");\n console.log(match.pathname.groups.id); // 123\n\n // Match a relative url with a base.\n match = pattern.exec(\"/books/123\", \"https://example.com\");\n console.log(match.pathname.groups.id); // 123\n\n // Match an object of url components.\n match = pattern.exec({ pathname: \"/books/123\" });\n console.log(match.pathname.groups.id); // 123\n ```",
              "isMethod": true,
              "_": 5958,
              "source": "\n\n  /**\n   * Match the given input against the stored pattern.\n   *\n   * The input can either be provided as an absolute URL string with an optional base,\n   * relative URL string with a required base, or as individual components\n   * in the form of an `URLPatternInit` object.\n   *\n   * ```ts\n   * const pattern = new URLPattern(\"https://example.com/books/:id\");\n   *\n   * // Match an absolute url string.\n   * let match = pattern.exec(\"https://example.com/books/123\");\n   * console.log(match.pathname.groups.id); // 123\n   *\n   * // Match a relative url with a base.\n   * match = pattern.exec(\"/books/123\", \"https://example.com\");\n   * console.log(match.pathname.groups.id); // 123\n   *\n   * // Match an object of url components.\n   * match = pattern.exec({ pathname: \"/books/123\" });\n   * console.log(match.pathname.groups.id); // 123\n   * ```\n   */\n  exec(input: URLPatternInput, baseURL?: string): URLPatternResult | null;",
              "name": "exec",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "ref": "URLPatternInput",
                    "targs": [],
                    "isNullable": false,
                    "_": 5958,
                    "source": " URLPatternInput"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "baseURL",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5958,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "union": [
                  {
                    "ref": "URLPatternResult",
                    "targs": [],
                    "isNullable": false,
                    "_": 5958,
                    "source": " URLPatternResult"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 5958,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 5958,
                "source": " URLPatternResult | null"
              }
            },
            {
              "doc": "The pattern string for the `protocol`.",
              "isMethod": false,
              "_": 5961,
              "source": "\n\n  /** The pattern string for the `protocol`. */\n  readonly protocol: string;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5961,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `username`.",
              "isMethod": false,
              "_": 5963,
              "source": "\n  /** The pattern string for the `username`. */\n  readonly username: string;",
              "name": "username",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5963,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `password`.",
              "isMethod": false,
              "_": 5965,
              "source": "\n  /** The pattern string for the `password`. */\n  readonly password: string;",
              "name": "password",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5965,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `hostname`.",
              "isMethod": false,
              "_": 5967,
              "source": "\n  /** The pattern string for the `hostname`. */\n  readonly hostname: string;",
              "name": "hostname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5967,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `port`.",
              "isMethod": false,
              "_": 5969,
              "source": "\n  /** The pattern string for the `port`. */\n  readonly port: string;",
              "name": "port",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5969,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `pathname`.",
              "isMethod": false,
              "_": 5971,
              "source": "\n  /** The pattern string for the `pathname`. */\n  readonly pathname: string;",
              "name": "pathname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5971,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `search`.",
              "isMethod": false,
              "_": 5973,
              "source": "\n  /** The pattern string for the `search`. */\n  readonly search: string;",
              "name": "search",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5973,
                "source": " string"
              }
            },
            {
              "doc": "The pattern string for the `hash`.",
              "isMethod": false,
              "_": 5975,
              "source": "\n  /** The pattern string for the `hash`. */\n  readonly hash: string;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5975,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 5986,
          "name": "DOMException",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Error",
                "targs": [],
                "isNullable": false,
                "_": 5986,
                "source": " Error"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 5987,
              "source": "\n  constructor(message?: string, name?: string);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5987,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 5987,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 5988,
              "source": "\n  readonly name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5988,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5989,
              "source": "\n  readonly message: string;",
              "name": "message",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 5989,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5990,
              "source": "\n  readonly code: number;",
              "name": "code",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 5990,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 5994,
          "name": "EventInit",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 5995,
              "source": "\n  bubbles?: boolean;",
              "name": "bubbles",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 5995,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5996,
              "source": "\n  cancelable?: boolean;",
              "name": "cancelable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 5996,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 5997,
              "source": "\n  composed?: boolean;",
              "name": "composed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 5997,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6004,
          "name": "Event",
          "generics": [],
          "doc": "An event which takes place in the DOM.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6005,
              "source": "\n  constructor(type: string, eventInitDict?: EventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6005,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "EventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 6005,
                    "source": " EventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Returns true or false depending on how event was initialized. True if\nevent goes through its target's ancestors in reverse tree order, and\nfalse otherwise.",
              "isMethod": false,
              "_": 6009,
              "source": "\n  /** Returns true or false depending on how event was initialized. True if\n   * event goes through its target's ancestors in reverse tree order, and\n   * false otherwise. */\n  readonly bubbles: boolean;",
              "name": "bubbles",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6009,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6010,
              "source": "\n  cancelBubble: boolean;",
              "name": "cancelBubble",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6010,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns true or false depending on how event was initialized. Its return\nvalue does not always carry meaning, but true can indicate that part of the\noperation during which event was dispatched, can be canceled by invoking\nthe preventDefault() method.",
              "isMethod": false,
              "_": 6015,
              "source": "\n  /** Returns true or false depending on how event was initialized. Its return\n   * value does not always carry meaning, but true can indicate that part of the\n   * operation during which event was dispatched, can be canceled by invoking\n   * the preventDefault() method. */\n  readonly cancelable: boolean;",
              "name": "cancelable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6015,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns true or false depending on how event was initialized. True if\nevent invokes listeners past a ShadowRoot node that is the root of its\ntarget, and false otherwise.",
              "isMethod": false,
              "_": 6019,
              "source": "\n  /** Returns true or false depending on how event was initialized. True if\n   * event invokes listeners past a ShadowRoot node that is the root of its\n   * target, and false otherwise. */\n  readonly composed: boolean;",
              "name": "composed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6019,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns the object whose event listener's callback is currently being\ninvoked.",
              "isMethod": false,
              "_": 6022,
              "source": "\n  /** Returns the object whose event listener's callback is currently being\n   * invoked. */\n  readonly currentTarget: EventTarget | null;",
              "name": "currentTarget",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "EventTarget",
                    "targs": [],
                    "isNullable": false,
                    "_": 6022,
                    "source": " EventTarget"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6022,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6022,
                "source": " EventTarget | null"
              }
            },
            {
              "doc": "Returns true if preventDefault() was invoked successfully to indicate\ncancellation, and false otherwise.",
              "isMethod": false,
              "_": 6025,
              "source": "\n  /** Returns true if preventDefault() was invoked successfully to indicate\n   * cancellation, and false otherwise. */\n  readonly defaultPrevented: boolean;",
              "name": "defaultPrevented",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6025,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns the event's phase, which is one of NONE, CAPTURING_PHASE,\nAT_TARGET, and BUBBLING_PHASE.",
              "isMethod": false,
              "_": 6028,
              "source": "\n  /** Returns the event's phase, which is one of NONE, CAPTURING_PHASE,\n   * AT_TARGET, and BUBBLING_PHASE. */\n  readonly eventPhase: number;",
              "name": "eventPhase",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6028,
                "source": " number"
              }
            },
            {
              "doc": "Returns true if event was dispatched by the user agent, and false\notherwise.",
              "isMethod": false,
              "_": 6031,
              "source": "\n  /** Returns true if event was dispatched by the user agent, and false\n   * otherwise. */\n  readonly isTrusted: boolean;",
              "name": "isTrusted",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6031,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns the object to which event is dispatched (its target).",
              "isMethod": false,
              "_": 6033,
              "source": "\n  /** Returns the object to which event is dispatched (its target). */\n  readonly target: EventTarget | null;",
              "name": "target",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "EventTarget",
                    "targs": [],
                    "isNullable": false,
                    "_": 6033,
                    "source": " EventTarget"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6033,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6033,
                "source": " EventTarget | null"
              }
            },
            {
              "doc": "Returns the event's timestamp as the number of milliseconds measured\nrelative to the time origin.",
              "isMethod": false,
              "_": 6036,
              "source": "\n  /** Returns the event's timestamp as the number of milliseconds measured\n   * relative to the time origin. */\n  readonly timeStamp: number;",
              "name": "timeStamp",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6036,
                "source": " number"
              }
            },
            {
              "doc": "Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".",
              "isMethod": false,
              "_": 6038,
              "source": "\n  /** Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\". */\n  readonly type: string;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6038,
                "source": " string"
              }
            },
            {
              "doc": "Returns the invocation target objects of event's path (objects on which\n listeners will be invoked), except for any nodes in shadow trees of which\n the shadow root's mode is \"closed\" that are not reachable from event's\n currentTarget.",
              "isMethod": true,
              "_": 6043,
              "source": "\n  /** Returns the invocation target objects of event's path (objects on which\n   * listeners will be invoked), except for any nodes in shadow trees of which\n   * the shadow root's mode is \"closed\" that are not reachable from event's\n   * currentTarget. */\n  composedPath(): EventTarget[];",
              "name": "composedPath",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "array",
                "targs": [
                  {
                    "ref": "EventTarget",
                    "targs": [],
                    "isNullable": false,
                    "_": 6043,
                    "source": " EventTarget"
                  }
                ],
                "isNullable": false,
                "_": 6043,
                "source": " EventTarget[]"
              }
            },
            {
              "doc": "If invoked when the cancelable attribute value is true, and while\n executing a listener for the event with passive set to false, signals to\n the operation that caused event to be dispatched that it needs to be\n canceled.",
              "isMethod": true,
              "_": 6048,
              "source": "\n  /** If invoked when the cancelable attribute value is true, and while\n   * executing a listener for the event with passive set to false, signals to\n   * the operation that caused event to be dispatched that it needs to be\n   * canceled. */\n  preventDefault(): void;",
              "name": "preventDefault",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6048,
                "source": " void"
              }
            },
            {
              "doc": "Invoking this method prevents event from reaching any registered event\n listeners after the current one finishes running and, when dispatched in a\n tree, also prevents event from reaching any other objects.",
              "isMethod": true,
              "_": 6052,
              "source": "\n  /** Invoking this method prevents event from reaching any registered event\n   * listeners after the current one finishes running and, when dispatched in a\n   * tree, also prevents event from reaching any other objects. */\n  stopImmediatePropagation(): void;",
              "name": "stopImmediatePropagation",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6052,
                "source": " void"
              }
            },
            {
              "doc": "When dispatched in a tree, invoking this method prevents event from\n reaching any objects other than the current object.",
              "isMethod": true,
              "_": 6055,
              "source": "\n  /** When dispatched in a tree, invoking this method prevents event from\n   * reaching any objects other than the current object. */\n  stopPropagation(): void;",
              "name": "stopPropagation",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6055,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6056,
              "source": "\n  readonly AT_TARGET: number;",
              "name": "AT_TARGET",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6056,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6057,
              "source": "\n  readonly BUBBLING_PHASE: number;",
              "name": "BUBBLING_PHASE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6057,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6058,
              "source": "\n  readonly CAPTURING_PHASE: number;",
              "name": "CAPTURING_PHASE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6058,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6059,
              "source": "\n  readonly NONE: number;",
              "name": "NONE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6059,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6060,
              "source": "\n  static readonly AT_TARGET: number;",
              "name": "AT_TARGET",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6060,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6061,
              "source": "\n  static readonly BUBBLING_PHASE: number;",
              "name": "BUBBLING_PHASE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6061,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6062,
              "source": "\n  static readonly CAPTURING_PHASE: number;",
              "name": "CAPTURING_PHASE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6062,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6063,
              "source": "\n  static readonly NONE: number;",
              "name": "NONE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6063,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6072,
          "name": "EventTarget",
          "generics": [],
          "doc": "EventTarget is a DOM interface implemented by objects that can receive events\nand may have listeners for them.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\n The callback argument sets the callback that will be invoked when the event\n is dispatched.\n\n The options argument sets listener-specific options. For compatibility this\n can be a boolean, in which case the method behaves exactly as if the value\n was specified as options's capture.\n\n When set to true, options's capture prevents callback from being invoked\n when the event's eventPhase attribute value is BUBBLING_PHASE. When false\n (or not present), callback will not be invoked when event's eventPhase\n attribute value is CAPTURING_PHASE. Either way, callback will be invoked if\n event's eventPhase attribute value is AT_TARGET.\n\n When set to true, options's passive indicates that the callback will not\n cancel the event by invoking preventDefault(). This is used to enable\n performance optimizations described in Â§ 2.8 Observing event listeners.\n\n When set to true, options's once indicates that the callback will only be\n invoked once after which the event listener will be removed.\n\n The event listener is appended to target's event listener list and is not\n appended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6096,
              "source": "\n  /** Appends an event listener for events whose type attribute value is type.\n   * The callback argument sets the callback that will be invoked when the event\n   * is dispatched.\n   *\n   * The options argument sets listener-specific options. For compatibility this\n   * can be a boolean, in which case the method behaves exactly as if the value\n   * was specified as options's capture.\n   *\n   * When set to true, options's capture prevents callback from being invoked\n   * when the event's eventPhase attribute value is BUBBLING_PHASE. When false\n   * (or not present), callback will not be invoked when event's eventPhase\n   * attribute value is CAPTURING_PHASE. Either way, callback will be invoked if\n   * event's eventPhase attribute value is AT_TARGET.\n   *\n   * When set to true, options's passive indicates that the callback will not\n   * cancel the event by invoking preventDefault(). This is used to enable\n   * performance optimizations described in Â§ 2.8 Observing event listeners.\n   *\n   * When set to true, options's once indicates that the callback will only be\n   * invoked once after which the event listener will be removed.\n   *\n   * The event listener is appended to target's event listener list and is not\n   * appended if it has the same type, callback, and capture. */\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject | null,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6097,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "union": [
                      {
                        "ref": "EventListenerOrEventListenerObject",
                        "targs": [],
                        "isNullable": false,
                        "_": 6098,
                        "source": " EventListenerOrEventListenerObject"
                      },
                      {
                        "core": "null",
                        "isNullable": false,
                        "_": 6098,
                        "source": " null"
                      }
                    ],
                    "isNullable": false,
                    "_": 6098,
                    "source": " EventListenerOrEventListenerObject | null"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6099,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6099,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6099,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6100,
                "source": " void"
              }
            },
            {
              "doc": "Dispatches a synthetic event event to target and returns true if either\n event's cancelable attribute value is false or its preventDefault() method\n was not invoked, and false otherwise.",
              "isMethod": true,
              "_": 6104,
              "source": "\n  /** Dispatches a synthetic event event to target and returns true if either\n   * event's cancelable attribute value is false or its preventDefault() method\n   * was not invoked, and false otherwise. */\n  dispatchEvent(event: Event): boolean;",
              "name": "dispatchEvent",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "event",
                  "type": {
                    "ref": "Event",
                    "targs": [],
                    "isNullable": false,
                    "_": 6104,
                    "source": " Event"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6104,
                "source": " boolean"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\n type, callback, and options.",
              "isMethod": true,
              "_": 6107,
              "source": "\n  /** Removes the event listener in target's event listener list with the same\n   * type, callback, and options. */\n  removeEventListener(\n    type: string,\n    callback: EventListenerOrEventListenerObject | null,\n    options?: EventListenerOptions | boolean,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6108,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "callback",
                  "type": {
                    "union": [
                      {
                        "ref": "EventListenerOrEventListenerObject",
                        "targs": [],
                        "isNullable": false,
                        "_": 6109,
                        "source": " EventListenerOrEventListenerObject"
                      },
                      {
                        "core": "null",
                        "isNullable": false,
                        "_": 6109,
                        "source": " null"
                      }
                    ],
                    "isNullable": false,
                    "_": 6109,
                    "source": " EventListenerOrEventListenerObject | null"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6110,
                        "source": " EventListenerOptions"
                      },
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6110,
                        "source": " boolean"
                      }
                    ],
                    "isNullable": false,
                    "_": 6110,
                    "source": " EventListenerOptions | boolean"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6111,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6115,
          "name": "EventListener",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "evt",
                  "type": {
                    "ref": "Event",
                    "targs": [],
                    "isNullable": false,
                    "_": 6116,
                    "source": " Event"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6116,
                    "source": " void"
                  },
                  {
                    "ref": "Promise",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6116,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6116,
                    "source": " Promise<void>"
                  }
                ],
                "isNullable": false,
                "_": 6116,
                "source": " void | Promise<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6116,
              "source": "\n  (evt: Event): void | Promise<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6120,
          "name": "EventListenerObject",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6121,
              "source": "\n  handleEvent(evt: Event): void | Promise<void>;",
              "name": "handleEvent",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "evt",
                  "type": {
                    "ref": "Event",
                    "targs": [],
                    "isNullable": false,
                    "_": 6121,
                    "source": " Event"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6121,
                    "source": " void"
                  },
                  {
                    "ref": "Promise",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6121,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6121,
                    "source": " Promise<void>"
                  }
                ],
                "isNullable": false,
                "_": 6121,
                "source": " void | Promise<void>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6130,
          "name": "AddEventListenerOptions",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventListenerOptions",
                "targs": [],
                "isNullable": false,
                "_": 6130,
                "source": " EventListenerOptions"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6131,
              "source": "\n  once?: boolean;",
              "name": "once",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6131,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6132,
              "source": "\n  passive?: boolean;",
              "name": "passive",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6132,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6133,
              "source": "\n  signal?: AbortSignal;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6133,
                "source": " AbortSignal"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6137,
          "name": "EventListenerOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6138,
              "source": "\n  capture?: boolean;",
              "name": "capture",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6138,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6142,
          "name": "ProgressEventInit",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 6142,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6143,
              "source": "\n  lengthComputable?: boolean;",
              "name": "lengthComputable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6143,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6144,
              "source": "\n  loaded?: number;",
              "name": "loaded",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6144,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6145,
              "source": "\n  total?: number;",
              "name": "total",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6145,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6154,
          "name": "ProgressEvent",
          "generics": [
            {
              "name": "T",
              "constraint": {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 6154,
                "source": " EventTarget"
              },
              "default": {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 6154,
                "source": " EventTarget"
              },
              "_": 6154,
              "source": "T extends EventTarget = EventTarget"
            }
          ],
          "doc": "Events measuring progress of an underlying process, like an HTTP request\n(for an XMLHttpRequest, or the loading of the underlying resource of an\n<img>, <audio>, <video>, <style> or <link>).",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 6154,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6155,
              "source": "\n  constructor(type: string, eventInitDict?: ProgressEventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6155,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "ProgressEventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 6155,
                    "source": " ProgressEventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6156,
              "source": "\n  readonly lengthComputable: boolean;",
              "name": "lengthComputable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6156,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6157,
              "source": "\n  readonly loaded: number;",
              "name": "loaded",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6157,
                "source": " number"
              }
            },
            {
              "doc": "Returns the object to which event is dispatched (its target).",
              "isMethod": false,
              "_": 6158,
              "source": "\n  readonly target: T | null;",
              "name": "target",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6158,
                    "source": " T"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6158,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6158,
                "source": " T | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6159,
              "source": "\n  readonly total: number;",
              "name": "total",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6159,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6183,
          "name": "TextDecoderOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6184,
              "source": "\n  fatal?: boolean;",
              "name": "fatal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6184,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6185,
              "source": "\n  ignoreBOM?: boolean;",
              "name": "ignoreBOM",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6185,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6189,
          "name": "TextDecodeOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6190,
              "source": "\n  stream?: boolean;",
              "name": "stream",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6190,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6194,
          "name": "TextDecoder",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns encoding's name, lowercased.",
              "isMethod": false,
              "_": 6196,
              "source": "\n  /** Returns encoding's name, lowercased. */\n  readonly encoding: string;",
              "name": "encoding",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6196,
                "source": " string"
              }
            },
            {
              "doc": "Returns `true` if error mode is \"fatal\", and `false` otherwise.",
              "isMethod": false,
              "_": 6198,
              "source": "\n  /** Returns `true` if error mode is \"fatal\", and `false` otherwise. */\n  readonly fatal: boolean;",
              "name": "fatal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6198,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns `true` if ignore BOM flag is set, and `false` otherwise.",
              "isMethod": false,
              "_": 6200,
              "source": "\n  /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */\n  readonly ignoreBOM: boolean;",
              "name": "ignoreBOM",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6200,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns the result of running encoding's decoder.",
              "isMethod": true,
              "_": 6203,
              "source": "\n\n  /** Returns the result of running encoding's decoder. */\n  decode(input?: BufferSource, options?: TextDecodeOptions): string;",
              "name": "decode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 6203,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "TextDecodeOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6203,
                    "source": " TextDecodeOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6203,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline15",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6209,
              "source": "\n  new (label?: string, options?: TextDecoderOptions): TextDecoder;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6209,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "TextDecoderOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6209,
                    "source": " TextDecoderOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "TextDecoder",
                "targs": [],
                "isNullable": false,
                "_": 6209,
                "source": " TextDecoder"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6208,
              "source": "\n  prototype: TextDecoder;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TextDecoder",
                "targs": [],
                "isNullable": false,
                "_": 6208,
                "source": " TextDecoder"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6213,
          "name": "TextEncoderEncodeIntoResult",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6214,
              "source": "\n  read: number;",
              "name": "read",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6214,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6215,
              "source": "\n  written: number;",
              "name": "written",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6215,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6219,
          "name": "TextEncoder",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns \"utf-8\".",
              "isMethod": false,
              "_": 6221,
              "source": "\n  /** Returns \"utf-8\". */\n  readonly encoding: \"utf-8\";",
              "name": "encoding",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "\"utf-8\"",
                "isNullable": false,
                "_": 6221,
                "source": " \"utf-8\""
              }
            },
            {
              "doc": "Returns the result of running UTF-8's encoder.",
              "isMethod": true,
              "_": 6223,
              "source": "\n  /** Returns the result of running UTF-8's encoder. */\n  encode(input?: string): Uint8Array;",
              "name": "encode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6223,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Uint8Array",
                "targs": [],
                "isNullable": false,
                "_": 6223,
                "source": " Uint8Array"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6224,
              "source": "\n  encodeInto(input: string, dest: Uint8Array): TextEncoderEncodeIntoResult;",
              "name": "encodeInto",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6224,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "dest",
                  "type": {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6224,
                    "source": " Uint8Array"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "TextEncoderEncodeIntoResult",
                "targs": [],
                "isNullable": false,
                "_": 6224,
                "source": " TextEncoderEncodeIntoResult"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline16",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6230,
              "source": "\n  new (): TextEncoder;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "TextEncoder",
                "targs": [],
                "isNullable": false,
                "_": 6230,
                "source": " TextEncoder"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6229,
              "source": "\n  prototype: TextEncoder;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TextEncoder",
                "targs": [],
                "isNullable": false,
                "_": 6229,
                "source": " TextEncoder"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6234,
          "name": "TextDecoderStream",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns encoding's name, lowercased.",
              "isMethod": false,
              "_": 6236,
              "source": "\n  /** Returns encoding's name, lowercased. */\n  readonly encoding: string;",
              "name": "encoding",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6236,
                "source": " string"
              }
            },
            {
              "doc": "Returns `true` if error mode is \"fatal\", and `false` otherwise.",
              "isMethod": false,
              "_": 6238,
              "source": "\n  /** Returns `true` if error mode is \"fatal\", and `false` otherwise. */\n  readonly fatal: boolean;",
              "name": "fatal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6238,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns `true` if ignore BOM flag is set, and `false` otherwise.",
              "isMethod": false,
              "_": 6240,
              "source": "\n  /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */\n  readonly ignoreBOM: boolean;",
              "name": "ignoreBOM",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6240,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6241,
              "source": "\n  readonly readable: ReadableStream<string>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 6241,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 6241,
                "source": " ReadableStream<string>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6242,
              "source": "\n  readonly writable: WritableStream<BufferSource>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 6242,
                    "source": "BufferSource"
                  }
                ],
                "isNullable": false,
                "_": 6242,
                "source": " WritableStream<BufferSource>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6243,
              "source": "\n  readonly [Symbol.toStringTag]: string;",
              "name": "[Symbol.toStringTag]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6243,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline17",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6249,
              "source": "\n  new (label?: string, options?: TextDecoderOptions): TextDecoderStream;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "label",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6249,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "TextDecoderOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6249,
                    "source": " TextDecoderOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "TextDecoderStream",
                "targs": [],
                "isNullable": false,
                "_": 6249,
                "source": " TextDecoderStream"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6248,
              "source": "\n  prototype: TextDecoderStream;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TextDecoderStream",
                "targs": [],
                "isNullable": false,
                "_": 6248,
                "source": " TextDecoderStream"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6253,
          "name": "TextEncoderStream",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns \"utf-8\".",
              "isMethod": false,
              "_": 6255,
              "source": "\n  /** Returns \"utf-8\". */\n  readonly encoding: \"utf-8\";",
              "name": "encoding",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "\"utf-8\"",
                "isNullable": false,
                "_": 6255,
                "source": " \"utf-8\""
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6256,
              "source": "\n  readonly readable: ReadableStream<Uint8Array>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6256,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6256,
                "source": " ReadableStream<Uint8Array>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6257,
              "source": "\n  readonly writable: WritableStream<string>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 6257,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 6257,
                "source": " WritableStream<string>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6258,
              "source": "\n  readonly [Symbol.toStringTag]: string;",
              "name": "[Symbol.toStringTag]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6258,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline18",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6264,
              "source": "\n  new (): TextEncoderStream;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "TextEncoderStream",
                "targs": [],
                "isNullable": false,
                "_": 6264,
                "source": " TextEncoderStream"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6263,
              "source": "\n  prototype: TextEncoderStream;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TextEncoderStream",
                "targs": [],
                "isNullable": false,
                "_": 6263,
                "source": " TextEncoderStream"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6272,
          "name": "AbortController",
          "generics": [],
          "doc": "A controller object that allows you to abort one or more DOM requests as and\nwhen desired.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns the AbortSignal object associated with this object.",
              "isMethod": false,
              "_": 6274,
              "source": "\n  /** Returns the AbortSignal object associated with this object. */\n  readonly signal: AbortSignal;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6274,
                "source": " AbortSignal"
              }
            },
            {
              "doc": "Invoking this method will set this object's AbortSignal's aborted flag and\n signal to any observers that the associated activity is to be aborted.",
              "isMethod": true,
              "_": 6277,
              "source": "\n  /** Invoking this method will set this object's AbortSignal's aborted flag and\n   * signal to any observers that the associated activity is to be aborted. */\n  abort(reason?: any): void;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6277,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6277,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6281,
          "name": "AbortSignalEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6282,
              "source": "\n  abort: Event;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 6282,
                "source": " Event"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6290,
          "name": "AbortSignal",
          "generics": [],
          "doc": "A signal object that allows you to communicate with a DOM request (such as a\nFetch) and abort it if required via an AbortController object.",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 6290,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns true if this AbortSignal's AbortController has signaled to abort,\nand false otherwise.",
              "isMethod": false,
              "_": 6293,
              "source": "\n  /** Returns true if this AbortSignal's AbortController has signaled to abort,\n   * and false otherwise. */\n  readonly aborted: boolean;",
              "name": "aborted",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6293,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6294,
              "source": "\n  readonly reason: any;",
              "name": "reason",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 6294,
                "source": " any"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6295,
              "source": "\n  onabort: ((this: AbortSignal, ev: Event) => any) | null;",
              "name": "onabort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6295,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "AbortSignal",
                          "targs": [],
                          "isNullable": false,
                          "_": 6295,
                          "source": " AbortSignal"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "Event",
                          "targs": [],
                          "isNullable": false,
                          "_": 6295,
                          "source": " Event"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6295,
                    "source": " ((this: AbortSignal, ev: Event) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6295,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6295,
                "source": " ((this: AbortSignal, ev: Event) => any) | null"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6296,
              "source": "\n  addEventListener<K extends keyof AbortSignalEventMap>(\n    type: K,\n    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "AbortSignalEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6296,
                      "source": " AbortSignalEventMap"
                    },
                    "isNullable": false,
                    "_": 6296,
                    "source": " keyof AbortSignalEventMap"
                  },
                  "_": 6296,
                  "source": "K extends keyof AbortSignalEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6297,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6298,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "AbortSignal",
                          "targs": [],
                          "isNullable": false,
                          "_": 6298,
                          "source": " AbortSignal"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6298,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "AbortSignalEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6298,
                            "source": " AbortSignalEventMap"
                          },
                          "isNullable": false,
                          "_": 6298,
                          "source": " AbortSignalEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6298,
                    "source": " (this: AbortSignal, ev: AbortSignalEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6299,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6299,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6299,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6300,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6301,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6302,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6303,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6304,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6304,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6304,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6305,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6306,
              "source": "\n  removeEventListener<K extends keyof AbortSignalEventMap>(\n    type: K,\n    listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "AbortSignalEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6306,
                      "source": " AbortSignalEventMap"
                    },
                    "isNullable": false,
                    "_": 6306,
                    "source": " keyof AbortSignalEventMap"
                  },
                  "_": 6306,
                  "source": "K extends keyof AbortSignalEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6307,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6308,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "AbortSignal",
                          "targs": [],
                          "isNullable": false,
                          "_": 6308,
                          "source": " AbortSignal"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6308,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "AbortSignalEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6308,
                            "source": " AbortSignalEventMap"
                          },
                          "isNullable": false,
                          "_": 6308,
                          "source": " AbortSignalEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6308,
                    "source": " (this: AbortSignal, ev: AbortSignalEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6309,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6309,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6309,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6310,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6311,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6312,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6313,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6314,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6314,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6314,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6315,
                "source": " void"
              }
            },
            {
              "doc": "Throws this AbortSignal's abort reason, if its AbortController has\n signaled to abort; otherwise, does nothing.",
              "isMethod": true,
              "_": 6319,
              "source": "\n\n  /** Throws this AbortSignal's abort reason, if its AbortController has\n   * signaled to abort; otherwise, does nothing. */\n  throwIfAborted(): void;",
              "name": "throwIfAborted",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6319,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline19",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6325,
              "source": "\n  new (): AbortSignal;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6325,
                "source": " AbortSignal"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6324,
              "source": "\n  prototype: AbortSignal;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6324,
                "source": " AbortSignal"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6326,
              "source": "\n  abort(reason?: any): AbortSignal;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6326,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6326,
                "source": " AbortSignal"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6327,
              "source": "\n  timeout(milliseconds: number): AbortSignal;",
              "name": "timeout",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "milliseconds",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 6327,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6327,
                "source": " AbortSignal"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6331,
          "name": "FileReaderEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6332,
              "source": "\n  \"abort\": ProgressEvent<FileReader>;",
              "name": "\"abort\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6332,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6332,
                "source": " ProgressEvent<FileReader>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6333,
              "source": "\n  \"error\": ProgressEvent<FileReader>;",
              "name": "\"error\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6333,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6333,
                "source": " ProgressEvent<FileReader>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6334,
              "source": "\n  \"load\": ProgressEvent<FileReader>;",
              "name": "\"load\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6334,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6334,
                "source": " ProgressEvent<FileReader>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6335,
              "source": "\n  \"loadend\": ProgressEvent<FileReader>;",
              "name": "\"loadend\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6335,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6335,
                "source": " ProgressEvent<FileReader>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6336,
              "source": "\n  \"loadstart\": ProgressEvent<FileReader>;",
              "name": "\"loadstart\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6336,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6336,
                "source": " ProgressEvent<FileReader>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6337,
              "source": "\n  \"progress\": ProgressEvent<FileReader>;",
              "name": "\"progress\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ProgressEvent",
                "targs": [
                  {
                    "ref": "FileReader",
                    "targs": [],
                    "isNullable": false,
                    "_": 6337,
                    "source": "FileReader"
                  }
                ],
                "isNullable": false,
                "_": 6337,
                "source": " ProgressEvent<FileReader>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6346,
          "name": "FileReader",
          "generics": [],
          "doc": "Lets web applications asynchronously read the contents of files (or raw data\nbuffers) stored on the user's computer, using File or Blob objects to specify\nthe file or data to read.",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 6346,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6347,
              "source": "\n  readonly error: DOMException | null;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "DOMException",
                    "targs": [],
                    "isNullable": false,
                    "_": 6347,
                    "source": " DOMException"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6347,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6347,
                "source": " DOMException | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6348,
              "source": "\n  onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;",
              "name": "onabort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6348,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6348,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6348,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6348,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6348,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6348,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6348,
                "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6349,
              "source": "\n  onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;",
              "name": "onerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6349,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6349,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6349,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6349,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6349,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6349,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6349,
                "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6350,
              "source": "\n  onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;",
              "name": "onload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6350,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6350,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6350,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6350,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6350,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6350,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6350,
                "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6351,
              "source": "\n  onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;",
              "name": "onloadend",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6351,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6351,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6351,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6351,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6351,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6351,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6351,
                "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6352,
              "source": "\n  onloadstart:\n    | ((this: FileReader, ev: ProgressEvent<FileReader>) => any)\n    | null;",
              "name": "onloadstart",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6353,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6353,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6353,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6353,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6353,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6354,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6353,
                "source": "\n    | ((this: FileReader, ev: ProgressEvent<FileReader>) => any)\n    | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6355,
              "source": "\n  onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;",
              "name": "onprogress",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6355,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6355,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ProgressEvent",
                          "targs": [
                            {
                              "ref": "FileReader",
                              "targs": [],
                              "isNullable": false,
                              "_": 6355,
                              "source": "FileReader"
                            }
                          ],
                          "isNullable": false,
                          "_": 6355,
                          "source": " ProgressEvent<FileReader>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6355,
                    "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6355,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6355,
                "source": " ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6356,
              "source": "\n  readonly readyState: number;",
              "name": "readyState",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6356,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6357,
              "source": "\n  readonly result: string | ArrayBuffer | null;",
              "name": "result",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 6357,
                    "source": " string"
                  },
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 6357,
                    "source": " ArrayBuffer"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6357,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6357,
                "source": " string | ArrayBuffer | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6358,
              "source": "\n  abort(): void;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6358,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6359,
              "source": "\n  readAsArrayBuffer(blob: Blob): void;",
              "name": "readAsArrayBuffer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blob",
                  "type": {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 6359,
                    "source": " Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6359,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6360,
              "source": "\n  readAsBinaryString(blob: Blob): void;",
              "name": "readAsBinaryString",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blob",
                  "type": {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 6360,
                    "source": " Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6360,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6361,
              "source": "\n  readAsDataURL(blob: Blob): void;",
              "name": "readAsDataURL",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blob",
                  "type": {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 6361,
                    "source": " Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6361,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6362,
              "source": "\n  readAsText(blob: Blob, encoding?: string): void;",
              "name": "readAsText",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blob",
                  "type": {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 6362,
                    "source": " Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "encoding",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6362,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6362,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6363,
              "source": "\n  readonly DONE: number;",
              "name": "DONE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6363,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6364,
              "source": "\n  readonly EMPTY: number;",
              "name": "EMPTY",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6364,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6365,
              "source": "\n  readonly LOADING: number;",
              "name": "LOADING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6365,
                "source": " number"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6366,
              "source": "\n  addEventListener<K extends keyof FileReaderEventMap>(\n    type: K,\n    listener: (this: FileReader, ev: FileReaderEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "FileReaderEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6366,
                      "source": " FileReaderEventMap"
                    },
                    "isNullable": false,
                    "_": 6366,
                    "source": " keyof FileReaderEventMap"
                  },
                  "_": 6366,
                  "source": "K extends keyof FileReaderEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6367,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6368,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6368,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6368,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "FileReaderEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6368,
                            "source": " FileReaderEventMap"
                          },
                          "isNullable": false,
                          "_": 6368,
                          "source": " FileReaderEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6368,
                    "source": " (this: FileReader, ev: FileReaderEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6369,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6369,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6369,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6370,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6371,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6372,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6373,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6374,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6374,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6374,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6375,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6376,
              "source": "\n  removeEventListener<K extends keyof FileReaderEventMap>(\n    type: K,\n    listener: (this: FileReader, ev: FileReaderEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "FileReaderEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6376,
                      "source": " FileReaderEventMap"
                    },
                    "isNullable": false,
                    "_": 6376,
                    "source": " keyof FileReaderEventMap"
                  },
                  "_": 6376,
                  "source": "K extends keyof FileReaderEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6377,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6378,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "FileReader",
                          "targs": [],
                          "isNullable": false,
                          "_": 6378,
                          "source": " FileReader"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6378,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "FileReaderEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6378,
                            "source": " FileReaderEventMap"
                          },
                          "isNullable": false,
                          "_": 6378,
                          "source": " FileReaderEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6378,
                    "source": " (this: FileReader, ev: FileReaderEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6379,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6379,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6379,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6380,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6381,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6382,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6383,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6384,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6384,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6384,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6385,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline20",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6391,
              "source": "\n  new (): FileReader;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "FileReader",
                "targs": [],
                "isNullable": false,
                "_": 6391,
                "source": " FileReader"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6390,
              "source": "\n  prototype: FileReader;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "FileReader",
                "targs": [],
                "isNullable": false,
                "_": 6390,
                "source": " FileReader"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6392,
              "source": "\n  readonly DONE: number;",
              "name": "DONE",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6392,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6393,
              "source": "\n  readonly EMPTY: number;",
              "name": "EMPTY",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6393,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6394,
              "source": "\n  readonly LOADING: number;",
              "name": "LOADING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6394,
                "source": " number"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6401,
          "name": "BlobPropertyBag",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6402,
              "source": "\n  type?: string;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6402,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6403,
              "source": "\n  endings?: \"transparent\" | \"native\";",
              "name": "endings",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "\"transparent\"",
                    "isNullable": false,
                    "_": 6403,
                    "source": " \"transparent\""
                  },
                  {
                    "core": "\"native\"",
                    "isNullable": false,
                    "_": 6403,
                    "source": " \"native\""
                  }
                ],
                "isNullable": false,
                "_": 6403,
                "source": " \"transparent\" | \"native\""
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6413,
          "name": "Blob",
          "generics": [],
          "doc": "A file-like object of immutable, raw data. Blobs represent data that isn't\nnecessarily in a JavaScript-native format. The File interface is based on\nBlob, inheriting blob functionality and expanding it to support files on the\nuser's system.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6414,
              "source": "\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "blobParts",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "BlobPart",
                        "targs": [],
                        "isNullable": false,
                        "_": 6414,
                        "source": " BlobPart"
                      }
                    ],
                    "isNullable": false,
                    "_": 6414,
                    "source": " BlobPart[]"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "BlobPropertyBag",
                    "targs": [],
                    "isNullable": false,
                    "_": 6414,
                    "source": " BlobPropertyBag"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6416,
              "source": "\n\n  readonly size: number;",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6416,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6417,
              "source": "\n  readonly type: string;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6417,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6418,
              "source": "\n  arrayBuffer(): Promise<ArrayBuffer>;",
              "name": "arrayBuffer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 6418,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 6418,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6419,
              "source": "\n  slice(start?: number, end?: number, contentType?: string): Blob;",
              "name": "slice",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "start",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 6419,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "end",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 6419,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "contentType",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6419,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Blob",
                "targs": [],
                "isNullable": false,
                "_": 6419,
                "source": " Blob"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6420,
              "source": "\n  stream(): ReadableStream<Uint8Array>;",
              "name": "stream",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6420,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6420,
                "source": " ReadableStream<Uint8Array>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6421,
              "source": "\n  text(): Promise<string>;",
              "name": "text",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 6421,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 6421,
                "source": " Promise<string>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6425,
          "name": "FilePropertyBag",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "BlobPropertyBag",
                "targs": [],
                "isNullable": false,
                "_": 6425,
                "source": " BlobPropertyBag"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6426,
              "source": "\n  lastModified?: number;",
              "name": "lastModified",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6426,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6434,
          "name": "File",
          "generics": [],
          "doc": "Provides information about files and allows JavaScript in a web page to\naccess their content.",
          "heritage": [
            [
              {
                "ref": "Blob",
                "targs": [],
                "isNullable": false,
                "_": 6434,
                "source": " Blob"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6435,
              "source": "\n  constructor(\n    fileBits: BlobPart[],\n    fileName: string,\n    options?: FilePropertyBag,\n  );",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "fileBits",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "BlobPart",
                        "targs": [],
                        "isNullable": false,
                        "_": 6436,
                        "source": " BlobPart"
                      }
                    ],
                    "isNullable": false,
                    "_": 6436,
                    "source": " BlobPart[]"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "fileName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6437,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "FilePropertyBag",
                    "targs": [],
                    "isNullable": false,
                    "_": 6438,
                    "source": " FilePropertyBag"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6441,
              "source": "\n\n  readonly lastModified: number;",
              "name": "lastModified",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6441,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6442,
              "source": "\n  readonly name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6442,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6446,
          "name": "ReadableStreamDefaultReadDoneResult",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6447,
              "source": "\n  done: true;",
              "name": "done",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "true",
                "isNullable": false,
                "_": 6447,
                "source": " true"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6448,
              "source": "\n  value?: undefined;",
              "name": "value",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6448,
                "source": " undefined"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6452,
          "name": "ReadableStreamDefaultReadValueResult",
          "generics": [
            {
              "name": "T",
              "_": 6452,
              "source": "T"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6453,
              "source": "\n  done: false;",
              "name": "done",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "false",
                "isNullable": false,
                "_": 6453,
                "source": " false"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6454,
              "source": "\n  value: T;",
              "name": "value",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 6454,
                "source": " T"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6463,
          "name": "ReadableStreamDefaultReader",
          "generics": [
            {
              "name": "R",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6463,
                "source": " any"
              },
              "_": 6463,
              "source": "R = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6464,
              "source": "\n  readonly closed: Promise<void>;",
              "name": "closed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6464,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6464,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6465,
              "source": "\n  cancel(reason?: any): Promise<void>;",
              "name": "cancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6465,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6465,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6465,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6466,
              "source": "\n  read(): Promise<ReadableStreamDefaultReadResult<R>>;",
              "name": "read",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ReadableStreamDefaultReadResult",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6466,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6466,
                    "source": "ReadableStreamDefaultReadResult<R>"
                  }
                ],
                "isNullable": false,
                "_": 6466,
                "source": " Promise<ReadableStreamDefaultReadResult<R>>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6467,
              "source": "\n  releaseLock(): void;",
              "name": "releaseLock",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6467,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline21",
          "generics": [
            {
              "name": "R",
              "_": 6473,
              "source": "R"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6473,
              "source": "\n  new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;",
              "name": "__new",
              "generics": [
                {
                  "name": "R",
                  "_": 6473,
                  "source": "R"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "stream",
                  "type": {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6473,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6473,
                    "source": " ReadableStream<R>"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "ReadableStreamDefaultReader",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6473,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6473,
                "source": " ReadableStreamDefaultReader<R>"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6472,
              "source": "\n  prototype: ReadableStreamDefaultReader;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamDefaultReader",
                "targs": [],
                "isNullable": false,
                "_": 6472,
                "source": " ReadableStreamDefaultReader"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6477,
          "name": "ReadableStreamBYOBReadDoneResult",
          "generics": [
            {
              "name": "V",
              "constraint": {
                "ref": "ArrayBufferView",
                "targs": [],
                "isNullable": false,
                "_": 6477,
                "source": " ArrayBufferView"
              },
              "_": 6477,
              "source": "V extends ArrayBufferView"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6478,
              "source": "\n  done: true;",
              "name": "done",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "true",
                "isNullable": false,
                "_": 6478,
                "source": " true"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6479,
              "source": "\n  value?: V;",
              "name": "value",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "V",
                "targs": [],
                "isNullable": false,
                "_": 6479,
                "source": " V"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6483,
          "name": "ReadableStreamBYOBReadValueResult",
          "generics": [
            {
              "name": "V",
              "constraint": {
                "ref": "ArrayBufferView",
                "targs": [],
                "isNullable": false,
                "_": 6483,
                "source": " ArrayBufferView"
              },
              "_": 6483,
              "source": "V extends ArrayBufferView"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6484,
              "source": "\n  done: false;",
              "name": "done",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "false",
                "isNullable": false,
                "_": 6484,
                "source": " false"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6485,
              "source": "\n  value: V;",
              "name": "value",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "V",
                "targs": [],
                "isNullable": false,
                "_": 6485,
                "source": " V"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6494,
          "name": "ReadableStreamBYOBReader",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6495,
              "source": "\n  readonly closed: Promise<void>;",
              "name": "closed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6495,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6495,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6496,
              "source": "\n  cancel(reason?: any): Promise<void>;",
              "name": "cancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6496,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6496,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6496,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6497,
              "source": "\n  read<V extends ArrayBufferView>(\n    view: V,\n  ): Promise<ReadableStreamBYOBReadResult<V>>;",
              "name": "read",
              "generics": [
                {
                  "name": "V",
                  "constraint": {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6497,
                    "source": " ArrayBufferView"
                  },
                  "_": 6497,
                  "source": "V extends ArrayBufferView"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "view",
                  "type": {
                    "ref": "V",
                    "targs": [],
                    "isNullable": false,
                    "_": 6498,
                    "source": " V"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ReadableStreamBYOBReadResult",
                    "targs": [
                      {
                        "ref": "V",
                        "targs": [],
                        "isNullable": false,
                        "_": 6499,
                        "source": "V"
                      }
                    ],
                    "isNullable": false,
                    "_": 6499,
                    "source": "ReadableStreamBYOBReadResult<V>"
                  }
                ],
                "isNullable": false,
                "_": 6499,
                "source": " Promise<ReadableStreamBYOBReadResult<V>>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6500,
              "source": "\n  releaseLock(): void;",
              "name": "releaseLock",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6500,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline22",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6506,
              "source": "\n  new (stream: ReadableStream<Uint8Array>): ReadableStreamBYOBReader;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "stream",
                  "type": {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "Uint8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 6506,
                        "source": "Uint8Array"
                      }
                    ],
                    "isNullable": false,
                    "_": 6506,
                    "source": " ReadableStream<Uint8Array>"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "ReadableStreamBYOBReader",
                "targs": [],
                "isNullable": false,
                "_": 6506,
                "source": " ReadableStreamBYOBReader"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6505,
              "source": "\n  prototype: ReadableStreamBYOBReader;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamBYOBReader",
                "targs": [],
                "isNullable": false,
                "_": 6505,
                "source": " ReadableStreamBYOBReader"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6510,
          "name": "ReadableStreamBYOBRequest",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6511,
              "source": "\n  readonly view: ArrayBufferView | null;",
              "name": "view",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6511,
                    "source": " ArrayBufferView"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6511,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6511,
                "source": " ArrayBufferView | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6512,
              "source": "\n  respond(bytesWritten: number): void;",
              "name": "respond",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "bytesWritten",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 6512,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6512,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6513,
              "source": "\n  respondWithNewView(view: ArrayBufferView): void;",
              "name": "respondWithNewView",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "view",
                  "type": {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6513,
                    "source": " ArrayBufferView"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6513,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6517,
          "name": "ReadableByteStreamControllerCallback",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "controller",
                  "type": {
                    "ref": "ReadableByteStreamController",
                    "targs": [],
                    "isNullable": false,
                    "_": 6518,
                    "source": " ReadableByteStreamController"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6518,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6518,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6518,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6518,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6518,
              "source": "\n  (controller: ReadableByteStreamController): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6522,
          "name": "UnderlyingByteSource",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6523,
              "source": "\n  autoAllocateChunkSize?: number;",
              "name": "autoAllocateChunkSize",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6523,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6524,
              "source": "\n  cancel?: ReadableStreamErrorCallback;",
              "name": "cancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamErrorCallback",
                "targs": [],
                "isNullable": false,
                "_": 6524,
                "source": " ReadableStreamErrorCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6525,
              "source": "\n  pull?: ReadableByteStreamControllerCallback;",
              "name": "pull",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableByteStreamControllerCallback",
                "targs": [],
                "isNullable": false,
                "_": 6525,
                "source": " ReadableByteStreamControllerCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6526,
              "source": "\n  start?: ReadableByteStreamControllerCallback;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableByteStreamControllerCallback",
                "targs": [],
                "isNullable": false,
                "_": 6526,
                "source": " ReadableByteStreamControllerCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6527,
              "source": "\n  type: \"bytes\";",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "\"bytes\"",
                "isNullable": false,
                "_": 6527,
                "source": " \"bytes\""
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6531,
          "name": "UnderlyingSink",
          "generics": [
            {
              "name": "W",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6531,
                "source": " any"
              },
              "_": 6531,
              "source": "W = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6532,
              "source": "\n  abort?: WritableStreamErrorCallback;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStreamErrorCallback",
                "targs": [],
                "isNullable": false,
                "_": 6532,
                "source": " WritableStreamErrorCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6533,
              "source": "\n  close?: WritableStreamDefaultControllerCloseCallback;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStreamDefaultControllerCloseCallback",
                "targs": [],
                "isNullable": false,
                "_": 6533,
                "source": " WritableStreamDefaultControllerCloseCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6534,
              "source": "\n  start?: WritableStreamDefaultControllerStartCallback;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStreamDefaultControllerStartCallback",
                "targs": [],
                "isNullable": false,
                "_": 6534,
                "source": " WritableStreamDefaultControllerStartCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6535,
              "source": "\n  type?: undefined;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6535,
                "source": " undefined"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6536,
              "source": "\n  write?: WritableStreamDefaultControllerWriteCallback<W>;",
              "name": "write",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStreamDefaultControllerWriteCallback",
                "targs": [
                  {
                    "ref": "W",
                    "targs": [],
                    "isNullable": false,
                    "_": 6536,
                    "source": "W"
                  }
                ],
                "isNullable": false,
                "_": 6536,
                "source": " WritableStreamDefaultControllerWriteCallback<W>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6540,
          "name": "UnderlyingSource",
          "generics": [
            {
              "name": "R",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6540,
                "source": " any"
              },
              "_": 6540,
              "source": "R = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6541,
              "source": "\n  cancel?: ReadableStreamErrorCallback;",
              "name": "cancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamErrorCallback",
                "targs": [],
                "isNullable": false,
                "_": 6541,
                "source": " ReadableStreamErrorCallback"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6542,
              "source": "\n  pull?: ReadableStreamDefaultControllerCallback<R>;",
              "name": "pull",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamDefaultControllerCallback",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6542,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6542,
                "source": " ReadableStreamDefaultControllerCallback<R>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6543,
              "source": "\n  start?: ReadableStreamDefaultControllerCallback<R>;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamDefaultControllerCallback",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6543,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6543,
                "source": " ReadableStreamDefaultControllerCallback<R>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6544,
              "source": "\n  type?: undefined;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6544,
                "source": " undefined"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6548,
          "name": "ReadableStreamErrorCallback",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6549,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6549,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6549,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6549,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6549,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6549,
              "source": "\n  (reason: any): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6553,
          "name": "ReadableStreamDefaultControllerCallback",
          "generics": [
            {
              "name": "R",
              "_": 6553,
              "source": "R"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "controller",
                  "type": {
                    "ref": "ReadableStreamDefaultController",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6554,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6554,
                    "source": " ReadableStreamDefaultController<R>"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6554,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6554,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6554,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6554,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6554,
              "source": "\n  (controller: ReadableStreamDefaultController<R>): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6558,
          "name": "ReadableStreamDefaultController",
          "generics": [
            {
              "name": "R",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6558,
                "source": " any"
              },
              "_": 6558,
              "source": "R = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6559,
              "source": "\n  readonly desiredSize: number | null;",
              "name": "desiredSize",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 6559,
                    "source": " number"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6559,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6559,
                "source": " number | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6560,
              "source": "\n  close(): void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6560,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6561,
              "source": "\n  enqueue(chunk: R): void;",
              "name": "enqueue",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6561,
                    "source": " R"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6561,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6562,
              "source": "\n  error(error?: any): void;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "error",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6562,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6562,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline23",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6568,
              "source": "\n  new (): ReadableStreamDefaultController;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "ReadableStreamDefaultController",
                "targs": [],
                "isNullable": false,
                "_": 6568,
                "source": " ReadableStreamDefaultController"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6567,
              "source": "\n  prototype: ReadableStreamDefaultController;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStreamDefaultController",
                "targs": [],
                "isNullable": false,
                "_": 6567,
                "source": " ReadableStreamDefaultController"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6572,
          "name": "ReadableByteStreamController",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6573,
              "source": "\n  readonly byobRequest: ReadableStreamBYOBRequest | null;",
              "name": "byobRequest",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "ReadableStreamBYOBRequest",
                    "targs": [],
                    "isNullable": false,
                    "_": 6573,
                    "source": " ReadableStreamBYOBRequest"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6573,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6573,
                "source": " ReadableStreamBYOBRequest | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6574,
              "source": "\n  readonly desiredSize: number | null;",
              "name": "desiredSize",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 6574,
                    "source": " number"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6574,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6574,
                "source": " number | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6575,
              "source": "\n  close(): void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6575,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6576,
              "source": "\n  enqueue(chunk: ArrayBufferView): void;",
              "name": "enqueue",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6576,
                    "source": " ArrayBufferView"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6576,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6577,
              "source": "\n  error(error?: any): void;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "error",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6577,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6577,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline24",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6583,
              "source": "\n  new (): ReadableByteStreamController;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "ReadableByteStreamController",
                "targs": [],
                "isNullable": false,
                "_": 6583,
                "source": " ReadableByteStreamController"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6582,
              "source": "\n  prototype: ReadableByteStreamController;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableByteStreamController",
                "targs": [],
                "isNullable": false,
                "_": 6582,
                "source": " ReadableByteStreamController"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6587,
          "name": "PipeOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6588,
              "source": "\n  preventAbort?: boolean;",
              "name": "preventAbort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6588,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6589,
              "source": "\n  preventCancel?: boolean;",
              "name": "preventCancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6589,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6590,
              "source": "\n  preventClose?: boolean;",
              "name": "preventClose",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6590,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6591,
              "source": "\n  signal?: AbortSignal;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6591,
                "source": " AbortSignal"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6595,
          "name": "QueuingStrategySizeCallback",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6595,
                "source": " any"
              },
              "_": 6595,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6596,
                    "source": " T"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6596,
                "source": " number"
              },
              "generics": [],
              "doc": "",
              "_": 6596,
              "source": "\n  (chunk: T): number;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6600,
          "name": "QueuingStrategy",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6600,
                "source": " any"
              },
              "_": 6600,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6601,
              "source": "\n  highWaterMark?: number;",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6601,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6602,
              "source": "\n  size?: QueuingStrategySizeCallback<T>;",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "QueuingStrategySizeCallback",
                "targs": [
                  {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6602,
                    "source": "T"
                  }
                ],
                "isNullable": false,
                "_": 6602,
                "source": " QueuingStrategySizeCallback<T>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6610,
          "name": "CountQueuingStrategy",
          "generics": [],
          "doc": "This Streams API interface provides a built-in byte length queuing strategy\nthat can be used when constructing streams.",
          "heritage": [
            [
              {
                "ref": "QueuingStrategy",
                "targs": [],
                "isNullable": false,
                "_": 6610,
                "source": " QueuingStrategy"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6611,
              "source": "\n  highWaterMark: number;",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6611,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6612,
              "source": "\n  size(chunk: any): 1;",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6612,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "1",
                "isNullable": false,
                "_": 6612,
                "source": " 1"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline26",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "IInline25",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6618,
              "source": " highWaterMark: number",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6618,
                "source": " number"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline25",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6618,
              "source": "\n  new (options: { highWaterMark: number }): CountQueuingStrategy;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "options",
                  "type": {
                    "ref": "IInline26",
                    "targs": [],
                    "isNullable": false,
                    "_": 6618,
                    "source": " { highWaterMark: number }"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "CountQueuingStrategy",
                "targs": [],
                "isNullable": false,
                "_": 6618,
                "source": " CountQueuingStrategy"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6617,
              "source": "\n  prototype: CountQueuingStrategy;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CountQueuingStrategy",
                "targs": [],
                "isNullable": false,
                "_": 6617,
                "source": " CountQueuingStrategy"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6622,
          "name": "ByteLengthQueuingStrategy",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "QueuingStrategy",
                "targs": [
                  {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6622,
                    "source": "ArrayBufferView"
                  }
                ],
                "isNullable": false,
                "_": 6622,
                "source": " QueuingStrategy<ArrayBufferView>"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6623,
              "source": "\n  highWaterMark: number;",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6623,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6624,
              "source": "\n  size(chunk: ArrayBufferView): number;",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "ArrayBufferView",
                    "targs": [],
                    "isNullable": false,
                    "_": 6624,
                    "source": " ArrayBufferView"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6624,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline28",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "IInline27",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6630,
              "source": " highWaterMark: number",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6630,
                "source": " number"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline27",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6630,
              "source": "\n  new (options: { highWaterMark: number }): ByteLengthQueuingStrategy;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "options",
                  "type": {
                    "ref": "IInline28",
                    "targs": [],
                    "isNullable": false,
                    "_": 6630,
                    "source": " { highWaterMark: number }"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "ByteLengthQueuingStrategy",
                "targs": [],
                "isNullable": false,
                "_": 6630,
                "source": " ByteLengthQueuingStrategy"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6629,
              "source": "\n  prototype: ByteLengthQueuingStrategy;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ByteLengthQueuingStrategy",
                "targs": [],
                "isNullable": false,
                "_": 6629,
                "source": " ByteLengthQueuingStrategy"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline29",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "ReadableStream",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6642,
              "source": " mode: \"byob\"",
              "name": "mode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "\"byob\"",
                "isNullable": false,
                "_": 6642,
                "source": " \"byob\""
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline30",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "ReadableStream",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6643,
              "source": " mode?: undefined",
              "name": "mode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6643,
                "source": " undefined"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline31",
          "generics": [
            {
              "name": "R",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6639,
                "source": " any"
              },
              "_": 6639,
              "source": "R = any"
            },
            {
              "name": "T",
              "_": 6644,
              "source": "T"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "ReadableStream",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6645,
              "source": "\n    writable: WritableStream<R>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6645,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6645,
                "source": " WritableStream<R>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6646,
              "source": "\n    readable: ReadableStream<T>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6646,
                    "source": "T"
                  }
                ],
                "isNullable": false,
                "_": 6646,
                "source": " ReadableStream<T>"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline32",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "ReadableStream",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6651,
              "source": "\n    preventCancel?: boolean;",
              "name": "preventCancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6651,
                "source": " boolean"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6639,
          "name": "ReadableStream",
          "generics": [
            {
              "name": "R",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6639,
                "source": " any"
              },
              "_": 6639,
              "source": "R = any"
            }
          ],
          "doc": "This Streams API interface represents a readable stream of byte data. The\nFetch API offers a concrete instance of a ReadableStream through the body\nproperty of a Response object.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6640,
              "source": "\n  readonly locked: boolean;",
              "name": "locked",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6640,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6641,
              "source": "\n  cancel(reason?: any): Promise<void>;",
              "name": "cancel",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6641,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6641,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6641,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6642,
              "source": "\n  getReader(options: { mode: \"byob\" }): ReadableStreamBYOBReader;",
              "name": "getReader",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "options",
                  "type": {
                    "ref": "IInline29",
                    "targs": [],
                    "isNullable": false,
                    "_": 6642,
                    "source": " { mode: \"byob\" }"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "ReadableStreamBYOBReader",
                "targs": [],
                "isNullable": false,
                "_": 6642,
                "source": " ReadableStreamBYOBReader"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6643,
              "source": "\n  getReader(options?: { mode?: undefined }): ReadableStreamDefaultReader<R>;",
              "name": "getReader",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "options",
                  "type": {
                    "ref": "IInline30",
                    "targs": [],
                    "isNullable": false,
                    "_": 6643,
                    "source": " { mode?: undefined }"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "ReadableStreamDefaultReader",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6643,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6643,
                "source": " ReadableStreamDefaultReader<R>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6644,
              "source": "\n  pipeThrough<T>(transform: {\n    writable: WritableStream<R>;\n    readable: ReadableStream<T>;\n  }, options?: PipeOptions): ReadableStream<T>;",
              "name": "pipeThrough",
              "generics": [
                {
                  "name": "T",
                  "_": 6644,
                  "source": "T"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "transform",
                  "type": {
                    "ref": "IInline31",
                    "targs": [
                      {
                        "core": "any",
                        "isNullable": false,
                        "_": 6639,
                        "source": " any"
                      }
                    ],
                    "isNullable": false,
                    "_": 6644,
                    "source": " {\n    writable: WritableStream<R>;\n    readable: ReadableStream<T>;\n  }"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PipeOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6647,
                    "source": " PipeOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6647,
                    "source": "T"
                  }
                ],
                "isNullable": false,
                "_": 6647,
                "source": " ReadableStream<T>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6648,
              "source": "\n  pipeTo(dest: WritableStream<R>, options?: PipeOptions): Promise<void>;",
              "name": "pipeTo",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "dest",
                  "type": {
                    "ref": "WritableStream",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6648,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6648,
                    "source": " WritableStream<R>"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PipeOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6648,
                    "source": " PipeOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6648,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6648,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6649,
              "source": "\n  tee(): [ReadableStream<R>, ReadableStream<R>];",
              "name": "tee",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "tuple": [
                  {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6649,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6649,
                    "source": "ReadableStream<R>"
                  },
                  {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6649,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6649,
                    "source": " ReadableStream<R>"
                  }
                ],
                "isNullable": false,
                "_": 6649,
                "source": " [ReadableStream<R>, ReadableStream<R>]"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6650,
              "source": "\n  [Symbol.asyncIterator](options?: {\n    preventCancel?: boolean;\n  }): AsyncIterableIterator<R>;",
              "name": "[Symbol.asyncIterator]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "options",
                  "type": {
                    "ref": "IInline32",
                    "targs": [],
                    "isNullable": false,
                    "_": 6650,
                    "source": " {\n    preventCancel?: boolean;\n  }"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "AsyncIterableIterator",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6652,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6652,
                "source": " AsyncIterableIterator<R>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline34",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "parent": "IInline33",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6660,
              "source": " highWaterMark?: number;",
              "name": "highWaterMark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 6660,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6660,
              "source": " size?: undefined",
              "name": "size",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6660,
                "source": " undefined"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline33",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6658,
              "source": "\n  new (\n    underlyingSource: UnderlyingByteSource,\n    strategy?: { highWaterMark?: number; size?: undefined },\n  ): ReadableStream<Uint8Array>;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "underlyingSource",
                  "type": {
                    "ref": "UnderlyingByteSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 6659,
                    "source": " UnderlyingByteSource"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "strategy",
                  "type": {
                    "ref": "IInline34",
                    "targs": [],
                    "isNullable": false,
                    "_": 6660,
                    "source": " { highWaterMark?: number; size?: undefined }"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6661,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6661,
                "source": " ReadableStream<Uint8Array>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6662,
              "source": "\n  new <R = any>(\n    underlyingSource?: UnderlyingSource<R>,\n    strategy?: QueuingStrategy<R>,\n  ): ReadableStream<R>;",
              "name": "__new",
              "generics": [
                {
                  "name": "R",
                  "default": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6662,
                    "source": " any"
                  },
                  "_": 6662,
                  "source": "R = any"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "underlyingSource",
                  "type": {
                    "ref": "UnderlyingSource",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6663,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6663,
                    "source": " UnderlyingSource<R>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "strategy",
                  "type": {
                    "ref": "QueuingStrategy",
                    "targs": [
                      {
                        "ref": "R",
                        "targs": [],
                        "isNullable": false,
                        "_": 6664,
                        "source": "R"
                      }
                    ],
                    "isNullable": false,
                    "_": 6664,
                    "source": " QueuingStrategy<R>"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "R",
                    "targs": [],
                    "isNullable": false,
                    "_": 6665,
                    "source": "R"
                  }
                ],
                "isNullable": false,
                "_": 6665,
                "source": " ReadableStream<R>"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6657,
              "source": "\n  prototype: ReadableStream;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [],
                "isNullable": false,
                "_": 6657,
                "source": " ReadableStream"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6669,
          "name": "WritableStreamDefaultControllerCloseCallback",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6670,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6670,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6670,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6670,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6670,
              "source": "\n  (): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6674,
          "name": "WritableStreamDefaultControllerStartCallback",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "controller",
                  "type": {
                    "ref": "WritableStreamDefaultController",
                    "targs": [],
                    "isNullable": false,
                    "_": 6675,
                    "source": " WritableStreamDefaultController"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6675,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6675,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6675,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6675,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6675,
              "source": "\n  (controller: WritableStreamDefaultController): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6679,
          "name": "WritableStreamDefaultControllerWriteCallback",
          "generics": [
            {
              "name": "W",
              "_": 6679,
              "source": "W"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "W",
                    "targs": [],
                    "isNullable": false,
                    "_": 6680,
                    "source": " W"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "controller",
                  "type": {
                    "ref": "WritableStreamDefaultController",
                    "targs": [],
                    "isNullable": false,
                    "_": 6680,
                    "source": " WritableStreamDefaultController"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6681,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6683,
                        "source": "\n      void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6682,
                    "source": " PromiseLike<\n      void\n    >"
                  }
                ],
                "isNullable": false,
                "_": 6681,
                "source": "\n    | void\n    | PromiseLike<\n      void\n    >"
              },
              "generics": [],
              "doc": "",
              "_": 6680,
              "source": "\n  (chunk: W, controller: WritableStreamDefaultController):\n    | void\n    | PromiseLike<\n      void\n    >;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6688,
          "name": "WritableStreamErrorCallback",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6689,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6689,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6689,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6689,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6689,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6689,
              "source": "\n  (reason: any): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6698,
          "name": "WritableStream",
          "generics": [
            {
              "name": "W",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6698,
                "source": " any"
              },
              "_": 6698,
              "source": "W = any"
            }
          ],
          "doc": "This Streams API interface provides a standard abstraction for writing\nstreaming data to a destination, known as a sink. This object comes with\nbuilt-in backpressure and queuing.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6699,
              "source": "\n  readonly locked: boolean;",
              "name": "locked",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 6699,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6700,
              "source": "\n  abort(reason?: any): Promise<void>;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6700,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6700,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6700,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6701,
              "source": "\n  close(): Promise<void>;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6701,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6701,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6702,
              "source": "\n  getWriter(): WritableStreamDefaultWriter<W>;",
              "name": "getWriter",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "WritableStreamDefaultWriter",
                "targs": [
                  {
                    "ref": "W",
                    "targs": [],
                    "isNullable": false,
                    "_": 6702,
                    "source": "W"
                  }
                ],
                "isNullable": false,
                "_": 6702,
                "source": " WritableStreamDefaultWriter<W>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline35",
          "generics": [
            {
              "name": "W",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6708,
                "source": " any"
              },
              "_": 6708,
              "source": "W = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6708,
              "source": "\n  new <W = any>(\n    underlyingSink?: UnderlyingSink<W>,\n    strategy?: QueuingStrategy<W>,\n  ): WritableStream<W>;",
              "name": "__new",
              "generics": [
                {
                  "name": "W",
                  "default": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6708,
                    "source": " any"
                  },
                  "_": 6708,
                  "source": "W = any"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "underlyingSink",
                  "type": {
                    "ref": "UnderlyingSink",
                    "targs": [
                      {
                        "ref": "W",
                        "targs": [],
                        "isNullable": false,
                        "_": 6709,
                        "source": "W"
                      }
                    ],
                    "isNullable": false,
                    "_": 6709,
                    "source": " UnderlyingSink<W>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "strategy",
                  "type": {
                    "ref": "QueuingStrategy",
                    "targs": [
                      {
                        "ref": "W",
                        "targs": [],
                        "isNullable": false,
                        "_": 6710,
                        "source": "W"
                      }
                    ],
                    "isNullable": false,
                    "_": 6710,
                    "source": " QueuingStrategy<W>"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "W",
                    "targs": [],
                    "isNullable": false,
                    "_": 6711,
                    "source": "W"
                  }
                ],
                "isNullable": false,
                "_": 6711,
                "source": " WritableStream<W>"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6707,
              "source": "\n  prototype: WritableStream;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [],
                "isNullable": false,
                "_": 6707,
                "source": " WritableStream"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6721,
          "name": "WritableStreamDefaultController",
          "generics": [],
          "doc": "This Streams API interface represents a controller allowing control of a\nWritableStream's state. When constructing a WritableStream, the underlying\nsink is given a corresponding WritableStreamDefaultController instance to\nmanipulate.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6722,
              "source": "\n  signal: AbortSignal;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 6722,
                "source": " AbortSignal"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6723,
              "source": "\n  error(error?: any): void;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "error",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6723,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6723,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6736,
          "name": "WritableStreamDefaultWriter",
          "generics": [
            {
              "name": "W",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6736,
                "source": " any"
              },
              "_": 6736,
              "source": "W = any"
            }
          ],
          "doc": "This Streams API interface is the object returned by\nWritableStream.getWriter() and once created locks the < writer to the\nWritableStream ensuring that no other streams can write to the underlying\nsink.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6737,
              "source": "\n  readonly closed: Promise<void>;",
              "name": "closed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6737,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6737,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6738,
              "source": "\n  readonly desiredSize: number | null;",
              "name": "desiredSize",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 6738,
                    "source": " number"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6738,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6738,
                "source": " number | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6739,
              "source": "\n  readonly ready: Promise<void>;",
              "name": "ready",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6739,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6739,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6740,
              "source": "\n  abort(reason?: any): Promise<void>;",
              "name": "abort",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6740,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6740,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6740,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6741,
              "source": "\n  close(): Promise<void>;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6741,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6741,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6742,
              "source": "\n  releaseLock(): void;",
              "name": "releaseLock",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6742,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6743,
              "source": "\n  write(chunk: W): Promise<void>;",
              "name": "write",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "W",
                    "targs": [],
                    "isNullable": false,
                    "_": 6743,
                    "source": " W"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6743,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 6743,
                "source": " Promise<void>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline36",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6749,
              "source": "\n  new (): WritableStreamDefaultWriter;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "WritableStreamDefaultWriter",
                "targs": [],
                "isNullable": false,
                "_": 6749,
                "source": " WritableStreamDefaultWriter"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6748,
              "source": "\n  prototype: WritableStreamDefaultWriter;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "WritableStreamDefaultWriter",
                "targs": [],
                "isNullable": false,
                "_": 6748,
                "source": " WritableStreamDefaultWriter"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6753,
          "name": "TransformStream",
          "generics": [
            {
              "name": "I",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6753,
                "source": " any"
              },
              "_": 6753,
              "source": "I = any"
            },
            {
              "name": "O",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6753,
                "source": " any"
              },
              "_": 6753,
              "source": " O = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6754,
              "source": "\n  readonly readable: ReadableStream<O>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6754,
                    "source": "O"
                  }
                ],
                "isNullable": false,
                "_": 6754,
                "source": " ReadableStream<O>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6755,
              "source": "\n  readonly writable: WritableStream<I>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "I",
                    "targs": [],
                    "isNullable": false,
                    "_": 6755,
                    "source": "I"
                  }
                ],
                "isNullable": false,
                "_": 6755,
                "source": " WritableStream<I>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline37",
          "generics": [
            {
              "name": "I",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6761,
                "source": " any"
              },
              "_": 6761,
              "source": "I = any"
            },
            {
              "name": "O",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6761,
                "source": " any"
              },
              "_": 6761,
              "source": " O = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6761,
              "source": "\n  new <I = any, O = any>(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>,\n  ): TransformStream<I, O>;",
              "name": "__new",
              "generics": [
                {
                  "name": "I",
                  "default": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6761,
                    "source": " any"
                  },
                  "_": 6761,
                  "source": "I = any"
                },
                {
                  "name": "O",
                  "default": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6761,
                    "source": " any"
                  },
                  "_": 6761,
                  "source": " O = any"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "transformer",
                  "type": {
                    "ref": "Transformer",
                    "targs": [
                      {
                        "ref": "I",
                        "targs": [],
                        "isNullable": false,
                        "_": 6762,
                        "source": "I"
                      },
                      {
                        "ref": "O",
                        "targs": [],
                        "isNullable": false,
                        "_": 6762,
                        "source": " O"
                      }
                    ],
                    "isNullable": false,
                    "_": 6762,
                    "source": " Transformer<I, O>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "writableStrategy",
                  "type": {
                    "ref": "QueuingStrategy",
                    "targs": [
                      {
                        "ref": "I",
                        "targs": [],
                        "isNullable": false,
                        "_": 6763,
                        "source": "I"
                      }
                    ],
                    "isNullable": false,
                    "_": 6763,
                    "source": " QueuingStrategy<I>"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "readableStrategy",
                  "type": {
                    "ref": "QueuingStrategy",
                    "targs": [
                      {
                        "ref": "O",
                        "targs": [],
                        "isNullable": false,
                        "_": 6764,
                        "source": "O"
                      }
                    ],
                    "isNullable": false,
                    "_": 6764,
                    "source": " QueuingStrategy<O>"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "TransformStream",
                "targs": [
                  {
                    "ref": "I",
                    "targs": [],
                    "isNullable": false,
                    "_": 6765,
                    "source": "I"
                  },
                  {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6765,
                    "source": " O"
                  }
                ],
                "isNullable": false,
                "_": 6765,
                "source": " TransformStream<I, O>"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6760,
              "source": "\n  prototype: TransformStream;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TransformStream",
                "targs": [],
                "isNullable": false,
                "_": 6760,
                "source": " TransformStream"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 6769,
          "name": "TransformStreamDefaultController",
          "generics": [
            {
              "name": "O",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6769,
                "source": " any"
              },
              "_": 6769,
              "source": "O = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6770,
              "source": "\n  readonly desiredSize: number | null;",
              "name": "desiredSize",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "number",
                    "isNullable": false,
                    "_": 6770,
                    "source": " number"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6770,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6770,
                "source": " number | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6771,
              "source": "\n  enqueue(chunk: O): void;",
              "name": "enqueue",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6771,
                    "source": " O"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6771,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6772,
              "source": "\n  error(reason?: any): void;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "reason",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6772,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6772,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 6773,
              "source": "\n  terminate(): void;",
              "name": "terminate",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6773,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6780,
          "name": "Transformer",
          "generics": [
            {
              "name": "I",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6780,
                "source": " any"
              },
              "_": 6780,
              "source": "I = any"
            },
            {
              "name": "O",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6780,
                "source": " any"
              },
              "_": 6780,
              "source": " O = any"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6781,
              "source": "\n  flush?: TransformStreamDefaultControllerCallback<O>;",
              "name": "flush",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TransformStreamDefaultControllerCallback",
                "targs": [
                  {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6781,
                    "source": "O"
                  }
                ],
                "isNullable": false,
                "_": 6781,
                "source": " TransformStreamDefaultControllerCallback<O>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6782,
              "source": "\n  readableType?: undefined;",
              "name": "readableType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6782,
                "source": " undefined"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6783,
              "source": "\n  start?: TransformStreamDefaultControllerCallback<O>;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TransformStreamDefaultControllerCallback",
                "targs": [
                  {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6783,
                    "source": "O"
                  }
                ],
                "isNullable": false,
                "_": 6783,
                "source": " TransformStreamDefaultControllerCallback<O>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6784,
              "source": "\n  transform?: TransformStreamDefaultControllerTransformCallback<I, O>;",
              "name": "transform",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "TransformStreamDefaultControllerTransformCallback",
                "targs": [
                  {
                    "ref": "I",
                    "targs": [],
                    "isNullable": false,
                    "_": 6784,
                    "source": "I"
                  },
                  {
                    "ref": "O",
                    "targs": [],
                    "isNullable": false,
                    "_": 6784,
                    "source": " O"
                  }
                ],
                "isNullable": false,
                "_": 6784,
                "source": " TransformStreamDefaultControllerTransformCallback<I, O>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6785,
              "source": "\n  writableType?: undefined;",
              "name": "writableType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "undefined",
                "isNullable": false,
                "_": 6785,
                "source": " undefined"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6789,
          "name": "TransformStreamDefaultControllerCallback",
          "generics": [
            {
              "name": "O",
              "_": 6789,
              "source": "O"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "controller",
                  "type": {
                    "ref": "TransformStreamDefaultController",
                    "targs": [
                      {
                        "ref": "O",
                        "targs": [],
                        "isNullable": false,
                        "_": 6790,
                        "source": "O"
                      }
                    ],
                    "isNullable": false,
                    "_": 6790,
                    "source": " TransformStreamDefaultController<O>"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6790,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6790,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6790,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6790,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6790,
              "source": "\n  (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6794,
          "name": "TransformStreamDefaultControllerTransformCallback",
          "generics": [
            {
              "name": "I",
              "_": 6794,
              "source": "I"
            },
            {
              "name": "O",
              "_": 6794,
              "source": " O"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [
                {
                  "name": "chunk",
                  "type": {
                    "ref": "I",
                    "targs": [],
                    "isNullable": false,
                    "_": 6796,
                    "source": " I"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "controller",
                  "type": {
                    "ref": "TransformStreamDefaultController",
                    "targs": [
                      {
                        "ref": "O",
                        "targs": [],
                        "isNullable": false,
                        "_": 6797,
                        "source": "O"
                      }
                    ],
                    "isNullable": false,
                    "_": 6797,
                    "source": " TransformStreamDefaultController<O>"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 6798,
                    "source": " void"
                  },
                  {
                    "ref": "PromiseLike",
                    "targs": [
                      {
                        "core": "void",
                        "isNullable": false,
                        "_": 6798,
                        "source": "void"
                      }
                    ],
                    "isNullable": false,
                    "_": 6798,
                    "source": " PromiseLike<void>"
                  }
                ],
                "isNullable": false,
                "_": 6798,
                "source": " void | PromiseLike<void>"
              },
              "generics": [],
              "doc": "",
              "_": 6795,
              "source": "\n  (\n    chunk: I,\n    controller: TransformStreamDefaultController<O>,\n  ): void | PromiseLike<void>;"
            }
          ],
          "isClass": false
        },
        {
          "_": 6802,
          "name": "MessageEventInit",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6802,
                "source": " any"
              },
              "_": 6802,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 6802,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6803,
              "source": "\n  data?: T;",
              "name": "data",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 6803,
                "source": " T"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6804,
              "source": "\n  origin?: string;",
              "name": "origin",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6804,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6805,
              "source": "\n  lastEventId?: string;",
              "name": "lastEventId",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6805,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6809,
          "name": "MessageEvent",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 6809,
                "source": " any"
              },
              "_": 6809,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 6809,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6822,
              "source": "\n  constructor(type: string, eventInitDict?: MessageEventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6822,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "MessageEventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 6822,
                    "source": " MessageEventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Returns the data of the message.",
              "isMethod": false,
              "_": 6813,
              "source": "\n  /**\n   * Returns the data of the message.\n   */\n  readonly data: T;",
              "name": "data",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 6813,
                "source": " T"
              }
            },
            {
              "doc": "Returns the last event ID string, for server-sent events.",
              "isMethod": false,
              "_": 6817,
              "source": "\n  /**\n   * Returns the last event ID string, for server-sent events.\n   */\n  readonly lastEventId: string;",
              "name": "lastEventId",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6817,
                "source": " string"
              }
            },
            {
              "doc": "Returns transferred ports.",
              "isMethod": false,
              "_": 6821,
              "source": "\n  /**\n   * Returns transferred ports.\n   */\n  readonly ports: ReadonlyArray<MessagePort>;",
              "name": "ports",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadonlyArray",
                "targs": [
                  {
                    "ref": "MessagePort",
                    "targs": [],
                    "isNullable": false,
                    "_": 6821,
                    "source": "MessagePort"
                  }
                ],
                "isNullable": false,
                "_": 6821,
                "source": " ReadonlyArray<MessagePort>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6838,
          "name": "StructuredSerializeOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6839,
              "source": "\n  transfer?: Transferable[];",
              "name": "transfer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "array",
                "targs": [
                  {
                    "ref": "Transferable",
                    "targs": [],
                    "isNullable": false,
                    "_": 6839,
                    "source": " Transferable"
                  }
                ],
                "isNullable": false,
                "_": 6839,
                "source": " Transferable[]"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6848,
          "name": "MessageChannel",
          "generics": [],
          "doc": "The MessageChannel interface of the Channel Messaging API allows us to\ncreate a new message channel and send data through it via its two MessagePort\nproperties.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6849,
              "source": "\n  constructor();",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": []
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6850,
              "source": "\n  readonly port1: MessagePort;",
              "name": "port1",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "MessagePort",
                "targs": [],
                "isNullable": false,
                "_": 6850,
                "source": " MessagePort"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6851,
              "source": "\n  readonly port2: MessagePort;",
              "name": "port2",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "MessagePort",
                "targs": [],
                "isNullable": false,
                "_": 6851,
                "source": " MessagePort"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6855,
          "name": "MessagePortEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6856,
              "source": "\n  \"message\": MessageEvent;",
              "name": "\"message\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 6856,
                "source": " MessageEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6857,
              "source": "\n  \"messageerror\": MessageEvent;",
              "name": "\"messageerror\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 6857,
                "source": " MessageEvent"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 6866,
          "name": "MessagePort",
          "generics": [],
          "doc": "The MessagePort interface of the Channel Messaging API represents one of the\ntwo ports of a MessageChannel, allowing messages to be sent from one port and\nlistening out for them arriving at the other.",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 6866,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6867,
              "source": "\n  onmessage: ((this: MessagePort, ev: MessageEvent) => any) | null;",
              "name": "onmessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6867,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "MessagePort",
                          "targs": [],
                          "isNullable": false,
                          "_": 6867,
                          "source": " MessagePort"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "MessageEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 6867,
                          "source": " MessageEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6867,
                    "source": " ((this: MessagePort, ev: MessageEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6867,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6867,
                "source": " ((this: MessagePort, ev: MessageEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6868,
              "source": "\n  onmessageerror: ((this: MessagePort, ev: MessageEvent) => any) | null;",
              "name": "onmessageerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6868,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "MessagePort",
                          "targs": [],
                          "isNullable": false,
                          "_": 6868,
                          "source": " MessagePort"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "MessageEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 6868,
                          "source": " MessageEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6868,
                    "source": " ((this: MessagePort, ev: MessageEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 6868,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 6868,
                "source": " ((this: MessagePort, ev: MessageEvent) => any) | null"
              }
            },
            {
              "doc": "Disconnects the port, so that it is no longer active.",
              "isMethod": true,
              "_": 6872,
              "source": "\n  /**\n   * Disconnects the port, so that it is no longer active.\n   */\n  close(): void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6872,
                "source": " void"
              }
            },
            {
              "doc": "Posts a message through the channel. Objects listed in transfer are\n transferred, not just cloned, meaning that they are no longer usable on the\n sending side.\n\n Throws a \"DataCloneError\" DOMException if transfer contains duplicate\n objects or port, or if message could not be cloned.",
              "isMethod": true,
              "_": 6881,
              "source": "\n  /**\n   * Posts a message through the channel. Objects listed in transfer are\n   * transferred, not just cloned, meaning that they are no longer usable on the\n   * sending side.\n   *\n   * Throws a \"DataCloneError\" DOMException if transfer contains duplicate\n   * objects or port, or if message could not be cloned.\n   */\n  postMessage(message: any, transfer: Transferable[]): void;",
              "name": "postMessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6881,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "transfer",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "Transferable",
                        "targs": [],
                        "isNullable": false,
                        "_": 6881,
                        "source": " Transferable"
                      }
                    ],
                    "isNullable": false,
                    "_": 6881,
                    "source": " Transferable[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6881,
                "source": " void"
              }
            },
            {
              "doc": "Posts a message through the channel. Objects listed in transfer are\ntransferred, not just cloned, meaning that they are no longer usable on the\nsending side.\n\nThrows a \"DataCloneError\" DOMException if transfer contains duplicate\nobjects or port, or if message could not be cloned.",
              "isMethod": true,
              "_": 6882,
              "source": "\n  postMessage(message: any, options?: StructuredSerializeOptions): void;",
              "name": "postMessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 6882,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "StructuredSerializeOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 6882,
                    "source": " StructuredSerializeOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6882,
                "source": " void"
              }
            },
            {
              "doc": "Begins dispatching messages received on the port. This is implicitly called\n when assigning a value to `this.onmessage`.",
              "isMethod": true,
              "_": 6887,
              "source": "\n  /**\n   * Begins dispatching messages received on the port. This is implicitly called\n   * when assigning a value to `this.onmessage`.\n   */\n  start(): void;",
              "name": "start",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6887,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6888,
              "source": "\n  addEventListener<K extends keyof MessagePortEventMap>(\n    type: K,\n    listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "MessagePortEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6888,
                      "source": " MessagePortEventMap"
                    },
                    "isNullable": false,
                    "_": 6888,
                    "source": " keyof MessagePortEventMap"
                  },
                  "_": 6888,
                  "source": "K extends keyof MessagePortEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6889,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6890,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "MessagePort",
                          "targs": [],
                          "isNullable": false,
                          "_": 6890,
                          "source": " MessagePort"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6890,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "MessagePortEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6890,
                            "source": " MessagePortEventMap"
                          },
                          "isNullable": false,
                          "_": 6890,
                          "source": " MessagePortEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6890,
                    "source": " (this: MessagePort, ev: MessagePortEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6891,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6891,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6891,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6892,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 6893,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6894,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6895,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6896,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6896,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6896,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6897,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6898,
              "source": "\n  removeEventListener<K extends keyof MessagePortEventMap>(\n    type: K,\n    listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "MessagePortEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 6898,
                      "source": " MessagePortEventMap"
                    },
                    "isNullable": false,
                    "_": 6898,
                    "source": " keyof MessagePortEventMap"
                  },
                  "_": 6898,
                  "source": "K extends keyof MessagePortEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 6899,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 6900,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "MessagePort",
                          "targs": [],
                          "isNullable": false,
                          "_": 6900,
                          "source": " MessagePort"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 6900,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "MessagePortEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 6900,
                            "source": " MessagePortEventMap"
                          },
                          "isNullable": false,
                          "_": 6900,
                          "source": " MessagePortEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 6900,
                    "source": " (this: MessagePort, ev: MessagePortEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6901,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6901,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6901,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6902,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 6903,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6904,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 6905,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 6906,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 6906,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 6906,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 6907,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6954,
          "name": "CompressionStream",
          "generics": [],
          "doc": "An API for compressing a stream of data.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6962,
              "source": "\n  /**\n   * Creates a new `CompressionStream` object which compresses a stream of\n   * data.\n   *\n   * Throws a `TypeError` if the format passed to the constructor is not\n   * supported.\n   */\n  constructor(format: string);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6962,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6964,
              "source": "\n\n  readonly readable: ReadableStream<Uint8Array>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6964,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6964,
                "source": " ReadableStream<Uint8Array>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6965,
              "source": "\n  readonly writable: WritableStream<Uint8Array>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6965,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6965,
                "source": " WritableStream<Uint8Array>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 6983,
          "name": "DecompressionStream",
          "generics": [],
          "doc": "An API for decompressing a stream of data.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 6991,
              "source": "\n  /**\n   * Creates a new `DecompressionStream` object which decompresses a stream of\n   * data.\n   *\n   * Throws a `TypeError` if the format passed to the constructor is not\n   * supported.\n   */\n  constructor(format: string);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 6991,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 6993,
              "source": "\n\n  readonly readable: ReadableStream<Uint8Array>;",
              "name": "readable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6993,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6993,
                "source": " ReadableStream<Uint8Array>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 6994,
              "source": "\n  readonly writable: WritableStream<Uint8Array>;",
              "name": "writable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "WritableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 6994,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 6994,
                "source": " WritableStream<Uint8Array>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7026,
          "name": "DomIterable",
          "generics": [
            {
              "name": "K",
              "_": 7026,
              "source": "K"
            },
            {
              "name": "V",
              "_": 7026,
              "source": " V"
            }
          ],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7027,
              "source": "\n  keys(): IterableIterator<K>;",
              "name": "keys",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 7027,
                    "source": "K"
                  }
                ],
                "isNullable": false,
                "_": 7027,
                "source": " IterableIterator<K>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7028,
              "source": "\n  values(): IterableIterator<V>;",
              "name": "values",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "ref": "V",
                    "targs": [],
                    "isNullable": false,
                    "_": 7028,
                    "source": "V"
                  }
                ],
                "isNullable": false,
                "_": 7028,
                "source": " IterableIterator<V>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7029,
              "source": "\n  entries(): IterableIterator<[K, V]>;",
              "name": "entries",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "ref": "K",
                        "targs": [],
                        "isNullable": false,
                        "_": 7029,
                        "source": "K"
                      },
                      {
                        "ref": "V",
                        "targs": [],
                        "isNullable": false,
                        "_": 7029,
                        "source": " V"
                      }
                    ],
                    "isNullable": false,
                    "_": 7029,
                    "source": "[K, V]"
                  }
                ],
                "isNullable": false,
                "_": 7029,
                "source": " IterableIterator<[K, V]>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7030,
              "source": "\n  [Symbol.iterator](): IterableIterator<[K, V]>;",
              "name": "[Symbol.iterator]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "ref": "K",
                        "targs": [],
                        "isNullable": false,
                        "_": 7030,
                        "source": "K"
                      },
                      {
                        "ref": "V",
                        "targs": [],
                        "isNullable": false,
                        "_": 7030,
                        "source": " V"
                      }
                    ],
                    "isNullable": false,
                    "_": 7030,
                    "source": "[K, V]"
                  }
                ],
                "isNullable": false,
                "_": 7030,
                "source": " IterableIterator<[K, V]>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7031,
              "source": "\n  forEach(\n    callback: (value: V, key: K, parent: this) => void,\n    thisArg?: any,\n  ): void;",
              "name": "forEach",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "callback",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7032,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "V",
                          "targs": [],
                          "isNullable": false,
                          "_": 7032,
                          "source": " V"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "key",
                        "type": {
                          "ref": "K",
                          "targs": [],
                          "isNullable": false,
                          "_": 7032,
                          "source": " K"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "core": "this",
                          "isNullable": false,
                          "_": 7032,
                          "source": " this"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7032,
                    "source": " (value: V, key: K, parent: this) => void"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "thisArg",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 7033,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7034,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7047,
          "name": "FormData",
          "generics": [],
          "doc": "Provides a way to easily construct a set of key/value pairs representing\nform fields and their values, which can then be easily sent using the\nXMLHttpRequest.send() method. It uses the same format a form would use if the\nencoding type were set to \"multipart/form-data\".",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7048,
              "source": "\n  append(name: string, value: string | Blob, fileName?: string): void;",
              "name": "append",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7048,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7048,
                        "source": " string"
                      },
                      {
                        "ref": "Blob",
                        "targs": [],
                        "isNullable": false,
                        "_": 7048,
                        "source": " Blob"
                      }
                    ],
                    "isNullable": false,
                    "_": 7048,
                    "source": " string | Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "fileName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7048,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7048,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7049,
              "source": "\n  delete(name: string): void;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7049,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7049,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7050,
              "source": "\n  get(name: string): FormDataEntryValue | null;",
              "name": "get",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7050,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "ref": "FormDataEntryValue",
                    "targs": [],
                    "isNullable": false,
                    "_": 7050,
                    "source": " FormDataEntryValue"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7050,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7050,
                "source": " FormDataEntryValue | null"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7051,
              "source": "\n  getAll(name: string): FormDataEntryValue[];",
              "name": "getAll",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7051,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "array",
                "targs": [
                  {
                    "ref": "FormDataEntryValue",
                    "targs": [],
                    "isNullable": false,
                    "_": 7051,
                    "source": " FormDataEntryValue"
                  }
                ],
                "isNullable": false,
                "_": 7051,
                "source": " FormDataEntryValue[]"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7052,
              "source": "\n  has(name: string): boolean;",
              "name": "has",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7052,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7052,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7053,
              "source": "\n  set(name: string, value: string | Blob, fileName?: string): void;",
              "name": "set",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7053,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7053,
                        "source": " string"
                      },
                      {
                        "ref": "Blob",
                        "targs": [],
                        "isNullable": false,
                        "_": 7053,
                        "source": " Blob"
                      }
                    ],
                    "isNullable": false,
                    "_": 7053,
                    "source": " string | Blob"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "fileName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7053,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7053,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7054,
              "source": "\n  keys(): IterableIterator<string>;",
              "name": "keys",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7054,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7054,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7055,
              "source": "\n  values(): IterableIterator<string>;",
              "name": "values",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7055,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7055,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7056,
              "source": "\n  entries(): IterableIterator<[string, FormDataEntryValue]>;",
              "name": "entries",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7056,
                        "source": "string"
                      },
                      {
                        "ref": "FormDataEntryValue",
                        "targs": [],
                        "isNullable": false,
                        "_": 7056,
                        "source": " FormDataEntryValue"
                      }
                    ],
                    "isNullable": false,
                    "_": 7056,
                    "source": "[string, FormDataEntryValue]"
                  }
                ],
                "isNullable": false,
                "_": 7056,
                "source": " IterableIterator<[string, FormDataEntryValue]>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7057,
              "source": "\n  [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;",
              "name": "[Symbol.iterator]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7057,
                        "source": "string"
                      },
                      {
                        "ref": "FormDataEntryValue",
                        "targs": [],
                        "isNullable": false,
                        "_": 7057,
                        "source": " FormDataEntryValue"
                      }
                    ],
                    "isNullable": false,
                    "_": 7057,
                    "source": "[string, FormDataEntryValue]"
                  }
                ],
                "isNullable": false,
                "_": 7057,
                "source": " IterableIterator<[string, FormDataEntryValue]>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7058,
              "source": "\n  forEach(\n    callback: (value: FormDataEntryValue, key: string, parent: this) => void,\n    thisArg?: any,\n  ): void;",
              "name": "forEach",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "callback",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7059,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "ref": "FormDataEntryValue",
                          "targs": [],
                          "isNullable": false,
                          "_": 7059,
                          "source": " FormDataEntryValue"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7059,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "core": "this",
                          "isNullable": false,
                          "_": 7059,
                          "source": " this"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7059,
                    "source": " (value: FormDataEntryValue, key: string, parent: this) => void"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "thisArg",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 7060,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7061,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline38",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7067,
              "source": "\n  new (): FormData;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "FormData",
                "targs": [],
                "isNullable": false,
                "_": 7067,
                "source": " FormData"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7066,
              "source": "\n  prototype: FormData;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "FormData",
                "targs": [],
                "isNullable": false,
                "_": 7066,
                "source": " FormData"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 7071,
          "name": "Body",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "A simple getter used to expose a `ReadableStream` of the body contents.",
              "isMethod": false,
              "_": 7073,
              "source": "\n  /** A simple getter used to expose a `ReadableStream` of the body contents. */\n  readonly body: ReadableStream<Uint8Array> | null;",
              "name": "body",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "Uint8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 7073,
                        "source": "Uint8Array"
                      }
                    ],
                    "isNullable": false,
                    "_": 7073,
                    "source": " ReadableStream<Uint8Array>"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7073,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7073,
                "source": " ReadableStream<Uint8Array> | null"
              }
            },
            {
              "doc": "Stores a `Boolean` that declares whether the body has been used in a\nresponse yet.",
              "isMethod": false,
              "_": 7077,
              "source": "\n  /** Stores a `Boolean` that declares whether the body has been used in a\n   * response yet.\n   */\n  readonly bodyUsed: boolean;",
              "name": "bodyUsed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7077,
                "source": " boolean"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with an `ArrayBuffer`.",
              "isMethod": true,
              "_": 7081,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with an `ArrayBuffer`.\n   */\n  arrayBuffer(): Promise<ArrayBuffer>;",
              "name": "arrayBuffer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7081,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7081,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `Blob`.",
              "isMethod": true,
              "_": 7085,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `Blob`.\n   */\n  blob(): Promise<Blob>;",
              "name": "blob",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 7085,
                    "source": "Blob"
                  }
                ],
                "isNullable": false,
                "_": 7085,
                "source": " Promise<Blob>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `FormData` object.",
              "isMethod": true,
              "_": 7089,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `FormData` object.\n   */\n  formData(): Promise<FormData>;",
              "name": "formData",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "FormData",
                    "targs": [],
                    "isNullable": false,
                    "_": 7089,
                    "source": "FormData"
                  }
                ],
                "isNullable": false,
                "_": 7089,
                "source": " Promise<FormData>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with the result of parsing the body text as JSON.",
              "isMethod": true,
              "_": 7093,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with the result of parsing the body text as JSON.\n   */\n  json(): Promise<any>;",
              "name": "json",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 7093,
                    "source": "any"
                  }
                ],
                "isNullable": false,
                "_": 7093,
                "source": " Promise<any>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `USVString` (text).",
              "isMethod": true,
              "_": 7097,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `USVString` (text).\n   */\n  text(): Promise<string>;",
              "name": "text",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7097,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7097,
                "source": " Promise<string>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7113,
          "name": "Headers",
          "generics": [],
          "doc": "This Fetch API interface allows you to perform various actions on HTTP\nrequest and response headers. These actions include retrieving, setting,\nadding to, and removing. A Headers object has an associated header list,\nwhich is initially empty and consists of zero or more name and value pairs.\nYou can add to this using methods like append() (see Examples). In all\nmethods of this interface, header names are matched by case-insensitive byte\nsequence.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Appends a new value onto an existing header inside a `Headers` object, or\nadds the header if it does not already exist.",
              "isMethod": true,
              "_": 7114,
              "source": "\n  append(name: string, value: string): void;",
              "name": "append",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7114,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7114,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7114,
                "source": " void"
              }
            },
            {
              "doc": "Deletes a header from a `Headers` object.",
              "isMethod": true,
              "_": 7115,
              "source": "\n  delete(name: string): void;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7115,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7115,
                "source": " void"
              }
            },
            {
              "doc": "Returns a `ByteString` sequence of all the values of a header within a\n`Headers` object with a given name.",
              "isMethod": true,
              "_": 7116,
              "source": "\n  get(name: string): string | null;",
              "name": "get",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7116,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7116,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7116,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7116,
                "source": " string | null"
              }
            },
            {
              "doc": "Returns a boolean stating whether a `Headers` object contains a certain\nheader.",
              "isMethod": true,
              "_": 7117,
              "source": "\n  has(name: string): boolean;",
              "name": "has",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7117,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7117,
                "source": " boolean"
              }
            },
            {
              "doc": "Sets a new value for an existing header inside a Headers object, or adds\nthe header if it does not already exist.",
              "isMethod": true,
              "_": 7118,
              "source": "\n  set(name: string, value: string): void;",
              "name": "set",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7118,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7118,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7118,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7119,
              "source": "\n  forEach(\n    callbackfn: (value: string, key: string, parent: Headers) => void,\n    thisArg?: any,\n  ): void;",
              "name": "forEach",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "callbackfn",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7120,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7120,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7120,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "ref": "Headers",
                          "targs": [],
                          "isNullable": false,
                          "_": 7120,
                          "source": " Headers"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7120,
                    "source": " (value: string, key: string, parent: Headers) => void"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "thisArg",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 7121,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7122,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7126,
          "name": "Headers",
          "generics": [],
          "doc": "This Fetch API interface allows you to perform various actions on HTTP\nrequest and response headers. These actions include retrieving, setting,\nadding to, and removing. A Headers object has an associated header list,\nwhich is initially empty and consists of zero or more name and value pairs.\nYou can add to this using methods like append() (see Examples). In all\nmethods of this interface, header names are matched by case-insensitive byte\nsequence.",
          "heritage": [
            [
              {
                "ref": "DomIterable",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7126,
                    "source": "string"
                  },
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7126,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 7126,
                "source": " DomIterable<string, string>"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7127,
              "source": "\n  constructor(init?: HeadersInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "init",
                  "type": {
                    "ref": "HeadersInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7127,
                    "source": " HeadersInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Appends a new value onto an existing header inside a `Headers` object, or\n adds the header if it does not already exist.",
              "isMethod": true,
              "_": 7132,
              "source": "\n\n  /** Appends a new value onto an existing header inside a `Headers` object, or\n   * adds the header if it does not already exist.\n   */\n  append(name: string, value: string): void;",
              "name": "append",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7132,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7132,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7132,
                "source": " void"
              }
            },
            {
              "doc": "Deletes a header from a `Headers` object.",
              "isMethod": true,
              "_": 7134,
              "source": "\n  /** Deletes a header from a `Headers` object. */\n  delete(name: string): void;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7134,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7134,
                "source": " void"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all key/value pairs\n contained in this Headers object. The both the key and value of each pairs\n are ByteString objects.",
              "isMethod": true,
              "_": 7139,
              "source": "\n  /** Returns an iterator allowing to go through all key/value pairs\n   * contained in this Headers object. The both the key and value of each pairs\n   * are ByteString objects.\n   */\n  entries(): IterableIterator<[string, string]>;",
              "name": "entries",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7139,
                        "source": "string"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7139,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 7139,
                    "source": "[string, string]"
                  }
                ],
                "isNullable": false,
                "_": 7139,
                "source": " IterableIterator<[string, string]>"
              }
            },
            {
              "doc": "Returns a `ByteString` sequence of all the values of a header within a\n `Headers` object with a given name.",
              "isMethod": true,
              "_": 7143,
              "source": "\n  /** Returns a `ByteString` sequence of all the values of a header within a\n   * `Headers` object with a given name.\n   */\n  get(name: string): string | null;",
              "name": "get",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7143,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7143,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7143,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7143,
                "source": " string | null"
              }
            },
            {
              "doc": "Returns a boolean stating whether a `Headers` object contains a certain\n header.",
              "isMethod": true,
              "_": 7147,
              "source": "\n  /** Returns a boolean stating whether a `Headers` object contains a certain\n   * header.\n   */\n  has(name: string): boolean;",
              "name": "has",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7147,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7147,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all keys contained in\n this Headers object. The keys are ByteString objects.",
              "isMethod": true,
              "_": 7151,
              "source": "\n  /** Returns an iterator allowing to go through all keys contained in\n   * this Headers object. The keys are ByteString objects.\n   */\n  keys(): IterableIterator<string>;",
              "name": "keys",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7151,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7151,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "Sets a new value for an existing header inside a Headers object, or adds\n the header if it does not already exist.",
              "isMethod": true,
              "_": 7155,
              "source": "\n  /** Sets a new value for an existing header inside a Headers object, or adds\n   * the header if it does not already exist.\n   */\n  set(name: string, value: string): void;",
              "name": "set",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7155,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7155,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7155,
                "source": " void"
              }
            },
            {
              "doc": "Returns an iterator allowing to go through all values contained in\n this Headers object. The values are ByteString objects.",
              "isMethod": true,
              "_": 7159,
              "source": "\n  /** Returns an iterator allowing to go through all values contained in\n   * this Headers object. The values are ByteString objects.\n   */\n  values(): IterableIterator<string>;",
              "name": "values",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7159,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7159,
                "source": " IterableIterator<string>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7160,
              "source": "\n  forEach(\n    callbackfn: (value: string, key: string, parent: this) => void,\n    thisArg?: any,\n  ): void;",
              "name": "forEach",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "callbackfn",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "void",
                      "isNullable": false,
                      "_": 7161,
                      "source": " void"
                    },
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7161,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 7161,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "parent",
                        "type": {
                          "core": "this",
                          "isNullable": false,
                          "_": 7161,
                          "source": " this"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7161,
                    "source": " (value: string, key: string, parent: this) => void"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "thisArg",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 7162,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7163,
                "source": " void"
              }
            },
            {
              "doc": "The Symbol.iterator well-known symbol specifies the default\n iterator for this Headers object",
              "isMethod": true,
              "_": 7167,
              "source": "\n  /** The Symbol.iterator well-known symbol specifies the default\n   * iterator for this Headers object\n   */\n  [Symbol.iterator](): IterableIterator<[string, string]>;",
              "name": "[Symbol.iterator]",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "IterableIterator",
                "targs": [
                  {
                    "tuple": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7167,
                        "source": "string"
                      },
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7167,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 7167,
                    "source": "[string, string]"
                  }
                ],
                "isNullable": false,
                "_": 7167,
                "source": " IterableIterator<[string, string]>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7227,
          "name": "RequestInit",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "A BodyInit object or null to set request's body.",
              "isMethod": false,
              "_": 7231,
              "source": "\n  /**\n   * A BodyInit object or null to set request's body.\n   */\n  body?: BodyInit | null;",
              "name": "body",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "BodyInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7231,
                    "source": " BodyInit"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7231,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7231,
                "source": " BodyInit | null"
              }
            },
            {
              "doc": "A string indicating how the request will interact with the browser's cache\n to set request's cache.",
              "isMethod": false,
              "_": 7236,
              "source": "\n  /**\n   * A string indicating how the request will interact with the browser's cache\n   * to set request's cache.\n   */\n  cache?: RequestCache;",
              "name": "cache",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "RequestCache",
                "targs": [],
                "isNullable": false,
                "_": 7236,
                "source": " RequestCache"
              }
            },
            {
              "doc": "A string indicating whether credentials will be sent with the request\n always, never, or only when sent to a same-origin URL. Sets request's\n credentials.",
              "isMethod": false,
              "_": 7242,
              "source": "\n  /**\n   * A string indicating whether credentials will be sent with the request\n   * always, never, or only when sent to a same-origin URL. Sets request's\n   * credentials.\n   */\n  credentials?: RequestCredentials;",
              "name": "credentials",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "RequestCredentials",
                "targs": [],
                "isNullable": false,
                "_": 7242,
                "source": " RequestCredentials"
              }
            },
            {
              "doc": "A Headers object, an object literal, or an array of two-item arrays to set\n request's headers.",
              "isMethod": false,
              "_": 7247,
              "source": "\n  /**\n   * A Headers object, an object literal, or an array of two-item arrays to set\n   * request's headers.\n   */\n  headers?: HeadersInit;",
              "name": "headers",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HeadersInit",
                "targs": [],
                "isNullable": false,
                "_": 7247,
                "source": " HeadersInit"
              }
            },
            {
              "doc": "A cryptographic hash of the resource to be fetched by request. Sets\n request's integrity.",
              "isMethod": false,
              "_": 7252,
              "source": "\n  /**\n   * A cryptographic hash of the resource to be fetched by request. Sets\n   * request's integrity.\n   */\n  integrity?: string;",
              "name": "integrity",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7252,
                "source": " string"
              }
            },
            {
              "doc": "A boolean to set request's keepalive.",
              "isMethod": false,
              "_": 7256,
              "source": "\n  /**\n   * A boolean to set request's keepalive.\n   */\n  keepalive?: boolean;",
              "name": "keepalive",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7256,
                "source": " boolean"
              }
            },
            {
              "doc": "A string to set request's method.",
              "isMethod": false,
              "_": 7260,
              "source": "\n  /**\n   * A string to set request's method.\n   */\n  method?: string;",
              "name": "method",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7260,
                "source": " string"
              }
            },
            {
              "doc": "A string to indicate whether the request will use CORS, or will be\n restricted to same-origin URLs. Sets request's mode.",
              "isMethod": false,
              "_": 7265,
              "source": "\n  /**\n   * A string to indicate whether the request will use CORS, or will be\n   * restricted to same-origin URLs. Sets request's mode.\n   */\n  mode?: RequestMode;",
              "name": "mode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "RequestMode",
                "targs": [],
                "isNullable": false,
                "_": 7265,
                "source": " RequestMode"
              }
            },
            {
              "doc": "A string indicating whether request follows redirects, results in an error\n upon encountering a redirect, or returns the redirect (in an opaque\n fashion). Sets request's redirect.",
              "isMethod": false,
              "_": 7271,
              "source": "\n  /**\n   * A string indicating whether request follows redirects, results in an error\n   * upon encountering a redirect, or returns the redirect (in an opaque\n   * fashion). Sets request's redirect.\n   */\n  redirect?: RequestRedirect;",
              "name": "redirect",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "RequestRedirect",
                "targs": [],
                "isNullable": false,
                "_": 7271,
                "source": " RequestRedirect"
              }
            },
            {
              "doc": "A string whose value is a same-origin URL, \"about:client\", or the empty\n string, to set request's referrer.",
              "isMethod": false,
              "_": 7276,
              "source": "\n  /**\n   * A string whose value is a same-origin URL, \"about:client\", or the empty\n   * string, to set request's referrer.\n   */\n  referrer?: string;",
              "name": "referrer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7276,
                "source": " string"
              }
            },
            {
              "doc": "A referrer policy to set request's referrerPolicy.",
              "isMethod": false,
              "_": 7280,
              "source": "\n  /**\n   * A referrer policy to set request's referrerPolicy.\n   */\n  referrerPolicy?: ReferrerPolicy;",
              "name": "referrerPolicy",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ReferrerPolicy",
                "targs": [],
                "isNullable": false,
                "_": 7280,
                "source": " ReferrerPolicy"
              }
            },
            {
              "doc": "An AbortSignal to set request's signal.",
              "isMethod": false,
              "_": 7284,
              "source": "\n  /**\n   * An AbortSignal to set request's signal.\n   */\n  signal?: AbortSignal | null;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "AbortSignal",
                    "targs": [],
                    "isNullable": false,
                    "_": 7284,
                    "source": " AbortSignal"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7284,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7284,
                "source": " AbortSignal | null"
              }
            },
            {
              "doc": "Can only be null. Used to disassociate request from any Window.",
              "isMethod": false,
              "_": 7288,
              "source": "\n  /**\n   * Can only be null. Used to disassociate request from any Window.\n   */\n  window?: any;",
              "name": "window",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 7288,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7295,
          "name": "Request",
          "generics": [],
          "doc": "This Fetch API interface represents a resource request.",
          "heritage": [
            [
              {
                "ref": "Body",
                "targs": [],
                "isNullable": false,
                "_": 7295,
                "source": " Body"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7296,
              "source": "\n  constructor(input: RequestInfo | URL, init?: RequestInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "input",
                  "type": {
                    "union": [
                      {
                        "ref": "RequestInfo",
                        "targs": [],
                        "isNullable": false,
                        "_": 7296,
                        "source": " RequestInfo"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 7296,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 7296,
                    "source": " RequestInfo | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "init",
                  "type": {
                    "ref": "RequestInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7296,
                    "source": " RequestInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Returns the cache mode associated with request, which is a string\nindicating how the request will interact with the browser's cache when\nfetching.",
              "isMethod": false,
              "_": 7303,
              "source": "\n\n  /**\n   * Returns the cache mode associated with request, which is a string\n   * indicating how the request will interact with the browser's cache when\n   * fetching.\n   */\n  readonly cache: RequestCache;",
              "name": "cache",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "RequestCache",
                "targs": [],
                "isNullable": false,
                "_": 7303,
                "source": " RequestCache"
              }
            },
            {
              "doc": "Returns the credentials mode associated with request, which is a string\nindicating whether credentials will be sent with the request always, never,\nor only when sent to a same-origin URL.",
              "isMethod": false,
              "_": 7309,
              "source": "\n  /**\n   * Returns the credentials mode associated with request, which is a string\n   * indicating whether credentials will be sent with the request always, never,\n   * or only when sent to a same-origin URL.\n   */\n  readonly credentials: RequestCredentials;",
              "name": "credentials",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "RequestCredentials",
                "targs": [],
                "isNullable": false,
                "_": 7309,
                "source": " RequestCredentials"
              }
            },
            {
              "doc": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".",
              "isMethod": false,
              "_": 7313,
              "source": "\n  /**\n   * Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n   */\n  readonly destination: RequestDestination;",
              "name": "destination",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "RequestDestination",
                "targs": [],
                "isNullable": false,
                "_": 7313,
                "source": " RequestDestination"
              }
            },
            {
              "doc": "Returns a Headers object consisting of the headers associated with request.\nNote that headers added in the network layer by the user agent will not be\naccounted for in this object, e.g., the \"Host\" header.",
              "isMethod": false,
              "_": 7319,
              "source": "\n  /**\n   * Returns a Headers object consisting of the headers associated with request.\n   * Note that headers added in the network layer by the user agent will not be\n   * accounted for in this object, e.g., the \"Host\" header.\n   */\n  readonly headers: Headers;",
              "name": "headers",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Headers",
                "targs": [],
                "isNullable": false,
                "_": 7319,
                "source": " Headers"
              }
            },
            {
              "doc": "Returns request's subresource integrity metadata, which is a cryptographic\nhash of the resource being fetched. Its value consists of multiple hashes\nseparated by whitespace. [SRI]",
              "isMethod": false,
              "_": 7325,
              "source": "\n  /**\n   * Returns request's subresource integrity metadata, which is a cryptographic\n   * hash of the resource being fetched. Its value consists of multiple hashes\n   * separated by whitespace. [SRI]\n   */\n  readonly integrity: string;",
              "name": "integrity",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7325,
                "source": " string"
              }
            },
            {
              "doc": "Returns a boolean indicating whether or not request is for a history\nnavigation (a.k.a. back-forward navigation).",
              "isMethod": false,
              "_": 7330,
              "source": "\n  /**\n   * Returns a boolean indicating whether or not request is for a history\n   * navigation (a.k.a. back-forward navigation).\n   */\n  readonly isHistoryNavigation: boolean;",
              "name": "isHistoryNavigation",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7330,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns a boolean indicating whether or not request is for a reload\nnavigation.",
              "isMethod": false,
              "_": 7335,
              "source": "\n  /**\n   * Returns a boolean indicating whether or not request is for a reload\n   * navigation.\n   */\n  readonly isReloadNavigation: boolean;",
              "name": "isReloadNavigation",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7335,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns a boolean indicating whether or not request can outlive the global\nin which it was created.",
              "isMethod": false,
              "_": 7340,
              "source": "\n  /**\n   * Returns a boolean indicating whether or not request can outlive the global\n   * in which it was created.\n   */\n  readonly keepalive: boolean;",
              "name": "keepalive",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7340,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns request's HTTP method, which is \"GET\" by default.",
              "isMethod": false,
              "_": 7344,
              "source": "\n  /**\n   * Returns request's HTTP method, which is \"GET\" by default.\n   */\n  readonly method: string;",
              "name": "method",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7344,
                "source": " string"
              }
            },
            {
              "doc": "Returns the mode associated with request, which is a string indicating\nwhether the request will use CORS, or will be restricted to same-origin\nURLs.",
              "isMethod": false,
              "_": 7350,
              "source": "\n  /**\n   * Returns the mode associated with request, which is a string indicating\n   * whether the request will use CORS, or will be restricted to same-origin\n   * URLs.\n   */\n  readonly mode: RequestMode;",
              "name": "mode",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "RequestMode",
                "targs": [],
                "isNullable": false,
                "_": 7350,
                "source": " RequestMode"
              }
            },
            {
              "doc": "Returns the redirect mode associated with request, which is a string\nindicating how redirects for the request will be handled during fetching. A\nrequest will follow redirects by default.",
              "isMethod": false,
              "_": 7356,
              "source": "\n  /**\n   * Returns the redirect mode associated with request, which is a string\n   * indicating how redirects for the request will be handled during fetching. A\n   * request will follow redirects by default.\n   */\n  readonly redirect: RequestRedirect;",
              "name": "redirect",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "RequestRedirect",
                "targs": [],
                "isNullable": false,
                "_": 7356,
                "source": " RequestRedirect"
              }
            },
            {
              "doc": "Returns the referrer of request. Its value can be a same-origin URL if\nexplicitly set in init, the empty string to indicate no referrer, and\n\"about:client\" when defaulting to the global's default. This is used during\nfetching to determine the value of the `Referer` header of the request\nbeing made.",
              "isMethod": false,
              "_": 7364,
              "source": "\n  /**\n   * Returns the referrer of request. Its value can be a same-origin URL if\n   * explicitly set in init, the empty string to indicate no referrer, and\n   * \"about:client\" when defaulting to the global's default. This is used during\n   * fetching to determine the value of the `Referer` header of the request\n   * being made.\n   */\n  readonly referrer: string;",
              "name": "referrer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7364,
                "source": " string"
              }
            },
            {
              "doc": "Returns the referrer policy associated with request. This is used during\nfetching to compute the value of the request's referrer.",
              "isMethod": false,
              "_": 7369,
              "source": "\n  /**\n   * Returns the referrer policy associated with request. This is used during\n   * fetching to compute the value of the request's referrer.\n   */\n  readonly referrerPolicy: ReferrerPolicy;",
              "name": "referrerPolicy",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ReferrerPolicy",
                "targs": [],
                "isNullable": false,
                "_": 7369,
                "source": " ReferrerPolicy"
              }
            },
            {
              "doc": "Returns the signal associated with request, which is an AbortSignal object\nindicating whether or not request has been aborted, and its abort event\nhandler.",
              "isMethod": false,
              "_": 7375,
              "source": "\n  /**\n   * Returns the signal associated with request, which is an AbortSignal object\n   * indicating whether or not request has been aborted, and its abort event\n   * handler.\n   */\n  readonly signal: AbortSignal;",
              "name": "signal",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "AbortSignal",
                "targs": [],
                "isNullable": false,
                "_": 7375,
                "source": " AbortSignal"
              }
            },
            {
              "doc": "Returns the URL of request as a string.",
              "isMethod": false,
              "_": 7379,
              "source": "\n  /**\n   * Returns the URL of request as a string.\n   */\n  readonly url: string;",
              "name": "url",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7379,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7380,
              "source": "\n  clone(): Request;",
              "name": "clone",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Request",
                "targs": [],
                "isNullable": false,
                "_": 7380,
                "source": " Request"
              }
            },
            {
              "doc": "A simple getter used to expose a `ReadableStream` of the body contents.",
              "isMethod": false,
              "_": 7383,
              "source": "\n\n  /** A simple getter used to expose a `ReadableStream` of the body contents. */\n  readonly body: ReadableStream<Uint8Array> | null;",
              "name": "body",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "Uint8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 7383,
                        "source": "Uint8Array"
                      }
                    ],
                    "isNullable": false,
                    "_": 7383,
                    "source": " ReadableStream<Uint8Array>"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7383,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7383,
                "source": " ReadableStream<Uint8Array> | null"
              }
            },
            {
              "doc": "Stores a `Boolean` that declares whether the body has been used in a\nrequest yet.",
              "isMethod": false,
              "_": 7387,
              "source": "\n  /** Stores a `Boolean` that declares whether the body has been used in a\n   * request yet.\n   */\n  readonly bodyUsed: boolean;",
              "name": "bodyUsed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7387,
                "source": " boolean"
              }
            },
            {
              "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\n that resolves with an `ArrayBuffer`.",
              "isMethod": true,
              "_": 7391,
              "source": "\n  /** Takes a `Request` stream and reads it to completion. It returns a promise\n   * that resolves with an `ArrayBuffer`.\n   */\n  arrayBuffer(): Promise<ArrayBuffer>;",
              "name": "arrayBuffer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7391,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7391,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\n that resolves with a `Blob`.",
              "isMethod": true,
              "_": 7395,
              "source": "\n  /** Takes a `Request` stream and reads it to completion. It returns a promise\n   * that resolves with a `Blob`.\n   */\n  blob(): Promise<Blob>;",
              "name": "blob",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 7395,
                    "source": "Blob"
                  }
                ],
                "isNullable": false,
                "_": 7395,
                "source": " Promise<Blob>"
              }
            },
            {
              "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\n that resolves with a `FormData` object.",
              "isMethod": true,
              "_": 7399,
              "source": "\n  /** Takes a `Request` stream and reads it to completion. It returns a promise\n   * that resolves with a `FormData` object.\n   */\n  formData(): Promise<FormData>;",
              "name": "formData",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "FormData",
                    "targs": [],
                    "isNullable": false,
                    "_": 7399,
                    "source": "FormData"
                  }
                ],
                "isNullable": false,
                "_": 7399,
                "source": " Promise<FormData>"
              }
            },
            {
              "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\n that resolves with the result of parsing the body text as JSON.",
              "isMethod": true,
              "_": 7403,
              "source": "\n  /** Takes a `Request` stream and reads it to completion. It returns a promise\n   * that resolves with the result of parsing the body text as JSON.\n   */\n  json(): Promise<any>;",
              "name": "json",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 7403,
                    "source": "any"
                  }
                ],
                "isNullable": false,
                "_": 7403,
                "source": " Promise<any>"
              }
            },
            {
              "doc": "Takes a `Request` stream and reads it to completion. It returns a promise\n that resolves with a `USVString` (text).",
              "isMethod": true,
              "_": 7407,
              "source": "\n  /** Takes a `Request` stream and reads it to completion. It returns a promise\n   * that resolves with a `USVString` (text).\n   */\n  text(): Promise<string>;",
              "name": "text",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7407,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7407,
                "source": " Promise<string>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7411,
          "name": "ResponseInit",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7412,
              "source": "\n  headers?: HeadersInit;",
              "name": "headers",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HeadersInit",
                "targs": [],
                "isNullable": false,
                "_": 7412,
                "source": " HeadersInit"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7413,
              "source": "\n  status?: number;",
              "name": "status",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7413,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7414,
              "source": "\n  statusText?: string;",
              "name": "statusText",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7414,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7430,
          "name": "Response",
          "generics": [],
          "doc": "This Fetch API interface represents the response to a request.",
          "heritage": [
            [
              {
                "ref": "Body",
                "targs": [],
                "isNullable": false,
                "_": 7430,
                "source": " Body"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7431,
              "source": "\n  constructor(body?: BodyInit | null, init?: ResponseInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "body",
                  "type": {
                    "union": [
                      {
                        "ref": "BodyInit",
                        "targs": [],
                        "isNullable": false,
                        "_": 7431,
                        "source": " BodyInit"
                      },
                      {
                        "core": "null",
                        "isNullable": false,
                        "_": 7431,
                        "source": " null"
                      }
                    ],
                    "isNullable": false,
                    "_": 7431,
                    "source": " BodyInit | null"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "init",
                  "type": {
                    "ref": "ResponseInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7431,
                    "source": " ResponseInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7432,
              "source": "\n  static json(data: unknown, init?: ResponseInit): Response;",
              "name": "json",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "core": "unknown",
                    "isNullable": false,
                    "_": 7432,
                    "source": " unknown"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "init",
                  "type": {
                    "ref": "ResponseInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7432,
                    "source": " ResponseInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Response",
                "targs": [],
                "isNullable": false,
                "_": 7432,
                "source": " Response"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7433,
              "source": "\n  static error(): Response;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Response",
                "targs": [],
                "isNullable": false,
                "_": 7433,
                "source": " Response"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7434,
              "source": "\n  static redirect(url: string | URL, status?: number): Response;",
              "name": "redirect",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7434,
                        "source": " string"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 7434,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 7434,
                    "source": " string | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "status",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 7434,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Response",
                "targs": [],
                "isNullable": false,
                "_": 7434,
                "source": " Response"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7436,
              "source": "\n\n  readonly headers: Headers;",
              "name": "headers",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Headers",
                "targs": [],
                "isNullable": false,
                "_": 7436,
                "source": " Headers"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7437,
              "source": "\n  readonly ok: boolean;",
              "name": "ok",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7437,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7438,
              "source": "\n  readonly redirected: boolean;",
              "name": "redirected",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7438,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7439,
              "source": "\n  readonly status: number;",
              "name": "status",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7439,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7440,
              "source": "\n  readonly statusText: string;",
              "name": "statusText",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7440,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7441,
              "source": "\n  readonly type: ResponseType;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "ResponseType",
                "targs": [],
                "isNullable": false,
                "_": 7441,
                "source": " ResponseType"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7442,
              "source": "\n  readonly url: string;",
              "name": "url",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7442,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7443,
              "source": "\n  clone(): Response;",
              "name": "clone",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Response",
                "targs": [],
                "isNullable": false,
                "_": 7443,
                "source": " Response"
              }
            },
            {
              "doc": "A simple getter used to expose a `ReadableStream` of the body contents.",
              "isMethod": false,
              "_": 7446,
              "source": "\n\n  /** A simple getter used to expose a `ReadableStream` of the body contents. */\n  readonly body: ReadableStream<Uint8Array> | null;",
              "name": "body",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ref": "ReadableStream",
                    "targs": [
                      {
                        "ref": "Uint8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 7446,
                        "source": "Uint8Array"
                      }
                    ],
                    "isNullable": false,
                    "_": 7446,
                    "source": " ReadableStream<Uint8Array>"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7446,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7446,
                "source": " ReadableStream<Uint8Array> | null"
              }
            },
            {
              "doc": "Stores a `Boolean` that declares whether the body has been used in a\nresponse yet.",
              "isMethod": false,
              "_": 7450,
              "source": "\n  /** Stores a `Boolean` that declares whether the body has been used in a\n   * response yet.\n   */\n  readonly bodyUsed: boolean;",
              "name": "bodyUsed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7450,
                "source": " boolean"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with an `ArrayBuffer`.",
              "isMethod": true,
              "_": 7454,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with an `ArrayBuffer`.\n   */\n  arrayBuffer(): Promise<ArrayBuffer>;",
              "name": "arrayBuffer",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7454,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7454,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `Blob`.",
              "isMethod": true,
              "_": 7458,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `Blob`.\n   */\n  blob(): Promise<Blob>;",
              "name": "blob",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "Blob",
                    "targs": [],
                    "isNullable": false,
                    "_": 7458,
                    "source": "Blob"
                  }
                ],
                "isNullable": false,
                "_": 7458,
                "source": " Promise<Blob>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `FormData` object.",
              "isMethod": true,
              "_": 7462,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `FormData` object.\n   */\n  formData(): Promise<FormData>;",
              "name": "formData",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "FormData",
                    "targs": [],
                    "isNullable": false,
                    "_": 7462,
                    "source": "FormData"
                  }
                ],
                "isNullable": false,
                "_": 7462,
                "source": " Promise<FormData>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with the result of parsing the body text as JSON.",
              "isMethod": true,
              "_": 7466,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with the result of parsing the body text as JSON.\n   */\n  json(): Promise<any>;",
              "name": "json",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 7466,
                    "source": "any"
                  }
                ],
                "isNullable": false,
                "_": 7466,
                "source": " Promise<any>"
              }
            },
            {
              "doc": "Takes a `Response` stream and reads it to completion. It returns a promise\n that resolves with a `USVString` (text).",
              "isMethod": true,
              "_": 7470,
              "source": "\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `USVString` (text).\n   */\n  text(): Promise<string>;",
              "name": "text",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7470,
                    "source": "string"
                  }
                ],
                "isNullable": false,
                "_": 7470,
                "source": " Promise<string>"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7499,
          "name": "CloseEventInit",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 7499,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7500,
              "source": "\n  code?: number;",
              "name": "code",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7500,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7501,
              "source": "\n  reason?: string;",
              "name": "reason",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7501,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7502,
              "source": "\n  wasClean?: boolean;",
              "name": "wasClean",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7502,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7506,
          "name": "CloseEvent",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 7506,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7507,
              "source": "\n  constructor(type: string, eventInitDict?: CloseEventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7507,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "CloseEventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 7507,
                    "source": " CloseEventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Returns the WebSocket connection close code provided by the server.",
              "isMethod": false,
              "_": 7511,
              "source": "\n  /**\n   * Returns the WebSocket connection close code provided by the server.\n   */\n  readonly code: number;",
              "name": "code",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7511,
                "source": " number"
              }
            },
            {
              "doc": "Returns the WebSocket connection close reason provided by the server.",
              "isMethod": false,
              "_": 7515,
              "source": "\n  /**\n   * Returns the WebSocket connection close reason provided by the server.\n   */\n  readonly reason: string;",
              "name": "reason",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7515,
                "source": " string"
              }
            },
            {
              "doc": "Returns true if the connection closed cleanly; false otherwise.",
              "isMethod": false,
              "_": 7519,
              "source": "\n  /**\n   * Returns true if the connection closed cleanly; false otherwise.\n   */\n  readonly wasClean: boolean;",
              "name": "wasClean",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7519,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7523,
          "name": "WebSocketEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7524,
              "source": "\n  close: CloseEvent;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CloseEvent",
                "targs": [],
                "isNullable": false,
                "_": 7524,
                "source": " CloseEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7525,
              "source": "\n  error: Event;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 7525,
                "source": " Event"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7526,
              "source": "\n  message: MessageEvent;",
              "name": "message",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 7526,
                "source": " MessageEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7527,
              "source": "\n  open: Event;",
              "name": "open",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 7527,
                "source": " Event"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7540,
          "name": "WebSocket",
          "generics": [],
          "doc": "Provides the API for creating and managing a WebSocket connection to a\nserver, as well as for sending and receiving data on the connection.\n\nIf you are looking to create a WebSocket server, please take a look at\n`Deno.upgradeWebSocket()`.",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 7540,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7541,
              "source": "\n  constructor(url: string | URL, protocols?: string | string[]);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7541,
                        "source": " string"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 7541,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 7541,
                    "source": " string | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "protocols",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7541,
                        "source": " string"
                      },
                      {
                        "core": "array",
                        "targs": [
                          {
                            "core": "string",
                            "isNullable": false,
                            "_": 7541,
                            "source": " string"
                          }
                        ],
                        "isNullable": false,
                        "_": 7541,
                        "source": " string[]"
                      }
                    ],
                    "isNullable": false,
                    "_": 7541,
                    "source": " string | string[]"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7543,
              "source": "\n\n  static readonly CLOSED: number;",
              "name": "CLOSED",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7543,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7544,
              "source": "\n  static readonly CLOSING: number;",
              "name": "CLOSING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7544,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7545,
              "source": "\n  static readonly CONNECTING: number;",
              "name": "CONNECTING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7545,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7546,
              "source": "\n  static readonly OPEN: number;",
              "name": "OPEN",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": true,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7546,
                "source": " number"
              }
            },
            {
              "doc": "Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\n Can be set, to change how binary data is returned. The default is \"blob\".",
              "isMethod": false,
              "_": 7553,
              "source": "\n\n  /**\n   * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n   *\n   * Can be set, to change how binary data is returned. The default is \"blob\".\n   */\n  binaryType: BinaryType;",
              "name": "binaryType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BinaryType",
                "targs": [],
                "isNullable": false,
                "_": 7553,
                "source": " BinaryType"
              }
            },
            {
              "doc": "Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)",
              "isMethod": false,
              "_": 7559,
              "source": "\n  /**\n   * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n   *\n   * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n   */\n  readonly bufferedAmount: number;",
              "name": "bufferedAmount",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7559,
                "source": " number"
              }
            },
            {
              "doc": "Returns the extensions selected by the server, if any.",
              "isMethod": false,
              "_": 7563,
              "source": "\n  /**\n   * Returns the extensions selected by the server, if any.\n   */\n  readonly extensions: string;",
              "name": "extensions",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7563,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7564,
              "source": "\n  onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;",
              "name": "onclose",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7564,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7564,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "CloseEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 7564,
                          "source": " CloseEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7564,
                    "source": " ((this: WebSocket, ev: CloseEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7564,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7564,
                "source": " ((this: WebSocket, ev: CloseEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7565,
              "source": "\n  onerror: ((this: WebSocket, ev: Event | ErrorEvent) => any) | null;",
              "name": "onerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7565,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7565,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "union": [
                            {
                              "ref": "Event",
                              "targs": [],
                              "isNullable": false,
                              "_": 7565,
                              "source": " Event"
                            },
                            {
                              "ref": "ErrorEvent",
                              "targs": [],
                              "isNullable": false,
                              "_": 7565,
                              "source": " ErrorEvent"
                            }
                          ],
                          "isNullable": false,
                          "_": 7565,
                          "source": " Event | ErrorEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7565,
                    "source": " ((this: WebSocket, ev: Event | ErrorEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7565,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7565,
                "source": " ((this: WebSocket, ev: Event | ErrorEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7566,
              "source": "\n  onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;",
              "name": "onmessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7566,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7566,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "MessageEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 7566,
                          "source": " MessageEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7566,
                    "source": " ((this: WebSocket, ev: MessageEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7566,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7566,
                "source": " ((this: WebSocket, ev: MessageEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7567,
              "source": "\n  onopen: ((this: WebSocket, ev: Event) => any) | null;",
              "name": "onopen",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7567,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7567,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "Event",
                          "targs": [],
                          "isNullable": false,
                          "_": 7567,
                          "source": " Event"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7567,
                    "source": " ((this: WebSocket, ev: Event) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7567,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7567,
                "source": " ((this: WebSocket, ev: Event) => any) | null"
              }
            },
            {
              "doc": "Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.",
              "isMethod": false,
              "_": 7571,
              "source": "\n  /**\n   * Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.\n   */\n  readonly protocol: string;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7571,
                "source": " string"
              }
            },
            {
              "doc": "Returns the state of the WebSocket object's connection. It can have the values described below.",
              "isMethod": false,
              "_": 7575,
              "source": "\n  /**\n   * Returns the state of the WebSocket object's connection. It can have the values described below.\n   */\n  readonly readyState: number;",
              "name": "readyState",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7575,
                "source": " number"
              }
            },
            {
              "doc": "Returns the URL that was used to establish the WebSocket connection.",
              "isMethod": false,
              "_": 7579,
              "source": "\n  /**\n   * Returns the URL that was used to establish the WebSocket connection.\n   */\n  readonly url: string;",
              "name": "url",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7579,
                "source": " string"
              }
            },
            {
              "doc": "Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.",
              "isMethod": true,
              "_": 7583,
              "source": "\n  /**\n   * Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.\n   */\n  close(code?: number, reason?: string): void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "code",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 7583,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "reason",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7583,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7583,
                "source": " void"
              }
            },
            {
              "doc": "Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.",
              "isMethod": true,
              "_": 7587,
              "source": "\n  /**\n   * Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.\n   */\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;",
              "name": "send",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "data",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7587,
                        "source": " string"
                      },
                      {
                        "ref": "ArrayBufferLike",
                        "targs": [],
                        "isNullable": false,
                        "_": 7587,
                        "source": " ArrayBufferLike"
                      },
                      {
                        "ref": "Blob",
                        "targs": [],
                        "isNullable": false,
                        "_": 7587,
                        "source": " Blob"
                      },
                      {
                        "ref": "ArrayBufferView",
                        "targs": [],
                        "isNullable": false,
                        "_": 7587,
                        "source": " ArrayBufferView"
                      }
                    ],
                    "isNullable": false,
                    "_": 7587,
                    "source": " string | ArrayBufferLike | Blob | ArrayBufferView"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7587,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7588,
              "source": "\n  readonly CLOSED: number;",
              "name": "CLOSED",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7588,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7589,
              "source": "\n  readonly CLOSING: number;",
              "name": "CLOSING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7589,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7590,
              "source": "\n  readonly CONNECTING: number;",
              "name": "CONNECTING",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7590,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7591,
              "source": "\n  readonly OPEN: number;",
              "name": "OPEN",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7591,
                "source": " number"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 7592,
              "source": "\n  addEventListener<K extends keyof WebSocketEventMap>(\n    type: K,\n    listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WebSocketEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 7592,
                      "source": " WebSocketEventMap"
                    },
                    "isNullable": false,
                    "_": 7592,
                    "source": " keyof WebSocketEventMap"
                  },
                  "_": 7592,
                  "source": "K extends keyof WebSocketEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 7593,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7594,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7594,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 7594,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WebSocketEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 7594,
                            "source": " WebSocketEventMap"
                          },
                          "isNullable": false,
                          "_": 7594,
                          "source": " WebSocketEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7594,
                    "source": " (this: WebSocket, ev: WebSocketEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 7595,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 7595,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 7595,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7596,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 7597,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7598,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 7599,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 7600,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 7600,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 7600,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7601,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 7602,
              "source": "\n  removeEventListener<K extends keyof WebSocketEventMap>(\n    type: K,\n    listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WebSocketEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 7602,
                      "source": " WebSocketEventMap"
                    },
                    "isNullable": false,
                    "_": 7602,
                    "source": " keyof WebSocketEventMap"
                  },
                  "_": 7602,
                  "source": "K extends keyof WebSocketEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 7603,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 7604,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "WebSocket",
                          "targs": [],
                          "isNullable": false,
                          "_": 7604,
                          "source": " WebSocket"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 7604,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WebSocketEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 7604,
                            "source": " WebSocketEventMap"
                          },
                          "isNullable": false,
                          "_": 7604,
                          "source": " WebSocketEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 7604,
                    "source": " (this: WebSocket, ev: WebSocketEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 7605,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 7605,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 7605,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7606,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 7607,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7608,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 7609,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 7610,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 7610,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 7610,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7611,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 7630,
          "name": "Storage",
          "generics": [],
          "doc": "This Web Storage API interface provides access to a particular domain's\nsession or local storage. It allows, for example, the addition, modification,\nor deletion of stored data items.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [
            {
              "key": {
                "core": "string",
                "isNullable": false,
                "_": 7657,
                "source": " string"
              },
              "value": {
                "core": "any",
                "isNullable": false,
                "_": 7657,
                "source": " any"
              },
              "doc": "",
              "_": 7657,
              "source": "\n  [name: string]: any;",
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false
            }
          ],
          "ctors": [],
          "members": [
            {
              "doc": "Returns the number of key/value pairs currently present in the list associated with the object.",
              "isMethod": false,
              "_": 7634,
              "source": "\n  /**\n   * Returns the number of key/value pairs currently present in the list associated with the object.\n   */\n  readonly length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7634,
                "source": " number"
              }
            },
            {
              "doc": "Empties the list associated with the object of all key/value pairs, if there are any.",
              "isMethod": true,
              "_": 7638,
              "source": "\n  /**\n   * Empties the list associated with the object of all key/value pairs, if there are any.\n   */\n  clear(): void;",
              "name": "clear",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7638,
                "source": " void"
              }
            },
            {
              "doc": "Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.",
              "isMethod": true,
              "_": 7642,
              "source": "\n  /**\n   * Returns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n   */\n  getItem(key: string): string | null;",
              "name": "getItem",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "key",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7642,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7642,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7642,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7642,
                "source": " string | null"
              }
            },
            {
              "doc": "Returns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.",
              "isMethod": true,
              "_": 7646,
              "source": "\n  /**\n   * Returns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.\n   */\n  key(index: number): string | null;",
              "name": "key",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "index",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 7646,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7646,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 7646,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 7646,
                "source": " string | null"
              }
            },
            {
              "doc": "Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.",
              "isMethod": true,
              "_": 7650,
              "source": "\n  /**\n   * Removes the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n   */\n  removeItem(key: string): void;",
              "name": "removeItem",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "key",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7650,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7650,
                "source": " void"
              }
            },
            {
              "doc": "Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n\n Throws a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)",
              "isMethod": true,
              "_": 7656,
              "source": "\n  /**\n   * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n   *\n   * Throws a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)\n   */\n  setItem(key: string, value: string): void;",
              "name": "setItem",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "key",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7656,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "value",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 7656,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 7656,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline39",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7663,
              "source": "\n  new (): Storage;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Storage",
                "targs": [],
                "isNullable": false,
                "_": 7663,
                "source": " Storage"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7662,
              "source": "\n  prototype: Storage;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Storage",
                "targs": [],
                "isNullable": false,
                "_": 7662,
                "source": " Storage"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 7677,
          "name": "Algorithm",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7678,
              "source": "\n  name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7678,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7682,
          "name": "KeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7683,
              "source": "\n  name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7683,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7708,
          "name": "RsaOtherPrimesInfo",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7709,
              "source": "\n  d?: string;",
              "name": "d",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7709,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7710,
              "source": "\n  r?: string;",
              "name": "r",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7710,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7711,
              "source": "\n  t?: string;",
              "name": "t",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7711,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7715,
          "name": "JsonWebKey",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7716,
              "source": "\n  alg?: string;",
              "name": "alg",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7716,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7717,
              "source": "\n  crv?: string;",
              "name": "crv",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7717,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7718,
              "source": "\n  d?: string;",
              "name": "d",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7718,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7719,
              "source": "\n  dp?: string;",
              "name": "dp",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7719,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7720,
              "source": "\n  dq?: string;",
              "name": "dq",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7720,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7721,
              "source": "\n  e?: string;",
              "name": "e",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7721,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7722,
              "source": "\n  ext?: boolean;",
              "name": "ext",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7722,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7723,
              "source": "\n  k?: string;",
              "name": "k",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7723,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7725,
              "source": "\n  // deno-lint-ignore camelcase\n  key_ops?: string[];",
              "name": "key_ops",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "array",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7725,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 7725,
                "source": " string[]"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7726,
              "source": "\n  kty?: string;",
              "name": "kty",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7726,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7727,
              "source": "\n  n?: string;",
              "name": "n",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7727,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7728,
              "source": "\n  oth?: RsaOtherPrimesInfo[];",
              "name": "oth",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "array",
                "targs": [
                  {
                    "ref": "RsaOtherPrimesInfo",
                    "targs": [],
                    "isNullable": false,
                    "_": 7728,
                    "source": " RsaOtherPrimesInfo"
                  }
                ],
                "isNullable": false,
                "_": 7728,
                "source": " RsaOtherPrimesInfo[]"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7729,
              "source": "\n  p?: string;",
              "name": "p",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7729,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7730,
              "source": "\n  q?: string;",
              "name": "q",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7730,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7731,
              "source": "\n  qi?: string;",
              "name": "qi",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7731,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7732,
              "source": "\n  use?: string;",
              "name": "use",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7732,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7733,
              "source": "\n  x?: string;",
              "name": "x",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7733,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7734,
              "source": "\n  y?: string;",
              "name": "y",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 7734,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7738,
          "name": "AesCbcParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7738,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7739,
              "source": "\n  iv: BufferSource;",
              "name": "iv",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7739,
                "source": " BufferSource"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7743,
          "name": "AesGcmParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7743,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7744,
              "source": "\n  iv: BufferSource;",
              "name": "iv",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7744,
                "source": " BufferSource"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7745,
              "source": "\n  additionalData?: BufferSource;",
              "name": "additionalData",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7745,
                "source": " BufferSource"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7746,
              "source": "\n  tagLength?: number;",
              "name": "tagLength",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7746,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7750,
          "name": "AesCtrParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7750,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7751,
              "source": "\n  counter: BufferSource;",
              "name": "counter",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7751,
                "source": " BufferSource"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7752,
              "source": "\n  length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7752,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7756,
          "name": "HmacKeyGenParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7756,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7757,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7757,
                "source": " HashAlgorithmIdentifier"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7758,
              "source": "\n  length?: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7758,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7762,
          "name": "EcKeyGenParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7762,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7763,
              "source": "\n  namedCurve: NamedCurve;",
              "name": "namedCurve",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "NamedCurve",
                "targs": [],
                "isNullable": false,
                "_": 7763,
                "source": " NamedCurve"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7767,
          "name": "EcKeyImportParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7767,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7768,
              "source": "\n  namedCurve: NamedCurve;",
              "name": "namedCurve",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "NamedCurve",
                "targs": [],
                "isNullable": false,
                "_": 7768,
                "source": " NamedCurve"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7772,
          "name": "EcdsaParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7772,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7773,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7773,
                "source": " HashAlgorithmIdentifier"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7777,
          "name": "RsaHashedImportParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7777,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7778,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7778,
                "source": " HashAlgorithmIdentifier"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7782,
          "name": "RsaHashedKeyGenParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "RsaKeyGenParams",
                "targs": [],
                "isNullable": false,
                "_": 7782,
                "source": " RsaKeyGenParams"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7783,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7783,
                "source": " HashAlgorithmIdentifier"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7787,
          "name": "RsaKeyGenParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7787,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7788,
              "source": "\n  modulusLength: number;",
              "name": "modulusLength",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7788,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7789,
              "source": "\n  publicExponent: Uint8Array;",
              "name": "publicExponent",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Uint8Array",
                "targs": [],
                "isNullable": false,
                "_": 7789,
                "source": " Uint8Array"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7793,
          "name": "RsaPssParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7793,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7794,
              "source": "\n  saltLength: number;",
              "name": "saltLength",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7794,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7798,
          "name": "RsaOaepParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7798,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7799,
              "source": "\n  label?: Uint8Array;",
              "name": "label",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Uint8Array",
                "targs": [],
                "isNullable": false,
                "_": 7799,
                "source": " Uint8Array"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7803,
          "name": "HmacImportParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7803,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7804,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7804,
                "source": " HashAlgorithmIdentifier"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7805,
              "source": "\n  length?: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7805,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7809,
          "name": "EcKeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7809,
                "source": " KeyAlgorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7810,
              "source": "\n  namedCurve: NamedCurve;",
              "name": "namedCurve",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "NamedCurve",
                "targs": [],
                "isNullable": false,
                "_": 7810,
                "source": " NamedCurve"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7814,
          "name": "HmacKeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7814,
                "source": " KeyAlgorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7815,
              "source": "\n  hash: KeyAlgorithm;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7815,
                "source": " KeyAlgorithm"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7816,
              "source": "\n  length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7816,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7820,
          "name": "RsaHashedKeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "RsaKeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7820,
                "source": " RsaKeyAlgorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7821,
              "source": "\n  hash: KeyAlgorithm;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7821,
                "source": " KeyAlgorithm"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7825,
          "name": "RsaKeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7825,
                "source": " KeyAlgorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7826,
              "source": "\n  modulusLength: number;",
              "name": "modulusLength",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7826,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7827,
              "source": "\n  publicExponent: Uint8Array;",
              "name": "publicExponent",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Uint8Array",
                "targs": [],
                "isNullable": false,
                "_": 7827,
                "source": " Uint8Array"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7831,
          "name": "HkdfParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7831,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7832,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7832,
                "source": " HashAlgorithmIdentifier"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7833,
              "source": "\n  info: BufferSource;",
              "name": "info",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7833,
                "source": " BufferSource"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7834,
              "source": "\n  salt: BufferSource;",
              "name": "salt",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7834,
                "source": " BufferSource"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7838,
          "name": "Pbkdf2Params",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7838,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7839,
              "source": "\n  hash: HashAlgorithmIdentifier;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "HashAlgorithmIdentifier",
                "targs": [],
                "isNullable": false,
                "_": 7839,
                "source": " HashAlgorithmIdentifier"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7840,
              "source": "\n  iterations: number;",
              "name": "iterations",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7840,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7841,
              "source": "\n  salt: BufferSource;",
              "name": "salt",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7841,
                "source": " BufferSource"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7845,
          "name": "AesDerivedKeyParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7845,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7846,
              "source": "\n  length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7846,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7850,
          "name": "EcdhKeyDeriveParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7850,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7851,
              "source": "\n  public: CryptoKey;",
              "name": "public",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CryptoKey",
                "targs": [],
                "isNullable": false,
                "_": 7851,
                "source": " CryptoKey"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7855,
          "name": "AesKeyGenParams",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7855,
                "source": " Algorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7856,
              "source": "\n  length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7856,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7860,
          "name": "AesKeyAlgorithm",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7860,
                "source": " KeyAlgorithm"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7861,
              "source": "\n  length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 7861,
                "source": " number"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 7869,
          "name": "CryptoKey",
          "generics": [],
          "doc": "The CryptoKey dictionary of the Web Crypto API represents a cryptographic\nkey.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7870,
              "source": "\n  readonly algorithm: KeyAlgorithm;",
              "name": "algorithm",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "KeyAlgorithm",
                "targs": [],
                "isNullable": false,
                "_": 7870,
                "source": " KeyAlgorithm"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7871,
              "source": "\n  readonly extractable: boolean;",
              "name": "extractable",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 7871,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7872,
              "source": "\n  readonly type: KeyType;",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "KeyType",
                "targs": [],
                "isNullable": false,
                "_": 7872,
                "source": " KeyType"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7873,
              "source": "\n  readonly usages: KeyUsage[];",
              "name": "usages",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "array",
                "targs": [
                  {
                    "ref": "KeyUsage",
                    "targs": [],
                    "isNullable": false,
                    "_": 7873,
                    "source": " KeyUsage"
                  }
                ],
                "isNullable": false,
                "_": 7873,
                "source": " KeyUsage[]"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline40",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7879,
              "source": "\n  new (): CryptoKey;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "CryptoKey",
                "targs": [],
                "isNullable": false,
                "_": 7879,
                "source": " CryptoKey"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7878,
              "source": "\n  prototype: CryptoKey;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CryptoKey",
                "targs": [],
                "isNullable": false,
                "_": 7878,
                "source": " CryptoKey"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 7887,
          "name": "CryptoKeyPair",
          "generics": [],
          "doc": "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for\nan asymmetric cryptography algorithm, also known as a public-key algorithm.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7888,
              "source": "\n  privateKey: CryptoKey;",
              "name": "privateKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CryptoKey",
                "targs": [],
                "isNullable": false,
                "_": 7888,
                "source": " CryptoKey"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 7889,
              "source": "\n  publicKey: CryptoKey;",
              "name": "publicKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CryptoKey",
                "targs": [],
                "isNullable": false,
                "_": 7889,
                "source": " CryptoKey"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline41",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7895,
              "source": "\n  new (): CryptoKeyPair;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "CryptoKeyPair",
                "targs": [],
                "isNullable": false,
                "_": 7895,
                "source": " CryptoKeyPair"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 7894,
              "source": "\n  prototype: CryptoKeyPair;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CryptoKeyPair",
                "targs": [],
                "isNullable": false,
                "_": 7894,
                "source": " CryptoKeyPair"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 7904,
          "name": "SubtleCrypto",
          "generics": [],
          "doc": "This Web Crypto API interface provides a number of low-level cryptographic\nfunctions. It is accessed via the Crypto.subtle properties available in a\nwindow context (via Window.crypto).",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 7905,
              "source": "\n  generateKey(\n    algorithm: RsaHashedKeyGenParams | EcKeyGenParams,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKeyPair>;",
              "name": "generateKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "RsaHashedKeyGenParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7906,
                        "source": " RsaHashedKeyGenParams"
                      },
                      {
                        "ref": "EcKeyGenParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7906,
                        "source": " EcKeyGenParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7906,
                    "source": " RsaHashedKeyGenParams | EcKeyGenParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7907,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 7908,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 7908,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKeyPair",
                    "targs": [],
                    "isNullable": false,
                    "_": 7909,
                    "source": "CryptoKeyPair"
                  }
                ],
                "isNullable": false,
                "_": 7909,
                "source": " Promise<CryptoKeyPair>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7910,
              "source": "\n  generateKey(\n    algorithm: AesKeyGenParams | HmacKeyGenParams,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKey>;",
              "name": "generateKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AesKeyGenParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7911,
                        "source": " AesKeyGenParams"
                      },
                      {
                        "ref": "HmacKeyGenParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7911,
                        "source": " HmacKeyGenParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7911,
                    "source": " AesKeyGenParams | HmacKeyGenParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7912,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 7913,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 7913,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7914,
                    "source": "CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 7914,
                "source": " Promise<CryptoKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7915,
              "source": "\n  generateKey(\n    algorithm: AlgorithmIdentifier,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKeyPair | CryptoKey>;",
              "name": "generateKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "ref": "AlgorithmIdentifier",
                    "targs": [],
                    "isNullable": false,
                    "_": 7916,
                    "source": " AlgorithmIdentifier"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7917,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 7918,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 7918,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "union": [
                      {
                        "ref": "CryptoKeyPair",
                        "targs": [],
                        "isNullable": false,
                        "_": 7919,
                        "source": "CryptoKeyPair"
                      },
                      {
                        "ref": "CryptoKey",
                        "targs": [],
                        "isNullable": false,
                        "_": 7919,
                        "source": " CryptoKey"
                      }
                    ],
                    "isNullable": false,
                    "_": 7919,
                    "source": "CryptoKeyPair | CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 7919,
                "source": " Promise<CryptoKeyPair | CryptoKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7920,
              "source": "\n  importKey(\n    format: \"jwk\",\n    keyData: JsonWebKey,\n    algorithm:\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKey>;",
              "name": "importKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "core": "\"jwk\"",
                    "isNullable": false,
                    "_": 7921,
                    "source": " \"jwk\""
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyData",
                  "type": {
                    "ref": "JsonWebKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7922,
                    "source": " JsonWebKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7924,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "HmacImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7925,
                        "source": " HmacImportParams"
                      },
                      {
                        "ref": "RsaHashedImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7926,
                        "source": " RsaHashedImportParams"
                      },
                      {
                        "ref": "EcKeyImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7927,
                        "source": " EcKeyImportParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7924,
                    "source": "\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7928,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 7929,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 7929,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7930,
                    "source": "CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 7930,
                "source": " Promise<CryptoKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7931,
              "source": "\n  importKey(\n    format: Exclude<KeyFormat, \"jwk\">,\n    keyData: BufferSource,\n    algorithm:\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKey>;",
              "name": "importKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "ref": "Exclude",
                    "targs": [
                      {
                        "ref": "KeyFormat",
                        "targs": [],
                        "isNullable": false,
                        "_": 7932,
                        "source": "KeyFormat"
                      },
                      {
                        "core": "\"jwk\"",
                        "isNullable": false,
                        "_": 7932,
                        "source": " \"jwk\""
                      }
                    ],
                    "isNullable": false,
                    "_": 7932,
                    "source": " Exclude<KeyFormat, \"jwk\">"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyData",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7933,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7935,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "HmacImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7936,
                        "source": " HmacImportParams"
                      },
                      {
                        "ref": "RsaHashedImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7937,
                        "source": " RsaHashedImportParams"
                      },
                      {
                        "ref": "EcKeyImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7938,
                        "source": " EcKeyImportParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7935,
                    "source": "\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7939,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 7940,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 7940,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7941,
                    "source": "CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 7941,
                "source": " Promise<CryptoKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7942,
              "source": "\n  exportKey(format: \"jwk\", key: CryptoKey): Promise<JsonWebKey>;",
              "name": "exportKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "core": "\"jwk\"",
                    "isNullable": false,
                    "_": 7942,
                    "source": " \"jwk\""
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7942,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "JsonWebKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7942,
                    "source": "JsonWebKey"
                  }
                ],
                "isNullable": false,
                "_": 7942,
                "source": " Promise<JsonWebKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7943,
              "source": "\n  exportKey(\n    format: Exclude<KeyFormat, \"jwk\">,\n    key: CryptoKey,\n  ): Promise<ArrayBuffer>;",
              "name": "exportKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "ref": "Exclude",
                    "targs": [
                      {
                        "ref": "KeyFormat",
                        "targs": [],
                        "isNullable": false,
                        "_": 7944,
                        "source": "KeyFormat"
                      },
                      {
                        "core": "\"jwk\"",
                        "isNullable": false,
                        "_": 7944,
                        "source": " \"jwk\""
                      }
                    ],
                    "isNullable": false,
                    "_": 7944,
                    "source": " Exclude<KeyFormat, \"jwk\">"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7945,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7946,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7946,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7947,
              "source": "\n  sign(\n    algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams,\n    key: CryptoKey,\n    data: BufferSource,\n  ): Promise<ArrayBuffer>;",
              "name": "sign",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7948,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaPssParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7948,
                        "source": " RsaPssParams"
                      },
                      {
                        "ref": "EcdsaParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7948,
                        "source": " EcdsaParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7948,
                    "source": " AlgorithmIdentifier | RsaPssParams | EcdsaParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7949,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "data",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7950,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7951,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7951,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7952,
              "source": "\n  verify(\n    algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams,\n    key: CryptoKey,\n    signature: BufferSource,\n    data: BufferSource,\n  ): Promise<boolean>;",
              "name": "verify",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7953,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaPssParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7953,
                        "source": " RsaPssParams"
                      },
                      {
                        "ref": "EcdsaParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7953,
                        "source": " EcdsaParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7953,
                    "source": " AlgorithmIdentifier | RsaPssParams | EcdsaParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7954,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "signature",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7955,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "data",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7956,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 7957,
                    "source": "boolean"
                  }
                ],
                "isNullable": false,
                "_": 7957,
                "source": " Promise<boolean>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7958,
              "source": "\n  digest(\n    algorithm: AlgorithmIdentifier,\n    data: BufferSource,\n  ): Promise<ArrayBuffer>;",
              "name": "digest",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "ref": "AlgorithmIdentifier",
                    "targs": [],
                    "isNullable": false,
                    "_": 7959,
                    "source": " AlgorithmIdentifier"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "data",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7960,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7961,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7961,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7962,
              "source": "\n  encrypt(\n    algorithm:\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesGcmParams\n      | AesCtrParams,\n    key: CryptoKey,\n    data: BufferSource,\n  ): Promise<ArrayBuffer>;",
              "name": "encrypt",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7964,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaOaepParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7965,
                        "source": " RsaOaepParams"
                      },
                      {
                        "ref": "AesCbcParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7966,
                        "source": " AesCbcParams"
                      },
                      {
                        "ref": "AesGcmParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7967,
                        "source": " AesGcmParams"
                      },
                      {
                        "ref": "AesCtrParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7968,
                        "source": " AesCtrParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7964,
                    "source": "\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesGcmParams\n      | AesCtrParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7969,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "data",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7970,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7971,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7971,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7972,
              "source": "\n  decrypt(\n    algorithm:\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesGcmParams\n      | AesCtrParams,\n    key: CryptoKey,\n    data: BufferSource,\n  ): Promise<ArrayBuffer>;",
              "name": "decrypt",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7974,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaOaepParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7975,
                        "source": " RsaOaepParams"
                      },
                      {
                        "ref": "AesCbcParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7976,
                        "source": " AesCbcParams"
                      },
                      {
                        "ref": "AesGcmParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7977,
                        "source": " AesGcmParams"
                      },
                      {
                        "ref": "AesCtrParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7978,
                        "source": " AesCtrParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7974,
                    "source": "\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesGcmParams\n      | AesCtrParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7979,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "data",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 7980,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7981,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7981,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7982,
              "source": "\n  deriveBits(\n    algorithm:\n      | AlgorithmIdentifier\n      | HkdfParams\n      | Pbkdf2Params\n      | EcdhKeyDeriveParams,\n    baseKey: CryptoKey,\n    length: number,\n  ): Promise<ArrayBuffer>;",
              "name": "deriveBits",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7984,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "HkdfParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7985,
                        "source": " HkdfParams"
                      },
                      {
                        "ref": "Pbkdf2Params",
                        "targs": [],
                        "isNullable": false,
                        "_": 7986,
                        "source": " Pbkdf2Params"
                      },
                      {
                        "ref": "EcdhKeyDeriveParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7987,
                        "source": " EcdhKeyDeriveParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7984,
                    "source": "\n      | AlgorithmIdentifier\n      | HkdfParams\n      | Pbkdf2Params\n      | EcdhKeyDeriveParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "baseKey",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7988,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "length",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 7989,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 7990,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 7990,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 7991,
              "source": "\n  deriveKey(\n    algorithm:\n      | AlgorithmIdentifier\n      | HkdfParams\n      | Pbkdf2Params\n      | EcdhKeyDeriveParams,\n    baseKey: CryptoKey,\n    derivedKeyType:\n      | AlgorithmIdentifier\n      | AesDerivedKeyParams\n      | HmacImportParams\n      | HkdfParams\n      | Pbkdf2Params,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKey>;",
              "name": "deriveKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "algorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7993,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "HkdfParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7994,
                        "source": " HkdfParams"
                      },
                      {
                        "ref": "Pbkdf2Params",
                        "targs": [],
                        "isNullable": false,
                        "_": 7995,
                        "source": " Pbkdf2Params"
                      },
                      {
                        "ref": "EcdhKeyDeriveParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 7996,
                        "source": " EcdhKeyDeriveParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 7993,
                    "source": "\n      | AlgorithmIdentifier\n      | HkdfParams\n      | Pbkdf2Params\n      | EcdhKeyDeriveParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "baseKey",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 7997,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "derivedKeyType",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 7999,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "AesDerivedKeyParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8000,
                        "source": " AesDerivedKeyParams"
                      },
                      {
                        "ref": "HmacImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8001,
                        "source": " HmacImportParams"
                      },
                      {
                        "ref": "HkdfParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8002,
                        "source": " HkdfParams"
                      },
                      {
                        "ref": "Pbkdf2Params",
                        "targs": [],
                        "isNullable": false,
                        "_": 8003,
                        "source": " Pbkdf2Params"
                      }
                    ],
                    "isNullable": false,
                    "_": 7999,
                    "source": "\n      | AlgorithmIdentifier\n      | AesDerivedKeyParams\n      | HmacImportParams\n      | HkdfParams\n      | Pbkdf2Params"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 8004,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 8005,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 8005,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 8006,
                    "source": "CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 8006,
                "source": " Promise<CryptoKey>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8007,
              "source": "\n  wrapKey(\n    format: KeyFormat,\n    key: CryptoKey,\n    wrappingKey: CryptoKey,\n    wrapAlgorithm:\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesCtrParams,\n  ): Promise<ArrayBuffer>;",
              "name": "wrapKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "ref": "KeyFormat",
                    "targs": [],
                    "isNullable": false,
                    "_": 8008,
                    "source": " KeyFormat"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "key",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 8009,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "wrappingKey",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 8010,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "wrapAlgorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 8012,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaOaepParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8013,
                        "source": " RsaOaepParams"
                      },
                      {
                        "ref": "AesCbcParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8014,
                        "source": " AesCbcParams"
                      },
                      {
                        "ref": "AesCtrParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8015,
                        "source": " AesCtrParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 8012,
                    "source": "\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesCtrParams"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "ArrayBuffer",
                    "targs": [],
                    "isNullable": false,
                    "_": 8016,
                    "source": "ArrayBuffer"
                  }
                ],
                "isNullable": false,
                "_": 8016,
                "source": " Promise<ArrayBuffer>"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8017,
              "source": "\n  unwrapKey(\n    format: KeyFormat,\n    wrappedKey: BufferSource,\n    unwrappingKey: CryptoKey,\n    unwrapAlgorithm:\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesCtrParams,\n    unwrappedKeyAlgorithm:\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams,\n    extractable: boolean,\n    keyUsages: KeyUsage[],\n  ): Promise<CryptoKey>;",
              "name": "unwrapKey",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "format",
                  "type": {
                    "ref": "KeyFormat",
                    "targs": [],
                    "isNullable": false,
                    "_": 8018,
                    "source": " KeyFormat"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "wrappedKey",
                  "type": {
                    "ref": "BufferSource",
                    "targs": [],
                    "isNullable": false,
                    "_": 8019,
                    "source": " BufferSource"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "unwrappingKey",
                  "type": {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 8020,
                    "source": " CryptoKey"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "unwrapAlgorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 8022,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "RsaOaepParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8023,
                        "source": " RsaOaepParams"
                      },
                      {
                        "ref": "AesCbcParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8024,
                        "source": " AesCbcParams"
                      },
                      {
                        "ref": "AesCtrParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8025,
                        "source": " AesCtrParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 8022,
                    "source": "\n      | AlgorithmIdentifier\n      | RsaOaepParams\n      | AesCbcParams\n      | AesCtrParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "unwrappedKeyAlgorithm",
                  "type": {
                    "union": [
                      {
                        "ref": "AlgorithmIdentifier",
                        "targs": [],
                        "isNullable": false,
                        "_": 8027,
                        "source": " AlgorithmIdentifier"
                      },
                      {
                        "ref": "HmacImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8028,
                        "source": " HmacImportParams"
                      },
                      {
                        "ref": "RsaHashedImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8029,
                        "source": " RsaHashedImportParams"
                      },
                      {
                        "ref": "EcKeyImportParams",
                        "targs": [],
                        "isNullable": false,
                        "_": 8030,
                        "source": " EcKeyImportParams"
                      }
                    ],
                    "isNullable": false,
                    "_": 8027,
                    "source": "\n      | AlgorithmIdentifier\n      | HmacImportParams\n      | RsaHashedImportParams\n      | EcKeyImportParams"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "extractable",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 8031,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "keyUsages",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "KeyUsage",
                        "targs": [],
                        "isNullable": false,
                        "_": 8032,
                        "source": " KeyUsage"
                      }
                    ],
                    "isNullable": false,
                    "_": 8032,
                    "source": " KeyUsage[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "CryptoKey",
                    "targs": [],
                    "isNullable": false,
                    "_": 8033,
                    "source": "CryptoKey"
                  }
                ],
                "isNullable": false,
                "_": 8033,
                "source": " Promise<CryptoKey>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8037,
          "name": "Crypto",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8038,
              "source": "\n  readonly subtle: SubtleCrypto;",
              "name": "subtle",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "SubtleCrypto",
                "targs": [],
                "isNullable": false,
                "_": 8038,
                "source": " SubtleCrypto"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8039,
              "source": "\n  getRandomValues<\n    T extends\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | BigInt64Array\n      | BigUint64Array,\n  >(\n    array: T,\n  ): T;",
              "name": "getRandomValues",
              "generics": [
                {
                  "name": "T",
                  "constraint": {
                    "union": [
                      {
                        "ref": "Int8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8041,
                        "source": " Int8Array"
                      },
                      {
                        "ref": "Int16Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8042,
                        "source": " Int16Array"
                      },
                      {
                        "ref": "Int32Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8043,
                        "source": " Int32Array"
                      },
                      {
                        "ref": "Uint8Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8044,
                        "source": " Uint8Array"
                      },
                      {
                        "ref": "Uint16Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8045,
                        "source": " Uint16Array"
                      },
                      {
                        "ref": "Uint32Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8046,
                        "source": " Uint32Array"
                      },
                      {
                        "ref": "Uint8ClampedArray",
                        "targs": [],
                        "isNullable": false,
                        "_": 8047,
                        "source": " Uint8ClampedArray"
                      },
                      {
                        "ref": "BigInt64Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8048,
                        "source": " BigInt64Array"
                      },
                      {
                        "ref": "BigUint64Array",
                        "targs": [],
                        "isNullable": false,
                        "_": 8049,
                        "source": " BigUint64Array"
                      }
                    ],
                    "isNullable": false,
                    "_": 8041,
                    "source": "\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | BigInt64Array\n      | BigUint64Array"
                  },
                  "_": 8040,
                  "source": "\n    T extends\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Uint8ClampedArray\n      | BigInt64Array\n      | BigUint64Array"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "array",
                  "type": {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 8051,
                    "source": " T"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 8052,
                "source": " T"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8053,
              "source": "\n  randomUUID(): string;",
              "name": "randomUUID",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8053,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline42",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8059,
              "source": "\n  new (): SubtleCrypto;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "SubtleCrypto",
                "targs": [],
                "isNullable": false,
                "_": 8059,
                "source": " SubtleCrypto"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8058,
              "source": "\n  prototype: SubtleCrypto;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "SubtleCrypto",
                "targs": [],
                "isNullable": false,
                "_": 8058,
                "source": " SubtleCrypto"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 8070,
          "name": "BroadcastChannelEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8071,
              "source": "\n  \"message\": MessageEvent;",
              "name": "\"message\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 8071,
                "source": " MessageEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8072,
              "source": "\n  \"messageerror\": MessageEvent;",
              "name": "\"messageerror\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 8072,
                "source": " MessageEvent"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8076,
          "name": "BroadcastChannel",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 8076,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Returns the channel name (as passed to the constructor).",
              "isMethod": false,
              "_": 8080,
              "source": "\n  /**\n   * Returns the channel name (as passed to the constructor).\n   */\n  readonly name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8080,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8081,
              "source": "\n  onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;",
              "name": "onmessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8081,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "BroadcastChannel",
                          "targs": [],
                          "isNullable": false,
                          "_": 8081,
                          "source": " BroadcastChannel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "MessageEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 8081,
                          "source": " MessageEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8081,
                    "source": " ((this: BroadcastChannel, ev: MessageEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 8081,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 8081,
                "source": " ((this: BroadcastChannel, ev: MessageEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8082,
              "source": "\n  onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;",
              "name": "onmessageerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8082,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "BroadcastChannel",
                          "targs": [],
                          "isNullable": false,
                          "_": 8082,
                          "source": " BroadcastChannel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "MessageEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 8082,
                          "source": " MessageEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8082,
                    "source": " ((this: BroadcastChannel, ev: MessageEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 8082,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 8082,
                "source": " ((this: BroadcastChannel, ev: MessageEvent) => any) | null"
              }
            },
            {
              "doc": "Closes the BroadcastChannel object, opening it up to garbage collection.",
              "isMethod": true,
              "_": 8086,
              "source": "\n  /**\n   * Closes the BroadcastChannel object, opening it up to garbage collection.\n   */\n  close(): void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8086,
                "source": " void"
              }
            },
            {
              "doc": "Sends the given message to other BroadcastChannel objects set up for\n this channel. Messages can be structured objects, e.g. nested objects\n and arrays.",
              "isMethod": true,
              "_": 8092,
              "source": "\n  /**\n   * Sends the given message to other BroadcastChannel objects set up for\n   * this channel. Messages can be structured objects, e.g. nested objects\n   * and arrays.\n   */\n  postMessage(message: any): void;",
              "name": "postMessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 8092,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8092,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 8093,
              "source": "\n  addEventListener<K extends keyof BroadcastChannelEventMap>(\n    type: K,\n    listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "BroadcastChannelEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 8093,
                      "source": " BroadcastChannelEventMap"
                    },
                    "isNullable": false,
                    "_": 8093,
                    "source": " keyof BroadcastChannelEventMap"
                  },
                  "_": 8093,
                  "source": "K extends keyof BroadcastChannelEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 8094,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8095,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "BroadcastChannel",
                          "targs": [],
                          "isNullable": false,
                          "_": 8095,
                          "source": " BroadcastChannel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 8095,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "BroadcastChannelEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 8095,
                            "source": " BroadcastChannelEventMap"
                          },
                          "isNullable": false,
                          "_": 8095,
                          "source": " BroadcastChannelEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8095,
                    "source": " (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8096,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8096,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8096,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8097,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 8098,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8099,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 8100,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8101,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8101,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8101,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8102,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 8103,
              "source": "\n  removeEventListener<K extends keyof BroadcastChannelEventMap>(\n    type: K,\n    listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "BroadcastChannelEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 8103,
                      "source": " BroadcastChannelEventMap"
                    },
                    "isNullable": false,
                    "_": 8103,
                    "source": " keyof BroadcastChannelEventMap"
                  },
                  "_": 8103,
                  "source": "K extends keyof BroadcastChannelEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 8104,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8105,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "BroadcastChannel",
                          "targs": [],
                          "isNullable": false,
                          "_": 8105,
                          "source": " BroadcastChannel"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 8105,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "BroadcastChannelEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 8105,
                            "source": " BroadcastChannelEventMap"
                          },
                          "isNullable": false,
                          "_": 8105,
                          "source": " BroadcastChannelEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8105,
                    "source": " (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8106,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8106,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8106,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8107,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 8108,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8109,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 8110,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8111,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8111,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8111,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8112,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline43",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8118,
              "source": "\n  new (name: string): BroadcastChannel;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8118,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "BroadcastChannel",
                "targs": [],
                "isNullable": false,
                "_": 8118,
                "source": " BroadcastChannel"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8117,
              "source": "\n  prototype: BroadcastChannel;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "BroadcastChannel",
                "targs": [],
                "isNullable": false,
                "_": 8117,
                "source": " BroadcastChannel"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 8860,
          "name": "VoidFunction",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [],
          "calls": [
            {
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8861,
                "source": " void"
              },
              "generics": [],
              "doc": "",
              "_": 8861,
              "source": "\n  (): void;"
            }
          ],
          "isClass": false
        },
        {
          "_": 8892,
          "name": "DOMStringList",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [
            {
              "key": {
                "core": "number",
                "isNullable": false,
                "_": 8899,
                "source": " number"
              },
              "value": {
                "core": "string",
                "isNullable": false,
                "_": 8899,
                "source": " string"
              },
              "doc": "",
              "_": 8899,
              "source": "\n  [index: number]: string;",
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false
            }
          ],
          "ctors": [],
          "members": [
            {
              "doc": "Returns the number of strings in strings.",
              "isMethod": false,
              "_": 8894,
              "source": "\n  /** Returns the number of strings in strings. */\n  readonly length: number;",
              "name": "length",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8894,
                "source": " number"
              }
            },
            {
              "doc": "Returns true if strings contains string, and false otherwise.",
              "isMethod": true,
              "_": 8896,
              "source": "\n  /** Returns true if strings contains string, and false otherwise. */\n  contains(string: string): boolean;",
              "name": "contains",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "string",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8896,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 8896,
                "source": " boolean"
              }
            },
            {
              "doc": "Returns the string with index index from strings.",
              "isMethod": true,
              "_": 8898,
              "source": "\n  /** Returns the string with index index from strings. */\n  item(index: number): string | null;",
              "name": "item",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "index",
                  "type": {
                    "core": "number",
                    "isNullable": false,
                    "_": 8898,
                    "source": " number"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "union": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 8898,
                    "source": " string"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 8898,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 8898,
                "source": " string | null"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8909,
          "name": "ErrorEventInit",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 8909,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8910,
              "source": "\n  message?: string;",
              "name": "message",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8910,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8911,
              "source": "\n  filename?: string;",
              "name": "filename",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8911,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8912,
              "source": "\n  lineno?: number;",
              "name": "lineno",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8912,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8913,
              "source": "\n  colno?: number;",
              "name": "colno",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8913,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8914,
              "source": "\n  error?: any;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 8914,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8918,
          "name": "ErrorEvent",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 8918,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8924,
              "source": "\n  constructor(type: string, eventInitDict?: ErrorEventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8924,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "ErrorEventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 8924,
                    "source": " ErrorEventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8919,
              "source": "\n  readonly message: string;",
              "name": "message",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8919,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8920,
              "source": "\n  readonly filename: string;",
              "name": "filename",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8920,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8921,
              "source": "\n  readonly lineno: number;",
              "name": "lineno",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8921,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8922,
              "source": "\n  readonly colno: number;",
              "name": "colno",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8922,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8923,
              "source": "\n  readonly error: any;",
              "name": "error",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 8923,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 8928,
          "name": "PromiseRejectionEventInit",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 8928,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8929,
              "source": "\n  promise: Promise<any>;",
              "name": "promise",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 8929,
                    "source": "any"
                  }
                ],
                "isNullable": false,
                "_": 8929,
                "source": " Promise<any>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8930,
              "source": "\n  reason?: any;",
              "name": "reason",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 8930,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8934,
          "name": "PromiseRejectionEvent",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 8934,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8937,
              "source": "\n  constructor(type: string, eventInitDict?: PromiseRejectionEventInit);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8937,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "PromiseRejectionEventInit",
                    "targs": [],
                    "isNullable": false,
                    "_": 8937,
                    "source": " PromiseRejectionEventInit"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8935,
              "source": "\n  readonly promise: Promise<any>;",
              "name": "promise",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 8935,
                    "source": "any"
                  }
                ],
                "isNullable": false,
                "_": 8935,
                "source": " Promise<any>"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8936,
              "source": "\n  readonly reason: any;",
              "name": "reason",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 8936,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 8941,
          "name": "AbstractWorkerEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8942,
              "source": "\n  \"error\": ErrorEvent;",
              "name": "\"error\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ErrorEvent",
                "targs": [],
                "isNullable": false,
                "_": 8942,
                "source": " ErrorEvent"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8946,
          "name": "WorkerEventMap",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "AbstractWorkerEventMap",
                "targs": [],
                "isNullable": false,
                "_": 8946,
                "source": " AbstractWorkerEventMap"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8947,
              "source": "\n  \"message\": MessageEvent;",
              "name": "\"message\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 8947,
                "source": " MessageEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8948,
              "source": "\n  \"messageerror\": MessageEvent;",
              "name": "\"messageerror\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "MessageEvent",
                "targs": [],
                "isNullable": false,
                "_": 8948,
                "source": " MessageEvent"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8952,
          "name": "WorkerOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8953,
              "source": "\n  type?: \"classic\" | \"module\";",
              "name": "type",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "core": "\"classic\"",
                    "isNullable": false,
                    "_": 8953,
                    "source": " \"classic\""
                  },
                  {
                    "core": "\"module\"",
                    "isNullable": false,
                    "_": 8953,
                    "source": " \"module\""
                  }
                ],
                "isNullable": false,
                "_": 8953,
                "source": " \"classic\" | \"module\""
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8954,
              "source": "\n  name?: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 8954,
                "source": " string"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 8958,
          "name": "Worker",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 8958,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8962,
              "source": "\n  constructor(\n    specifier: string | URL,\n    options?: WorkerOptions,\n  );",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "specifier",
                  "type": {
                    "union": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 8963,
                        "source": " string"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 8963,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 8963,
                    "source": " string | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "WorkerOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 8964,
                    "source": " WorkerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 8959,
              "source": "\n  onerror?: (e: ErrorEvent) => void;",
              "name": "onerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 8959,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "e",
                    "type": {
                      "ref": "ErrorEvent",
                      "targs": [],
                      "isNullable": false,
                      "_": 8959,
                      "source": " ErrorEvent"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 8959,
                "source": " (e: ErrorEvent) => void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8960,
              "source": "\n  onmessage?: (e: MessageEvent) => void;",
              "name": "onmessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 8960,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "e",
                    "type": {
                      "ref": "MessageEvent",
                      "targs": [],
                      "isNullable": false,
                      "_": 8960,
                      "source": " MessageEvent"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 8960,
                "source": " (e: MessageEvent) => void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 8961,
              "source": "\n  onmessageerror?: (e: MessageEvent) => void;",
              "name": "onmessageerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 8961,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "e",
                    "type": {
                      "ref": "MessageEvent",
                      "targs": [],
                      "isNullable": false,
                      "_": 8961,
                      "source": " MessageEvent"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 8961,
                "source": " (e: MessageEvent) => void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8966,
              "source": "\n  postMessage(message: any, transfer: Transferable[]): void;",
              "name": "postMessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 8966,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "transfer",
                  "type": {
                    "core": "array",
                    "targs": [
                      {
                        "ref": "Transferable",
                        "targs": [],
                        "isNullable": false,
                        "_": 8966,
                        "source": " Transferable"
                      }
                    ],
                    "isNullable": false,
                    "_": 8966,
                    "source": " Transferable[]"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8966,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8967,
              "source": "\n  postMessage(message: any, options?: StructuredSerializeOptions): void;",
              "name": "postMessage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "message",
                  "type": {
                    "core": "any",
                    "isNullable": false,
                    "_": 8967,
                    "source": " any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "StructuredSerializeOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 8967,
                    "source": " StructuredSerializeOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8967,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 8968,
              "source": "\n  addEventListener<K extends keyof WorkerEventMap>(\n    type: K,\n    listener: (this: Worker, ev: WorkerEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WorkerEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 8968,
                      "source": " WorkerEventMap"
                    },
                    "isNullable": false,
                    "_": 8968,
                    "source": " keyof WorkerEventMap"
                  },
                  "_": 8968,
                  "source": "K extends keyof WorkerEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 8969,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8970,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Worker",
                          "targs": [],
                          "isNullable": false,
                          "_": 8970,
                          "source": " Worker"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 8970,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WorkerEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 8970,
                            "source": " WorkerEventMap"
                          },
                          "isNullable": false,
                          "_": 8970,
                          "source": " WorkerEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8970,
                    "source": " (this: Worker, ev: WorkerEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8971,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8971,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8971,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8972,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 8973,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8974,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 8975,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8976,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8976,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8976,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8977,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 8978,
              "source": "\n  removeEventListener<K extends keyof WorkerEventMap>(\n    type: K,\n    listener: (this: Worker, ev: WorkerEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WorkerEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 8978,
                      "source": " WorkerEventMap"
                    },
                    "isNullable": false,
                    "_": 8978,
                    "source": " keyof WorkerEventMap"
                  },
                  "_": 8978,
                  "source": "K extends keyof WorkerEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 8979,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8980,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Worker",
                          "targs": [],
                          "isNullable": false,
                          "_": 8980,
                          "source": " Worker"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 8980,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WorkerEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 8980,
                            "source": " WorkerEventMap"
                          },
                          "isNullable": false,
                          "_": 8980,
                          "source": " WorkerEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 8980,
                    "source": " (this: Worker, ev: WorkerEventMap[K]) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8981,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8981,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8981,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8982,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 8983,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 8984,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 8985,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 8986,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 8986,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 8986,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8987,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 8988,
              "source": "\n  terminate(): void;",
              "name": "terminate",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 8988,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 8995,
          "name": "Performance",
          "generics": [],
          "doc": "Deno supports [User Timing Level 3](https://w3c.github.io/user-timing)\nwhich is not widely supported yet in other runtimes.\n\nCheck out the\n[Performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\ndocumentation on MDN for further information about how to use the API.",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 8995,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 8998,
              "source": "\n  constructor();",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": []
            }
          ],
          "members": [
            {
              "doc": "Returns a timestamp representing the start of the performance measurement.",
              "isMethod": false,
              "_": 8997,
              "source": "\n  /** Returns a timestamp representing the start of the performance measurement. */\n  readonly timeOrigin: number;",
              "name": "timeOrigin",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8997,
                "source": " number"
              }
            },
            {
              "doc": "Removes the stored timestamp with the associated name.",
              "isMethod": true,
              "_": 9001,
              "source": "\n\n  /** Removes the stored timestamp with the associated name. */\n  clearMarks(markName?: string): void;",
              "name": "clearMarks",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "markName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9001,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9001,
                "source": " void"
              }
            },
            {
              "doc": "Removes stored timestamp with the associated name.",
              "isMethod": true,
              "_": 9004,
              "source": "\n\n  /** Removes stored timestamp with the associated name. */\n  clearMeasures(measureName?: string): void;",
              "name": "clearMeasures",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "measureName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9004,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9004,
                "source": " void"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 9006,
              "source": "\n\n  getEntries(): PerformanceEntryList;",
              "name": "getEntries",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "PerformanceEntryList",
                "targs": [],
                "isNullable": false,
                "_": 9006,
                "source": " PerformanceEntryList"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 9007,
              "source": "\n  getEntriesByName(name: string, type?: string): PerformanceEntryList;",
              "name": "getEntriesByName",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9007,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9007,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceEntryList",
                "targs": [],
                "isNullable": false,
                "_": 9007,
                "source": " PerformanceEntryList"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 9008,
              "source": "\n  getEntriesByType(type: string): PerformanceEntryList;",
              "name": "getEntriesByType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9008,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "PerformanceEntryList",
                "targs": [],
                "isNullable": false,
                "_": 9008,
                "source": " PerformanceEntryList"
              }
            },
            {
              "doc": "Stores a timestamp with the associated name (a \"mark\").",
              "isMethod": true,
              "_": 9011,
              "source": "\n\n  /** Stores a timestamp with the associated name (a \"mark\"). */\n  mark(markName: string, options?: PerformanceMarkOptions): PerformanceMark;",
              "name": "mark",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "markName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9011,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PerformanceMarkOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9011,
                    "source": " PerformanceMarkOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceMark",
                "targs": [],
                "isNullable": false,
                "_": 9011,
                "source": " PerformanceMark"
              }
            },
            {
              "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\n associated name (a \"measure\").",
              "isMethod": true,
              "_": 9015,
              "source": "\n\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    options?: PerformanceMeasureOptions,\n  ): PerformanceMeasure;",
              "name": "measure",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "measureName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9016,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PerformanceMeasureOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9017,
                    "source": " PerformanceMeasureOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceMeasure",
                "targs": [],
                "isNullable": false,
                "_": 9018,
                "source": " PerformanceMeasure"
              }
            },
            {
              "doc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\n associated name (a \"measure\").",
              "isMethod": true,
              "_": 9021,
              "source": "\n  /** Stores the `DOMHighResTimeStamp` duration between two marks along with the\n   * associated name (a \"measure\"). */\n  measure(\n    measureName: string,\n    startMark?: string,\n    endMark?: string,\n  ): PerformanceMeasure;",
              "name": "measure",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "measureName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9022,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "startMark",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9023,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                },
                {
                  "name": "endMark",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9024,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "PerformanceMeasure",
                "targs": [],
                "isNullable": false,
                "_": 9025,
                "source": " PerformanceMeasure"
              }
            },
            {
              "doc": "Returns a current time from Deno's start in milliseconds.\n\n Use the permission flag `--allow-hrtime` return a precise value.\n\n ```ts\n const t = performance.now();\n console.log(`${t} ms since start!`);\n ```\n\n @tags allow-hrtime",
              "isMethod": true,
              "_": 9038,
              "source": "\n\n  /** Returns a current time from Deno's start in milliseconds.\n   *\n   * Use the permission flag `--allow-hrtime` return a precise value.\n   *\n   * ```ts\n   * const t = performance.now();\n   * console.log(`${t} ms since start!`);\n   * ```\n   *\n   * @tags allow-hrtime\n   */\n  now(): number;",
              "name": "now",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9038,
                "source": " number"
              }
            },
            {
              "doc": "Returns a JSON representation of the performance object.",
              "isMethod": true,
              "_": 9041,
              "source": "\n\n  /** Returns a JSON representation of the performance object. */\n  toJSON(): any;",
              "name": "toJSON",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9041,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9078,
          "name": "PerformanceEntry",
          "generics": [],
          "doc": "Encapsulates a single performance metric that is part of the performance\ntimeline. A performance entry can be directly created by making a performance\nmark or measure (for example by calling the `.mark()` method) at an explicit\npoint in an application.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9079,
              "source": "\n  readonly duration: number;",
              "name": "duration",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9079,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9080,
              "source": "\n  readonly entryType: string;",
              "name": "entryType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9080,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9081,
              "source": "\n  readonly name: string;",
              "name": "name",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9081,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9082,
              "source": "\n  readonly startTime: number;",
              "name": "startTime",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9082,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 9083,
              "source": "\n  toJSON(): any;",
              "name": "toJSON",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9083,
                "source": " any"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9093,
          "name": "PerformanceMark",
          "generics": [],
          "doc": "`PerformanceMark`Â is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"mark\"`. Entries of this type are created by calling\n`performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the\nperformance timeline.",
          "heritage": [
            [
              {
                "ref": "PerformanceEntry",
                "targs": [],
                "isNullable": false,
                "_": 9093,
                "source": " PerformanceEntry"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9096,
              "source": "\n  constructor(name: string, options?: PerformanceMarkOptions);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9096,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "PerformanceMarkOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9096,
                    "source": " PerformanceMarkOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9094,
              "source": "\n  readonly detail: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9094,
                "source": " any"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9095,
              "source": "\n  readonly entryType: \"mark\";",
              "name": "entryType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "\"mark\"",
                "isNullable": false,
                "_": 9095,
                "source": " \"mark\""
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9106,
          "name": "PerformanceMeasure",
          "generics": [],
          "doc": "`PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"measure\"`. Entries of this type are created by calling\n`performance.measure()` to add a named `DOMHighResTimeStamp` (the measure)\nbetween two marks to the performance timeline.",
          "heritage": [
            [
              {
                "ref": "PerformanceEntry",
                "targs": [],
                "isNullable": false,
                "_": 9106,
                "source": " PerformanceEntry"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9107,
              "source": "\n  readonly detail: any;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 9107,
                "source": " any"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9108,
              "source": "\n  readonly entryType: \"measure\";",
              "name": "entryType",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "\"measure\"",
                "isNullable": false,
                "_": 9108,
                "source": " \"measure\""
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9112,
          "name": "CustomEventInit",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 9112,
                "source": " any"
              },
              "_": 9112,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventInit",
                "targs": [],
                "isNullable": false,
                "_": 9112,
                "source": " EventInit"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9113,
              "source": "\n  detail?: T;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 9113,
                "source": " T"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 9117,
          "name": "CustomEvent",
          "generics": [
            {
              "name": "T",
              "default": {
                "core": "any",
                "isNullable": false,
                "_": 9117,
                "source": " any"
              },
              "_": 9117,
              "source": "T = any"
            }
          ],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 9117,
                "source": " Event"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9118,
              "source": "\n  constructor(typeArg: string, eventInitDict?: CustomEventInit<T>);",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "typeArg",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9118,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "eventInitDict",
                  "type": {
                    "ref": "CustomEventInit",
                    "targs": [
                      {
                        "ref": "T",
                        "targs": [],
                        "isNullable": false,
                        "_": 9118,
                        "source": "T"
                      }
                    ],
                    "isNullable": false,
                    "_": 9118,
                    "source": " CustomEventInit<T>"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ]
            }
          ],
          "members": [
            {
              "doc": "Returns any custom data event was created with. Typically used for\nsynthetic events.",
              "isMethod": false,
              "_": 9121,
              "source": "\n  /** Returns any custom data event was created with. Typically used for\n   * synthetic events. */\n  readonly detail: T;",
              "name": "detail",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "T",
                "targs": [],
                "isNullable": false,
                "_": 9121,
                "source": " T"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9125,
          "name": "ErrorConstructor",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "See https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions.",
              "isMethod": true,
              "_": 9127,
              "source": "\n  /** See https://v8.dev/docs/stack-trace-api#stack-trace-collection-for-custom-exceptions. */\n  captureStackTrace(error: Object, constructor?: Function): void;",
              "name": "captureStackTrace",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "error",
                  "type": {
                    "ref": "Object",
                    "targs": [],
                    "isNullable": false,
                    "_": 9127,
                    "source": " Object"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "constructor",
                  "type": {
                    "ref": "Function",
                    "targs": [],
                    "isNullable": false,
                    "_": 9127,
                    "source": " Function"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9127,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 9143,
          "name": "CacheStorage",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Open a cache storage for the provided name.",
              "isMethod": true,
              "_": 9145,
              "source": "\n  /** Open a cache storage for the provided name. */\n  open(cacheName: string): Promise<Cache>;",
              "name": "open",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "cacheName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9145,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "ref": "Cache",
                    "targs": [],
                    "isNullable": false,
                    "_": 9145,
                    "source": "Cache"
                  }
                ],
                "isNullable": false,
                "_": 9145,
                "source": " Promise<Cache>"
              }
            },
            {
              "doc": "Check if cache already exists for the provided name.",
              "isMethod": true,
              "_": 9147,
              "source": "\n  /** Check if cache already exists for the provided name. */\n  has(cacheName: string): Promise<boolean>;",
              "name": "has",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "cacheName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9147,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9147,
                    "source": "boolean"
                  }
                ],
                "isNullable": false,
                "_": 9147,
                "source": " Promise<boolean>"
              }
            },
            {
              "doc": "Delete cache storage for the provided name.",
              "isMethod": true,
              "_": 9149,
              "source": "\n  /** Delete cache storage for the provided name. */\n  delete(cacheName: string): Promise<boolean>;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "cacheName",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9149,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9149,
                    "source": "boolean"
                  }
                ],
                "isNullable": false,
                "_": 9149,
                "source": " Promise<boolean>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 9153,
          "name": "Cache",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "Put the provided request/response into the cache.\n\n How is the API different from browsers?\n 1. You cannot match cache objects using by relative paths.\n 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.",
              "isMethod": true,
              "_": 9161,
              "source": "\n  /**\n   * Put the provided request/response into the cache.\n   *\n   * How is the API different from browsers?\n   * 1. You cannot match cache objects using by relative paths.\n   * 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n   */\n  put(request: RequestInfo | URL, response: Response): Promise<void>;",
              "name": "put",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "request",
                  "type": {
                    "union": [
                      {
                        "ref": "RequestInfo",
                        "targs": [],
                        "isNullable": false,
                        "_": 9161,
                        "source": " RequestInfo"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 9161,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 9161,
                    "source": " RequestInfo | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "response",
                  "type": {
                    "ref": "Response",
                    "targs": [],
                    "isNullable": false,
                    "_": 9161,
                    "source": " Response"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "void",
                    "isNullable": false,
                    "_": 9161,
                    "source": "void"
                  }
                ],
                "isNullable": false,
                "_": 9161,
                "source": " Promise<void>"
              }
            },
            {
              "doc": "Return cache object matching the provided request.\n\n How is the API different from browsers?\n 1. You cannot match cache objects using by relative paths.\n 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.",
              "isMethod": true,
              "_": 9169,
              "source": "\n  /**\n   * Return cache object matching the provided request.\n   *\n   * How is the API different from browsers?\n   * 1. You cannot match cache objects using by relative paths.\n   * 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n   */\n  match(\n    request: RequestInfo | URL,\n    options?: CacheQueryOptions,\n  ): Promise<Response | undefined>;",
              "name": "match",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "request",
                  "type": {
                    "union": [
                      {
                        "ref": "RequestInfo",
                        "targs": [],
                        "isNullable": false,
                        "_": 9170,
                        "source": " RequestInfo"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 9170,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 9170,
                    "source": " RequestInfo | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "CacheQueryOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9171,
                    "source": " CacheQueryOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "union": [
                      {
                        "ref": "Response",
                        "targs": [],
                        "isNullable": false,
                        "_": 9172,
                        "source": "Response"
                      },
                      {
                        "core": "undefined",
                        "isNullable": false,
                        "_": 9172,
                        "source": " undefined"
                      }
                    ],
                    "isNullable": false,
                    "_": 9172,
                    "source": "Response | undefined"
                  }
                ],
                "isNullable": false,
                "_": 9172,
                "source": " Promise<Response | undefined>"
              }
            },
            {
              "doc": "Delete cache object matching the provided request.\n\n How is the API different from browsers?\n 1. You cannot delete cache objects using by relative paths.\n 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.",
              "isMethod": true,
              "_": 9180,
              "source": "\n  /**\n   * Delete cache object matching the provided request.\n   *\n   * How is the API different from browsers?\n   * 1. You cannot delete cache objects using by relative paths.\n   * 2. You cannot pass options like `ignoreVary`, `ignoreMethod`, `ignoreSearch`.\n   */\n  delete(\n    request: RequestInfo | URL,\n    options?: CacheQueryOptions,\n  ): Promise<boolean>;",
              "name": "delete",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "request",
                  "type": {
                    "union": [
                      {
                        "ref": "RequestInfo",
                        "targs": [],
                        "isNullable": false,
                        "_": 9181,
                        "source": " RequestInfo"
                      },
                      {
                        "ref": "URL",
                        "targs": [],
                        "isNullable": false,
                        "_": 9181,
                        "source": " URL"
                      }
                    ],
                    "isNullable": false,
                    "_": 9181,
                    "source": " RequestInfo | URL"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "ref": "CacheQueryOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9182,
                    "source": " CacheQueryOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "ref": "Promise",
                "targs": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9183,
                    "source": "boolean"
                  }
                ],
                "isNullable": false,
                "_": 9183,
                "source": " Promise<boolean>"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline45",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9189,
              "source": "\n  new (name: string): Cache;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "name",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9189,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "ref": "Cache",
                "targs": [],
                "isNullable": false,
                "_": 9189,
                "source": " Cache"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9188,
              "source": "\n  prototype: Cache;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Cache",
                "targs": [],
                "isNullable": false,
                "_": 9188,
                "source": " Cache"
              }
            }
          ],
          "calls": []
        },
        {
          "isClass": false,
          "_": -1,
          "name": "IInline46",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": true,
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9195,
              "source": "\n  new (): CacheStorage;",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "CacheStorage",
                "targs": [],
                "isNullable": false,
                "_": 9195,
                "source": " CacheStorage"
              }
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9194,
              "source": "\n  prototype: CacheStorage;",
              "name": "prototype",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CacheStorage",
                "targs": [],
                "isNullable": false,
                "_": 9194,
                "source": " CacheStorage"
              }
            }
          ],
          "calls": []
        },
        {
          "_": 9199,
          "name": "CacheQueryOptions",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9200,
              "source": "\n  ignoreMethod?: boolean;",
              "name": "ignoreMethod",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 9200,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9201,
              "source": "\n  ignoreSearch?: boolean;",
              "name": "ignoreSearch",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 9201,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9202,
              "source": "\n  ignoreVary?: boolean;",
              "name": "ignoreVary",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": true,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 9202,
                "source": " boolean"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 9215,
          "name": "WindowEventMap",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9216,
              "source": "\n  \"error\": ErrorEvent;",
              "name": "\"error\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "ErrorEvent",
                "targs": [],
                "isNullable": false,
                "_": 9216,
                "source": " ErrorEvent"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9217,
              "source": "\n  \"unhandledrejection\": PromiseRejectionEvent;",
              "name": "\"unhandledrejection\"",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "PromiseRejectionEvent",
                "targs": [],
                "isNullable": false,
                "_": 9217,
                "source": " PromiseRejectionEvent"
              }
            }
          ],
          "calls": [],
          "isClass": false
        },
        {
          "_": 9221,
          "name": "Window",
          "generics": [],
          "doc": "",
          "heritage": [
            [
              {
                "ref": "EventTarget",
                "targs": [],
                "isNullable": false,
                "_": 9221,
                "source": " EventTarget"
              }
            ]
          ],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [],
          "members": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9222,
              "source": "\n  new(): Window;",
              "name": "new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "ref": "Window",
                "targs": [],
                "isNullable": false,
                "_": 9222,
                "source": " Window"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9223,
              "source": "\n  readonly window: Window & typeof globalThis;",
              "name": "window",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "intersect": [
                  {
                    "ref": "Window",
                    "targs": [],
                    "isNullable": false,
                    "_": 9223,
                    "source": " Window"
                  },
                  {
                    "accessor": "globalThis",
                    "_": 9223,
                    "isNullable": false,
                    "source": " typeof globalThis"
                  }
                ],
                "isNullable": false,
                "_": 9223,
                "source": " Window & typeof globalThis"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9224,
              "source": "\n  readonly self: Window & typeof globalThis;",
              "name": "self",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "intersect": [
                  {
                    "ref": "Window",
                    "targs": [],
                    "isNullable": false,
                    "_": 9224,
                    "source": " Window"
                  },
                  {
                    "accessor": "globalThis",
                    "_": 9224,
                    "isNullable": false,
                    "source": " typeof globalThis"
                  }
                ],
                "isNullable": false,
                "_": 9224,
                "source": " Window & typeof globalThis"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9225,
              "source": "\n  onerror: ((this: Window, ev: ErrorEvent) => any) | null;",
              "name": "onerror",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9225,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9225,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "ErrorEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 9225,
                          "source": " ErrorEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9225,
                    "source": " ((this: Window, ev: ErrorEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 9225,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 9225,
                "source": " ((this: Window, ev: ErrorEvent) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9226,
              "source": "\n  onload: ((this: Window, ev: Event) => any) | null;",
              "name": "onload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9226,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9226,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "Event",
                          "targs": [],
                          "isNullable": false,
                          "_": 9226,
                          "source": " Event"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9226,
                    "source": " ((this: Window, ev: Event) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 9226,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 9226,
                "source": " ((this: Window, ev: Event) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9227,
              "source": "\n  onbeforeunload: ((this: Window, ev: Event) => any) | null;",
              "name": "onbeforeunload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9227,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9227,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "Event",
                          "targs": [],
                          "isNullable": false,
                          "_": 9227,
                          "source": " Event"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9227,
                    "source": " ((this: Window, ev: Event) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 9227,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 9227,
                "source": " ((this: Window, ev: Event) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9228,
              "source": "\n  onunload: ((this: Window, ev: Event) => any) | null;",
              "name": "onunload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9228,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9228,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "Event",
                          "targs": [],
                          "isNullable": false,
                          "_": 9228,
                          "source": " Event"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9228,
                    "source": " ((this: Window, ev: Event) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 9228,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 9228,
                "source": " ((this: Window, ev: Event) => any) | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9229,
              "source": "\n  onunhandledrejection:\n    | ((this: Window, ev: PromiseRejectionEvent) => any)\n    | null;",
              "name": "onunhandledrejection",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "union": [
                  {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9230,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9230,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "ref": "PromiseRejectionEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 9230,
                          "source": " PromiseRejectionEvent"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9230,
                    "source": " ((this: Window, ev: PromiseRejectionEvent) => any)"
                  },
                  {
                    "core": "null",
                    "isNullable": false,
                    "_": 9231,
                    "source": " null"
                  }
                ],
                "isNullable": false,
                "_": 9230,
                "source": "\n    | ((this: Window, ev: PromiseRejectionEvent) => any)\n    | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9232,
              "source": "\n  close: () => void;",
              "name": "close",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 9232,
                  "source": " void"
                },
                "params": [],
                "isNullable": false,
                "_": 9232,
                "source": " () => void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9233,
              "source": "\n  readonly closed: boolean;",
              "name": "closed",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "boolean",
                "isNullable": false,
                "_": 9233,
                "source": " boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9234,
              "source": "\n  alert: (message?: string) => void;",
              "name": "alert",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 9234,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "message",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9234,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "isNullable": false,
                "_": 9234,
                "source": " (message?: string) => void"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9235,
              "source": "\n  confirm: (message?: string) => boolean;",
              "name": "confirm",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "boolean",
                  "isNullable": false,
                  "_": 9235,
                  "source": " boolean"
                },
                "params": [
                  {
                    "name": "message",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9235,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "isNullable": false,
                "_": 9235,
                "source": " (message?: string) => boolean"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9236,
              "source": "\n  prompt: (message?: string, defaultValue?: string) => string | null;",
              "name": "prompt",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "union": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 9236,
                      "source": " string"
                    },
                    {
                      "core": "null",
                      "isNullable": false,
                      "_": 9236,
                      "source": " null"
                    }
                  ],
                  "isNullable": false,
                  "_": 9236,
                  "source": " string | null"
                },
                "params": [
                  {
                    "name": "message",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9236,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": true
                  },
                  {
                    "name": "defaultValue",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 9236,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "isNullable": false,
                "_": 9236,
                "source": " (message?: string, defaultValue?: string) => string | null"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9237,
              "source": "\n  Deno: typeof Deno;",
              "name": "Deno",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "accessor": "Deno",
                "_": 9237,
                "isNullable": false,
                "source": " typeof Deno"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9238,
              "source": "\n  Navigator: typeof Navigator;",
              "name": "Navigator",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "accessor": "Navigator",
                "_": 9238,
                "isNullable": false,
                "source": " typeof Navigator"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9239,
              "source": "\n  navigator: Navigator;",
              "name": "navigator",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Navigator",
                "targs": [],
                "isNullable": false,
                "_": 9239,
                "source": " Navigator"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9240,
              "source": "\n  Location: typeof Location;",
              "name": "Location",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "accessor": "Location",
                "_": 9240,
                "isNullable": false,
                "source": " typeof Location"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9241,
              "source": "\n  location: Location;",
              "name": "location",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Location",
                "targs": [],
                "isNullable": false,
                "_": 9241,
                "source": " Location"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9242,
              "source": "\n  localStorage: Storage;",
              "name": "localStorage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Storage",
                "targs": [],
                "isNullable": false,
                "_": 9242,
                "source": " Storage"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9243,
              "source": "\n  sessionStorage: Storage;",
              "name": "sessionStorage",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "Storage",
                "targs": [],
                "isNullable": false,
                "_": 9243,
                "source": " Storage"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9244,
              "source": "\n  caches: CacheStorage;",
              "name": "caches",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "ref": "CacheStorage",
                "targs": [],
                "isNullable": false,
                "_": 9244,
                "source": " CacheStorage"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 9246,
              "source": "\n\n  addEventListener<K extends keyof WindowEventMap>(\n    type: K,\n    listener: (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WindowEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 9246,
                      "source": " WindowEventMap"
                    },
                    "isNullable": false,
                    "_": 9246,
                    "source": " keyof WindowEventMap"
                  },
                  "_": 9246,
                  "source": "K extends keyof WindowEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 9247,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9251,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9249,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 9250,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WindowEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 9250,
                            "source": " WindowEventMap"
                          },
                          "isNullable": false,
                          "_": 9250,
                          "source": " WindowEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9248,
                    "source": " (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9252,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 9252,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 9252,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9253,
                "source": " void"
              }
            },
            {
              "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
              "isMethod": true,
              "_": 9254,
              "source": "\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void;",
              "name": "addEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9255,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 9256,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9257,
                        "source": " boolean"
                      },
                      {
                        "ref": "AddEventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 9257,
                        "source": " AddEventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 9257,
                    "source": " boolean | AddEventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9258,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 9259,
              "source": "\n  removeEventListener<K extends keyof WindowEventMap>(\n    type: K,\n    listener: (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [
                {
                  "name": "K",
                  "constraint": {
                    "operator": 141,
                    "type": {
                      "ref": "WindowEventMap",
                      "targs": [],
                      "isNullable": false,
                      "_": 9259,
                      "source": " WindowEventMap"
                    },
                    "isNullable": false,
                    "_": 9259,
                    "source": " keyof WindowEventMap"
                  },
                  "_": 9259,
                  "source": "K extends keyof WindowEventMap"
                }
              ],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "ref": "K",
                    "targs": [],
                    "isNullable": false,
                    "_": 9260,
                    "source": " K"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ctor": false,
                    "generics": [],
                    "returns": {
                      "core": "any",
                      "isNullable": false,
                      "_": 9264,
                      "source": " any"
                    },
                    "params": [
                      {
                        "name": "this",
                        "type": {
                          "ref": "Window",
                          "targs": [],
                          "isNullable": false,
                          "_": 9262,
                          "source": " Window"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "ev",
                        "type": {
                          "index": {
                            "ref": "K",
                            "targs": [],
                            "isNullable": false,
                            "_": 9263,
                            "source": "K"
                          },
                          "obj": {
                            "ref": "WindowEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 9263,
                            "source": " WindowEventMap"
                          },
                          "isNullable": false,
                          "_": 9263,
                          "source": " WindowEventMap[K]"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "isNullable": false,
                    "_": 9261,
                    "source": " (\n      this: Window,\n      ev: WindowEventMap[K],\n    ) => any"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9265,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 9265,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 9265,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9266,
                "source": " void"
              }
            },
            {
              "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
              "isMethod": true,
              "_": 9267,
              "source": "\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void;",
              "name": "removeEventListener",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "type",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9268,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "listener",
                  "type": {
                    "ref": "EventListenerOrEventListenerObject",
                    "targs": [],
                    "isNullable": false,
                    "_": 9269,
                    "source": " EventListenerOrEventListenerObject"
                  },
                  "varargs": false,
                  "isNullable": false
                },
                {
                  "name": "options",
                  "type": {
                    "union": [
                      {
                        "core": "boolean",
                        "isNullable": false,
                        "_": 9270,
                        "source": " boolean"
                      },
                      {
                        "ref": "EventListenerOptions",
                        "targs": [],
                        "isNullable": false,
                        "_": 9270,
                        "source": " EventListenerOptions"
                      }
                    ],
                    "isNullable": false,
                    "_": 9270,
                    "source": " boolean | EventListenerOptions"
                  },
                  "varargs": false,
                  "isNullable": true
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9271,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9298,
          "name": "Navigator",
          "generics": [],
          "doc": "",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9299,
              "source": "\n  constructor();",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": []
            }
          ],
          "members": [
            {
              "doc": "",
              "isMethod": false,
              "_": 9300,
              "source": "\n  readonly hardwareConcurrency: number;",
              "name": "hardwareConcurrency",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 9300,
                "source": " number"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9301,
              "source": "\n  readonly userAgent: string;",
              "name": "userAgent",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9301,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9302,
              "source": "\n  readonly language: string;",
              "name": "language",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9302,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": false,
              "_": 9303,
              "source": "\n  readonly languages: string[];",
              "name": "languages",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "array",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 9303,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 9303,
                "source": " string[]"
              }
            }
          ],
          "calls": [],
          "isClass": true
        },
        {
          "_": 9406,
          "name": "Location",
          "generics": [],
          "doc": "The location (URL) of the object it is linked to. Changes done on it are\nreflected on the object it relates to. Accessible via\n`globalThis.location`.",
          "heritage": [],
          "isInline": false,
          "parent": "",
          "source": "",
          "indexes": [],
          "ctors": [
            {
              "doc": "",
              "isMethod": true,
              "_": 9407,
              "source": "\n  constructor();",
              "name": "__new",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": []
            }
          ],
          "members": [
            {
              "doc": "Returns a DOMStringList object listing the origins of the ancestor\nbrowsing contexts, from the parent browsing context to the top-level\nbrowsing context.\n\nAlways empty in Deno.",
              "isMethod": false,
              "_": 9413,
              "source": "\n  /** Returns a DOMStringList object listing the origins of the ancestor\n   * browsing contexts, from the parent browsing context to the top-level\n   * browsing context.\n   *\n   * Always empty in Deno. */\n  readonly ancestorOrigins: DOMStringList;",
              "name": "ancestorOrigins",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "ref": "DOMStringList",
                "targs": [],
                "isNullable": false,
                "_": 9413,
                "source": " DOMStringList"
              }
            },
            {
              "doc": "Returns the Location object's URL's fragment (includes leading \"#\" if\n non-empty).\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9418,
              "source": "\n  /** Returns the Location object's URL's fragment (includes leading \"#\" if\n   * non-empty).\n   *\n   * Cannot be set in Deno. */\n  hash: string;",
              "name": "hash",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9418,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's host and port (if different from the\n default port for the scheme).\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9423,
              "source": "\n  /** Returns the Location object's URL's host and port (if different from the\n   * default port for the scheme).\n   *\n   * Cannot be set in Deno. */\n  host: string;",
              "name": "host",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9423,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's host.\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9427,
              "source": "\n  /** Returns the Location object's URL's host.\n   *\n   * Cannot be set in Deno. */\n  hostname: string;",
              "name": "hostname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9427,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL.\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9431,
              "source": "\n  /** Returns the Location object's URL.\n   *\n   * Cannot be set in Deno. */\n  href: string;",
              "name": "href",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9431,
                "source": " string"
              }
            },
            {
              "doc": "",
              "isMethod": true,
              "_": 9432,
              "source": "\n  toString(): string;",
              "name": "toString",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9432,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's origin.",
              "isMethod": false,
              "_": 9434,
              "source": "\n  /** Returns the Location object's URL's origin. */\n  readonly origin: string;",
              "name": "origin",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": true,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9434,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's path.\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9438,
              "source": "\n  /** Returns the Location object's URL's path.\n   *\n   * Cannot be set in Deno. */\n  pathname: string;",
              "name": "pathname",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9438,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's port.\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9442,
              "source": "\n  /** Returns the Location object's URL's port.\n   *\n   * Cannot be set in Deno. */\n  port: string;",
              "name": "port",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9442,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's scheme.\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9446,
              "source": "\n  /** Returns the Location object's URL's scheme.\n   *\n   * Cannot be set in Deno. */\n  protocol: string;",
              "name": "protocol",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9446,
                "source": " string"
              }
            },
            {
              "doc": "Returns the Location object's URL's query (includes leading \"?\" if\n non-empty).\n\n Cannot be set in Deno.",
              "isMethod": false,
              "_": 9451,
              "source": "\n  /** Returns the Location object's URL's query (includes leading \"?\" if\n   * non-empty).\n   *\n   * Cannot be set in Deno. */\n  search: string;",
              "name": "search",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9451,
                "source": " string"
              }
            },
            {
              "doc": "Navigates to the given URL.\n\n Cannot be set in Deno.",
              "isMethod": true,
              "_": 9455,
              "source": "\n  /** Navigates to the given URL.\n   *\n   * Cannot be set in Deno. */\n  assign(url: string): void;",
              "name": "assign",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9455,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9455,
                "source": " void"
              }
            },
            {
              "doc": "Reloads the current page.\n\n Disabled in Deno.",
              "isMethod": true,
              "_": 9459,
              "source": "\n  /** Reloads the current page.\n   *\n   * Disabled in Deno. */\n  reload(): void;",
              "name": "reload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9459,
                "source": " void"
              }
            },
            {
              "doc": "@deprecated",
              "isMethod": true,
              "_": 9461,
              "source": "\n  /** @deprecated */\n  reload(forcedReload: boolean): void;",
              "name": "reload",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "forcedReload",
                  "type": {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9461,
                    "source": " boolean"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9461,
                "source": " void"
              }
            },
            {
              "doc": "Removes the current page from the session history and navigates to the\n given URL.\n\n Disabled in Deno.",
              "isMethod": true,
              "_": 9466,
              "source": "\n  /** Removes the current page from the session history and navigates to the\n   * given URL.\n   *\n   * Disabled in Deno. */\n  replace(url: string): void;",
              "name": "replace",
              "generics": [],
              "isGetter": false,
              "isSetter": false,
              "isNullable": false,
              "isStatic": false,
              "isReadonly": false,
              "isPrivate": false,
              "params": [
                {
                  "name": "url",
                  "type": {
                    "core": "string",
                    "isNullable": false,
                    "_": 9466,
                    "source": " string"
                  },
                  "varargs": false,
                  "isNullable": false
                }
              ],
              "type": {
                "core": "void",
                "isNullable": false,
                "_": 9466,
                "source": " void"
              }
            }
          ],
          "calls": [],
          "isClass": true
        }
      ],
      "typedefs": [
        {
          "name": "URLPatternInput",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "string",
                "isNullable": false,
                "_": 5846,
                "source": " string"
              },
              {
                "ref": "URLPatternInit",
                "targs": [],
                "isNullable": false,
                "_": 5846,
                "source": " URLPatternInit"
              }
            ],
            "isNullable": false,
            "_": 5846,
            "source": " string | URLPatternInit",
            "parent": "URLPatternInput"
          },
          "doc": "",
          "_": 5846,
          "source": "\n\n/** @category Web APIs */\ndeclare type URLPatternInput = string | URLPatternInit;"
        },
        {
          "name": "EventListenerOrEventListenerObject",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "EventListener",
                "targs": [],
                "isNullable": false,
                "_": 6126,
                "source": " EventListener"
              },
              {
                "ref": "EventListenerObject",
                "targs": [],
                "isNullable": false,
                "_": 6127,
                "source": " EventListenerObject"
              }
            ],
            "isNullable": false,
            "_": 6126,
            "source": "\n  | EventListener\n  | EventListenerObject",
            "parent": "EventListenerOrEventListenerObject"
          },
          "doc": "",
          "_": 6125,
          "source": "\n\n/** @category DOM Events */\ndeclare type EventListenerOrEventListenerObject =\n  | EventListener\n  | EventListenerObject;"
        },
        {
          "name": "BlobPart",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 6398,
                "source": " BufferSource"
              },
              {
                "ref": "Blob",
                "targs": [],
                "isNullable": false,
                "_": 6398,
                "source": " Blob"
              },
              {
                "core": "string",
                "isNullable": false,
                "_": 6398,
                "source": " string"
              }
            ],
            "isNullable": false,
            "_": 6398,
            "source": " BufferSource | Blob | string",
            "parent": "BlobPart"
          },
          "doc": "",
          "_": 6398,
          "source": "\n\n/** @category Web File API */\ntype BlobPart = BufferSource | Blob | string;"
        },
        {
          "name": "ReadableStreamDefaultReadResult",
          "generics": [
            {
              "name": "T",
              "_": 6458,
              "source": "T"
            }
          ],
          "type": {
            "union": [
              {
                "ref": "ReadableStreamDefaultReadValueResult",
                "targs": [
                  {
                    "ref": "T",
                    "targs": [],
                    "isNullable": false,
                    "_": 6459,
                    "source": "T"
                  }
                ],
                "isNullable": false,
                "_": 6459,
                "source": " ReadableStreamDefaultReadValueResult<T>"
              },
              {
                "ref": "ReadableStreamDefaultReadDoneResult",
                "targs": [],
                "isNullable": false,
                "_": 6460,
                "source": " ReadableStreamDefaultReadDoneResult"
              }
            ],
            "isNullable": false,
            "_": 6459,
            "source": "\n  | ReadableStreamDefaultReadValueResult<T>\n  | ReadableStreamDefaultReadDoneResult",
            "parent": "ReadableStreamDefaultReadResult"
          },
          "doc": "",
          "_": 6458,
          "source": "\n\n/** @category Streams API */\ntype ReadableStreamDefaultReadResult<T> =\n  | ReadableStreamDefaultReadValueResult<T>\n  | ReadableStreamDefaultReadDoneResult;"
        },
        {
          "name": "ReadableStreamBYOBReadResult",
          "generics": [
            {
              "name": "V",
              "constraint": {
                "ref": "ArrayBufferView",
                "targs": [],
                "isNullable": false,
                "_": 6489,
                "source": " ArrayBufferView"
              },
              "_": 6489,
              "source": "V extends ArrayBufferView"
            }
          ],
          "type": {
            "union": [
              {
                "ref": "ReadableStreamBYOBReadDoneResult",
                "targs": [
                  {
                    "ref": "V",
                    "targs": [],
                    "isNullable": false,
                    "_": 6490,
                    "source": "V"
                  }
                ],
                "isNullable": false,
                "_": 6490,
                "source": " ReadableStreamBYOBReadDoneResult<V>"
              },
              {
                "ref": "ReadableStreamBYOBReadValueResult",
                "targs": [
                  {
                    "ref": "V",
                    "targs": [],
                    "isNullable": false,
                    "_": 6491,
                    "source": "V"
                  }
                ],
                "isNullable": false,
                "_": 6491,
                "source": " ReadableStreamBYOBReadValueResult<V>"
              }
            ],
            "isNullable": false,
            "_": 6490,
            "source": "\n  | ReadableStreamBYOBReadDoneResult<V>\n  | ReadableStreamBYOBReadValueResult<V>",
            "parent": "ReadableStreamBYOBReadResult"
          },
          "doc": "",
          "_": 6489,
          "source": "\n\n/** @category Streams API */\ntype ReadableStreamBYOBReadResult<V extends ArrayBufferView> =\n  | ReadableStreamBYOBReadDoneResult<V>\n  | ReadableStreamBYOBReadValueResult<V>;"
        },
        {
          "name": "Transferable",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "ArrayBuffer",
                "targs": [],
                "isNullable": false,
                "_": 6826,
                "source": " ArrayBuffer"
              },
              {
                "ref": "MessagePort",
                "targs": [],
                "isNullable": false,
                "_": 6826,
                "source": " MessagePort"
              }
            ],
            "isNullable": false,
            "_": 6826,
            "source": " ArrayBuffer | MessagePort",
            "parent": "Transferable"
          },
          "doc": "",
          "_": 6826,
          "source": "\n\n/** @category DOM APIs */\ntype Transferable = ArrayBuffer | MessagePort;"
        },
        {
          "name": "PostMessageOptions",
          "generics": [],
          "type": {
            "ref": "StructuredSerializeOptions",
            "targs": [],
            "isNullable": false,
            "_": 6835,
            "source": " StructuredSerializeOptions",
            "parent": "PostMessageOptions"
          },
          "doc": "This type has been renamed to StructuredSerializeOptions. Use that type for\nnew code.",
          "_": 6835,
          "source": "\n\n/**\n * This type has been renamed to StructuredSerializeOptions. Use that type for\n * new code.\n *\n * @deprecated use `StructuredSerializeOptions` instead.\n * @category DOM APIs\n */\ntype PostMessageOptions = StructuredSerializeOptions;"
        },
        {
          "name": "FormDataEntryValue",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "File",
                "targs": [],
                "isNullable": false,
                "_": 7038,
                "source": " File"
              },
              {
                "core": "string",
                "isNullable": false,
                "_": 7038,
                "source": " string"
              }
            ],
            "isNullable": false,
            "_": 7038,
            "source": " File | string",
            "parent": "FormDataEntryValue"
          },
          "doc": "",
          "_": 7038,
          "source": "\n\n/** @category Fetch API */\ntype FormDataEntryValue = File | string;"
        },
        {
          "name": "HeadersInit",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "Headers",
                "targs": [],
                "isNullable": false,
                "_": 7101,
                "source": " Headers"
              },
              {
                "core": "array",
                "targs": [
                  {
                    "core": "array",
                    "targs": [
                      {
                        "core": "string",
                        "isNullable": false,
                        "_": 7101,
                        "source": " string"
                      }
                    ],
                    "isNullable": false,
                    "_": 7101,
                    "source": " string[]"
                  }
                ],
                "isNullable": false,
                "_": 7101,
                "source": " string[][]"
              },
              {
                "ref": "Record",
                "targs": [
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7101,
                    "source": "string"
                  },
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7101,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 7101,
                "source": " Record<string, string>"
              }
            ],
            "isNullable": false,
            "_": 7101,
            "source": " Headers | string[][] | Record<string, string>",
            "parent": "HeadersInit"
          },
          "doc": "",
          "_": 7101,
          "source": "\n\n/** @category Fetch API */\ntype HeadersInit = Headers | string[][] | Record<string, string>;"
        },
        {
          "name": "RequestInfo",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "Request",
                "targs": [],
                "isNullable": false,
                "_": 7171,
                "source": " Request"
              },
              {
                "core": "string",
                "isNullable": false,
                "_": 7171,
                "source": " string"
              }
            ],
            "isNullable": false,
            "_": 7171,
            "source": " Request | string",
            "parent": "RequestInfo"
          },
          "doc": "",
          "_": 7171,
          "source": "\n\n/** @category Fetch API */\ntype RequestInfo = Request | string;"
        },
        {
          "name": "RequestCache",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"default\"",
                "isNullable": false,
                "_": 7174,
                "source": " \"default\""
              },
              {
                "core": "\"force-cache\"",
                "isNullable": false,
                "_": 7175,
                "source": " \"force-cache\""
              },
              {
                "core": "\"no-cache\"",
                "isNullable": false,
                "_": 7176,
                "source": " \"no-cache\""
              },
              {
                "core": "\"no-store\"",
                "isNullable": false,
                "_": 7177,
                "source": " \"no-store\""
              },
              {
                "core": "\"only-if-cached\"",
                "isNullable": false,
                "_": 7178,
                "source": " \"only-if-cached\""
              },
              {
                "core": "\"reload\"",
                "isNullable": false,
                "_": 7179,
                "source": " \"reload\""
              }
            ],
            "isNullable": false,
            "_": 7174,
            "source": "\n  | \"default\"\n  | \"force-cache\"\n  | \"no-cache\"\n  | \"no-store\"\n  | \"only-if-cached\"\n  | \"reload\"",
            "parent": "RequestCache"
          },
          "doc": "",
          "_": 7173,
          "source": "\n/** @category Fetch API */\ntype RequestCache =\n  | \"default\"\n  | \"force-cache\"\n  | \"no-cache\"\n  | \"no-store\"\n  | \"only-if-cached\"\n  | \"reload\";"
        },
        {
          "name": "RequestCredentials",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"include\"",
                "isNullable": false,
                "_": 7181,
                "source": " \"include\""
              },
              {
                "core": "\"omit\"",
                "isNullable": false,
                "_": 7181,
                "source": " \"omit\""
              },
              {
                "core": "\"same-origin\"",
                "isNullable": false,
                "_": 7181,
                "source": " \"same-origin\""
              }
            ],
            "isNullable": false,
            "_": 7181,
            "source": " \"include\" | \"omit\" | \"same-origin\"",
            "parent": "RequestCredentials"
          },
          "doc": "",
          "_": 7181,
          "source": "\n/** @category Fetch API */\ntype RequestCredentials = \"include\" | \"omit\" | \"same-origin\";"
        },
        {
          "name": "RequestMode",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"cors\"",
                "isNullable": false,
                "_": 7183,
                "source": " \"cors\""
              },
              {
                "core": "\"navigate\"",
                "isNullable": false,
                "_": 7183,
                "source": " \"navigate\""
              },
              {
                "core": "\"no-cors\"",
                "isNullable": false,
                "_": 7183,
                "source": " \"no-cors\""
              },
              {
                "core": "\"same-origin\"",
                "isNullable": false,
                "_": 7183,
                "source": " \"same-origin\""
              }
            ],
            "isNullable": false,
            "_": 7183,
            "source": " \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\"",
            "parent": "RequestMode"
          },
          "doc": "",
          "_": 7183,
          "source": "\n/** @category Fetch API */\ntype RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\";"
        },
        {
          "name": "RequestRedirect",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"error\"",
                "isNullable": false,
                "_": 7185,
                "source": " \"error\""
              },
              {
                "core": "\"follow\"",
                "isNullable": false,
                "_": 7185,
                "source": " \"follow\""
              },
              {
                "core": "\"manual\"",
                "isNullable": false,
                "_": 7185,
                "source": " \"manual\""
              }
            ],
            "isNullable": false,
            "_": 7185,
            "source": " \"error\" | \"follow\" | \"manual\"",
            "parent": "RequestRedirect"
          },
          "doc": "",
          "_": 7185,
          "source": "\n/** @category Fetch API */\ntype RequestRedirect = \"error\" | \"follow\" | \"manual\";"
        },
        {
          "name": "ReferrerPolicy",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"\"",
                "isNullable": false,
                "_": 7188,
                "source": " \"\""
              },
              {
                "core": "\"no-referrer\"",
                "isNullable": false,
                "_": 7189,
                "source": " \"no-referrer\""
              },
              {
                "core": "\"no-referrer-when-downgrade\"",
                "isNullable": false,
                "_": 7190,
                "source": " \"no-referrer-when-downgrade\""
              },
              {
                "core": "\"origin\"",
                "isNullable": false,
                "_": 7191,
                "source": " \"origin\""
              },
              {
                "core": "\"origin-when-cross-origin\"",
                "isNullable": false,
                "_": 7192,
                "source": " \"origin-when-cross-origin\""
              },
              {
                "core": "\"same-origin\"",
                "isNullable": false,
                "_": 7193,
                "source": " \"same-origin\""
              },
              {
                "core": "\"strict-origin\"",
                "isNullable": false,
                "_": 7194,
                "source": " \"strict-origin\""
              },
              {
                "core": "\"strict-origin-when-cross-origin\"",
                "isNullable": false,
                "_": 7195,
                "source": " \"strict-origin-when-cross-origin\""
              },
              {
                "core": "\"unsafe-url\"",
                "isNullable": false,
                "_": 7196,
                "source": " \"unsafe-url\""
              }
            ],
            "isNullable": false,
            "_": 7188,
            "source": "\n  | \"\"\n  | \"no-referrer\"\n  | \"no-referrer-when-downgrade\"\n  | \"origin\"\n  | \"origin-when-cross-origin\"\n  | \"same-origin\"\n  | \"strict-origin\"\n  | \"strict-origin-when-cross-origin\"\n  | \"unsafe-url\"",
            "parent": "ReferrerPolicy"
          },
          "doc": "",
          "_": 7187,
          "source": "\n/** @category Fetch API */\ntype ReferrerPolicy =\n  | \"\"\n  | \"no-referrer\"\n  | \"no-referrer-when-downgrade\"\n  | \"origin\"\n  | \"origin-when-cross-origin\"\n  | \"same-origin\"\n  | \"strict-origin\"\n  | \"strict-origin-when-cross-origin\"\n  | \"unsafe-url\";"
        },
        {
          "name": "BodyInit",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "Blob",
                "targs": [],
                "isNullable": false,
                "_": 7199,
                "source": " Blob"
              },
              {
                "ref": "BufferSource",
                "targs": [],
                "isNullable": false,
                "_": 7200,
                "source": " BufferSource"
              },
              {
                "ref": "FormData",
                "targs": [],
                "isNullable": false,
                "_": 7201,
                "source": " FormData"
              },
              {
                "ref": "URLSearchParams",
                "targs": [],
                "isNullable": false,
                "_": 7202,
                "source": " URLSearchParams"
              },
              {
                "ref": "ReadableStream",
                "targs": [
                  {
                    "ref": "Uint8Array",
                    "targs": [],
                    "isNullable": false,
                    "_": 7203,
                    "source": "Uint8Array"
                  }
                ],
                "isNullable": false,
                "_": 7203,
                "source": " ReadableStream<Uint8Array>"
              },
              {
                "core": "string",
                "isNullable": false,
                "_": 7204,
                "source": " string"
              }
            ],
            "isNullable": false,
            "_": 7199,
            "source": "\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | ReadableStream<Uint8Array>\n  | string",
            "parent": "BodyInit"
          },
          "doc": "",
          "_": 7198,
          "source": "\n/** @category Fetch API */\ntype BodyInit =\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | ReadableStream<Uint8Array>\n  | string;"
        },
        {
          "name": "RequestDestination",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"\"",
                "isNullable": false,
                "_": 7207,
                "source": " \"\""
              },
              {
                "core": "\"audio\"",
                "isNullable": false,
                "_": 7208,
                "source": " \"audio\""
              },
              {
                "core": "\"audioworklet\"",
                "isNullable": false,
                "_": 7209,
                "source": " \"audioworklet\""
              },
              {
                "core": "\"document\"",
                "isNullable": false,
                "_": 7210,
                "source": " \"document\""
              },
              {
                "core": "\"embed\"",
                "isNullable": false,
                "_": 7211,
                "source": " \"embed\""
              },
              {
                "core": "\"font\"",
                "isNullable": false,
                "_": 7212,
                "source": " \"font\""
              },
              {
                "core": "\"image\"",
                "isNullable": false,
                "_": 7213,
                "source": " \"image\""
              },
              {
                "core": "\"manifest\"",
                "isNullable": false,
                "_": 7214,
                "source": " \"manifest\""
              },
              {
                "core": "\"object\"",
                "isNullable": false,
                "_": 7215,
                "source": " \"object\""
              },
              {
                "core": "\"paintworklet\"",
                "isNullable": false,
                "_": 7216,
                "source": " \"paintworklet\""
              },
              {
                "core": "\"report\"",
                "isNullable": false,
                "_": 7217,
                "source": " \"report\""
              },
              {
                "core": "\"script\"",
                "isNullable": false,
                "_": 7218,
                "source": " \"script\""
              },
              {
                "core": "\"sharedworker\"",
                "isNullable": false,
                "_": 7219,
                "source": " \"sharedworker\""
              },
              {
                "core": "\"style\"",
                "isNullable": false,
                "_": 7220,
                "source": " \"style\""
              },
              {
                "core": "\"track\"",
                "isNullable": false,
                "_": 7221,
                "source": " \"track\""
              },
              {
                "core": "\"video\"",
                "isNullable": false,
                "_": 7222,
                "source": " \"video\""
              },
              {
                "core": "\"worker\"",
                "isNullable": false,
                "_": 7223,
                "source": " \"worker\""
              },
              {
                "core": "\"xslt\"",
                "isNullable": false,
                "_": 7224,
                "source": " \"xslt\""
              }
            ],
            "isNullable": false,
            "_": 7207,
            "source": "\n  | \"\"\n  | \"audio\"\n  | \"audioworklet\"\n  | \"document\"\n  | \"embed\"\n  | \"font\"\n  | \"image\"\n  | \"manifest\"\n  | \"object\"\n  | \"paintworklet\"\n  | \"report\"\n  | \"script\"\n  | \"sharedworker\"\n  | \"style\"\n  | \"track\"\n  | \"video\"\n  | \"worker\"\n  | \"xslt\"",
            "parent": "RequestDestination"
          },
          "doc": "",
          "_": 7206,
          "source": "\n/** @category Fetch API */\ntype RequestDestination =\n  | \"\"\n  | \"audio\"\n  | \"audioworklet\"\n  | \"document\"\n  | \"embed\"\n  | \"font\"\n  | \"image\"\n  | \"manifest\"\n  | \"object\"\n  | \"paintworklet\"\n  | \"report\"\n  | \"script\"\n  | \"sharedworker\"\n  | \"style\"\n  | \"track\"\n  | \"video\"\n  | \"worker\"\n  | \"xslt\";"
        },
        {
          "name": "ResponseType",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"basic\"",
                "isNullable": false,
                "_": 7419,
                "source": " \"basic\""
              },
              {
                "core": "\"cors\"",
                "isNullable": false,
                "_": 7420,
                "source": " \"cors\""
              },
              {
                "core": "\"default\"",
                "isNullable": false,
                "_": 7421,
                "source": " \"default\""
              },
              {
                "core": "\"error\"",
                "isNullable": false,
                "_": 7422,
                "source": " \"error\""
              },
              {
                "core": "\"opaque\"",
                "isNullable": false,
                "_": 7423,
                "source": " \"opaque\""
              },
              {
                "core": "\"opaqueredirect\"",
                "isNullable": false,
                "_": 7424,
                "source": " \"opaqueredirect\""
              }
            ],
            "isNullable": false,
            "_": 7419,
            "source": "\n  | \"basic\"\n  | \"cors\"\n  | \"default\"\n  | \"error\"\n  | \"opaque\"\n  | \"opaqueredirect\"",
            "parent": "ResponseType"
          },
          "doc": "",
          "_": 7418,
          "source": "\n\n/** @category Fetch API */\ntype ResponseType =\n  | \"basic\"\n  | \"cors\"\n  | \"default\"\n  | \"error\"\n  | \"opaque\"\n  | \"opaqueredirect\";"
        },
        {
          "name": "BinaryType",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"arraybuffer\"",
                "isNullable": false,
                "_": 7615,
                "source": " \"arraybuffer\""
              },
              {
                "core": "\"blob\"",
                "isNullable": false,
                "_": 7615,
                "source": " \"blob\""
              }
            ],
            "isNullable": false,
            "_": 7615,
            "source": " \"arraybuffer\" | \"blob\"",
            "parent": "BinaryType"
          },
          "doc": "",
          "_": 7615,
          "source": "\n\n/** @category Web Sockets */\ntype BinaryType = \"arraybuffer\" | \"blob\";"
        },
        {
          "name": "AlgorithmIdentifier",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "string",
                "isNullable": false,
                "_": 7687,
                "source": " string"
              },
              {
                "ref": "Algorithm",
                "targs": [],
                "isNullable": false,
                "_": 7687,
                "source": " Algorithm"
              }
            ],
            "isNullable": false,
            "_": 7687,
            "source": " string | Algorithm",
            "parent": "AlgorithmIdentifier"
          },
          "doc": "",
          "_": 7687,
          "source": "\n\n/** @category Web Crypto API */\ntype AlgorithmIdentifier = string | Algorithm;"
        },
        {
          "name": "HashAlgorithmIdentifier",
          "generics": [],
          "type": {
            "ref": "AlgorithmIdentifier",
            "targs": [],
            "isNullable": false,
            "_": 7689,
            "source": " AlgorithmIdentifier",
            "parent": "HashAlgorithmIdentifier"
          },
          "doc": "",
          "_": 7689,
          "source": "\n/** @category Web Crypto API */\ntype HashAlgorithmIdentifier = AlgorithmIdentifier;"
        },
        {
          "name": "KeyType",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"private\"",
                "isNullable": false,
                "_": 7691,
                "source": " \"private\""
              },
              {
                "core": "\"public\"",
                "isNullable": false,
                "_": 7691,
                "source": " \"public\""
              },
              {
                "core": "\"secret\"",
                "isNullable": false,
                "_": 7691,
                "source": " \"secret\""
              }
            ],
            "isNullable": false,
            "_": 7691,
            "source": " \"private\" | \"public\" | \"secret\"",
            "parent": "KeyType"
          },
          "doc": "",
          "_": 7691,
          "source": "\n/** @category Web Crypto API */\ntype KeyType = \"private\" | \"public\" | \"secret\";"
        },
        {
          "name": "KeyUsage",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"decrypt\"",
                "isNullable": false,
                "_": 7694,
                "source": " \"decrypt\""
              },
              {
                "core": "\"deriveBits\"",
                "isNullable": false,
                "_": 7695,
                "source": " \"deriveBits\""
              },
              {
                "core": "\"deriveKey\"",
                "isNullable": false,
                "_": 7696,
                "source": " \"deriveKey\""
              },
              {
                "core": "\"encrypt\"",
                "isNullable": false,
                "_": 7697,
                "source": " \"encrypt\""
              },
              {
                "core": "\"sign\"",
                "isNullable": false,
                "_": 7698,
                "source": " \"sign\""
              },
              {
                "core": "\"unwrapKey\"",
                "isNullable": false,
                "_": 7699,
                "source": " \"unwrapKey\""
              },
              {
                "core": "\"verify\"",
                "isNullable": false,
                "_": 7700,
                "source": " \"verify\""
              },
              {
                "core": "\"wrapKey\"",
                "isNullable": false,
                "_": 7701,
                "source": " \"wrapKey\""
              }
            ],
            "isNullable": false,
            "_": 7694,
            "source": "\n  | \"decrypt\"\n  | \"deriveBits\"\n  | \"deriveKey\"\n  | \"encrypt\"\n  | \"sign\"\n  | \"unwrapKey\"\n  | \"verify\"\n  | \"wrapKey\"",
            "parent": "KeyUsage"
          },
          "doc": "",
          "_": 7693,
          "source": "\n/** @category Web Crypto API */\ntype KeyUsage =\n  | \"decrypt\"\n  | \"deriveBits\"\n  | \"deriveKey\"\n  | \"encrypt\"\n  | \"sign\"\n  | \"unwrapKey\"\n  | \"verify\"\n  | \"wrapKey\";"
        },
        {
          "name": "KeyFormat",
          "generics": [],
          "type": {
            "union": [
              {
                "core": "\"jwk\"",
                "isNullable": false,
                "_": 7703,
                "source": " \"jwk\""
              },
              {
                "core": "\"pkcs8\"",
                "isNullable": false,
                "_": 7703,
                "source": " \"pkcs8\""
              },
              {
                "core": "\"raw\"",
                "isNullable": false,
                "_": 7703,
                "source": " \"raw\""
              },
              {
                "core": "\"spki\"",
                "isNullable": false,
                "_": 7703,
                "source": " \"spki\""
              }
            ],
            "isNullable": false,
            "_": 7703,
            "source": " \"jwk\" | \"pkcs8\" | \"raw\" | \"spki\"",
            "parent": "KeyFormat"
          },
          "doc": "",
          "_": 7703,
          "source": "\n/** @category Web Crypto API */\ntype KeyFormat = \"jwk\" | \"pkcs8\" | \"raw\" | \"spki\";"
        },
        {
          "name": "NamedCurve",
          "generics": [],
          "type": {
            "core": "string",
            "isNullable": false,
            "_": 7705,
            "source": " string",
            "parent": "NamedCurve"
          },
          "doc": "",
          "_": 7705,
          "source": "\n/** @category Web Crypto API */\ntype NamedCurve = string;"
        },
        {
          "name": "BufferSource",
          "generics": [],
          "type": {
            "union": [
              {
                "ref": "ArrayBufferView",
                "targs": [],
                "isNullable": false,
                "_": 8903,
                "source": " ArrayBufferView"
              },
              {
                "ref": "ArrayBuffer",
                "targs": [],
                "isNullable": false,
                "_": 8903,
                "source": " ArrayBuffer"
              }
            ],
            "isNullable": false,
            "_": 8903,
            "source": " ArrayBufferView | ArrayBuffer",
            "parent": "BufferSource"
          },
          "doc": "",
          "_": 8903,
          "source": "\n\n/** @category Typed Arrays */\ntype BufferSource = ArrayBufferView | ArrayBuffer;"
        },
        {
          "name": "PerformanceEntryList",
          "generics": [],
          "type": {
            "core": "array",
            "targs": [
              {
                "ref": "PerformanceEntry",
                "targs": [],
                "isNullable": false,
                "_": 8992,
                "source": " PerformanceEntry"
              }
            ],
            "isNullable": false,
            "_": 8992,
            "source": " PerformanceEntry[]",
            "parent": "PerformanceEntryList"
          },
          "doc": "",
          "_": 8992,
          "source": "\n\n/** @category Performance */\ndeclare type PerformanceEntryList = PerformanceEntry[];"
        }
      ],
      "modules": [
        {
          "_": 116,
          "namespace": "Deno",
          "from": "submodule ",
          "items": {
            "structs": [
              {
                "_": 288,
                "name": "MemoryUsage",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The number of bytes of the current Deno's process resident set size,\n which is the amount of memory occupied in main memory (RAM).",
                    "isMethod": false,
                    "_": 291,
                    "source": "\n    /** The number of bytes of the current Deno's process resident set size,\n     * which is the amount of memory occupied in main memory (RAM). */\n    rss: number;",
                    "name": "rss",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 291,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The total size of the heap for V8, in bytes.",
                    "isMethod": false,
                    "_": 293,
                    "source": "\n    /** The total size of the heap for V8, in bytes. */\n    heapTotal: number;",
                    "name": "heapTotal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 293,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The amount of the heap used for V8, in bytes.",
                    "isMethod": false,
                    "_": 295,
                    "source": "\n    /** The amount of the heap used for V8, in bytes. */\n    heapUsed: number;",
                    "name": "heapUsed",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 295,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Memory, in bytes, associated with JavaScript objects outside of the\n JavaScript isolate.",
                    "isMethod": false,
                    "_": 298,
                    "source": "\n    /** Memory, in bytes, associated with JavaScript objects outside of the\n     * JavaScript isolate. */\n    external: number;",
                    "name": "external",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 298,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 349,
                "name": "NetworkInterfaceInfo",
                "generics": [],
                "doc": "The information for a network interface returned from a call to\n{@linkcode Deno.networkInterfaces}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The network interface name.",
                    "isMethod": false,
                    "_": 351,
                    "source": "\n    /** The network interface name. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 351,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The IP protocol version.",
                    "isMethod": false,
                    "_": 353,
                    "source": "\n    /** The IP protocol version. */\n    family: \"IPv4\" | \"IPv6\";",
                    "name": "family",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"IPv4\"",
                          "isNullable": false,
                          "_": 353,
                          "source": " \"IPv4\""
                        },
                        {
                          "core": "\"IPv6\"",
                          "isNullable": false,
                          "_": 353,
                          "source": " \"IPv6\""
                        }
                      ],
                      "isNullable": false,
                      "_": 353,
                      "source": " \"IPv4\" | \"IPv6\""
                    }
                  },
                  {
                    "doc": "The IP address bound to the interface.",
                    "isMethod": false,
                    "_": 355,
                    "source": "\n    /** The IP address bound to the interface. */\n    address: string;",
                    "name": "address",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 355,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The netmask applied to the interface.",
                    "isMethod": false,
                    "_": 357,
                    "source": "\n    /** The netmask applied to the interface. */\n    netmask: string;",
                    "name": "netmask",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 357,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The IPv6 scope id or `null`.",
                    "isMethod": false,
                    "_": 359,
                    "source": "\n    /** The IPv6 scope id or `null`. */\n    scopeid: number | null;",
                    "name": "scopeid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 359,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 359,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 359,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "The CIDR range.",
                    "isMethod": false,
                    "_": 361,
                    "source": "\n    /** The CIDR range. */\n    cidr: string;",
                    "name": "cidr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 361,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The MAC address.",
                    "isMethod": false,
                    "_": 363,
                    "source": "\n    /** The MAC address. */\n    mac: string;",
                    "name": "mac",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 363,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 402,
                "name": "SystemMemoryInfo",
                "generics": [],
                "doc": "Information returned from a call to {@linkcode Deno.systemMemoryInfo}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Total installed memory in bytes.",
                    "isMethod": false,
                    "_": 404,
                    "source": "\n    /** Total installed memory in bytes. */\n    total: number;",
                    "name": "total",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 404,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Unused memory in bytes.",
                    "isMethod": false,
                    "_": 406,
                    "source": "\n    /** Unused memory in bytes. */\n    free: number;",
                    "name": "free",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 406,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Estimation of how much memory, in bytes, is available for starting new\n applications, without swapping. Unlike the data provided by the cache or\n free fields, this field takes into account page cache and also that not\n all reclaimable memory will be reclaimed due to items being in use.",
                    "isMethod": false,
                    "_": 412,
                    "source": "\n    /** Estimation of how much memory, in bytes, is available for starting new\n     * applications, without swapping. Unlike the data provided by the cache or\n     * free fields, this field takes into account page cache and also that not\n     * all reclaimable memory will be reclaimed due to items being in use.\n     */\n    available: number;",
                    "name": "available",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 412,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Memory used by kernel buffers.",
                    "isMethod": false,
                    "_": 414,
                    "source": "\n    /** Memory used by kernel buffers. */\n    buffers: number;",
                    "name": "buffers",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 414,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Memory used by the page cache and slabs.",
                    "isMethod": false,
                    "_": 416,
                    "source": "\n    /** Memory used by the page cache and slabs. */\n    cached: number;",
                    "name": "cached",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 416,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Total swap memory.",
                    "isMethod": false,
                    "_": 418,
                    "source": "\n    /** Total swap memory. */\n    swapTotal: number;",
                    "name": "swapTotal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 418,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Unused swap memory.",
                    "isMethod": false,
                    "_": 420,
                    "source": "\n    /** Unused swap memory. */\n    swapFree: number;",
                    "name": "swapFree",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 420,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 484,
                "name": "PermissionOptionsObject",
                "generics": [],
                "doc": "A set of options which can define the permissions within a test or worker\ncontext at a highly specific level.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Specifies if the `env` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `env` permission will be inherited.\n If set to `true`, the global `env` permission will be requested.\n If set to `false`, the global `env` permission will be revoked.\n\n @default {false}",
                    "isMethod": false,
                    "_": 492,
                    "source": "\n    /** Specifies if the `env` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `env` permission will be inherited.\n     * If set to `true`, the global `env` permission will be requested.\n     * If set to `false`, the global `env` permission will be revoked.\n     *\n     * @default {false}\n     */\n    env?: \"inherit\" | boolean | string[];",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 492,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 492,
                          "source": " boolean"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 492,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 492,
                          "source": " string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 492,
                      "source": " \"inherit\" | boolean | string[]"
                    }
                  },
                  {
                    "doc": "Specifies if the `sys` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `sys` permission will be inherited.\n If set to `true`, the global `sys` permission will be requested.\n If set to `false`, the global `sys` permission will be revoked.\n\n @default {false}",
                    "isMethod": false,
                    "_": 501,
                    "source": "\n\n    /** Specifies if the `sys` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `sys` permission will be inherited.\n     * If set to `true`, the global `sys` permission will be requested.\n     * If set to `false`, the global `sys` permission will be revoked.\n     *\n     * @default {false}\n     */\n    sys?: \"inherit\" | boolean | string[];",
                    "name": "sys",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 501,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 501,
                          "source": " boolean"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 501,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 501,
                          "source": " string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 501,
                      "source": " \"inherit\" | boolean | string[]"
                    }
                  },
                  {
                    "doc": "Specifies if the `hrtime` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `hrtime` permission will be inherited.\n If set to `true`, the global `hrtime` permission will be requested.\n If set to `false`, the global `hrtime` permission will be revoked.\n\n @default {false}",
                    "isMethod": false,
                    "_": 510,
                    "source": "\n\n    /** Specifies if the `hrtime` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `hrtime` permission will be inherited.\n     * If set to `true`, the global `hrtime` permission will be requested.\n     * If set to `false`, the global `hrtime` permission will be revoked.\n     *\n     * @default {false}\n     */\n    hrtime?: \"inherit\" | boolean;",
                    "name": "hrtime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 510,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 510,
                          "source": " boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 510,
                      "source": " \"inherit\" | boolean"
                    }
                  },
                  {
                    "doc": "Specifies if the `net` permission should be requested or revoked.\n if set to `\"inherit\"`, the current `net` permission will be inherited.\n if set to `true`, the global `net` permission will be requested.\n if set to `false`, the global `net` permission will be revoked.\n if set to `string[]`, the `net` permission will be requested with the\n specified host strings with the format `\"<host>[:<port>]`.\n\n @default {false}\n\n Examples:\n\n ```ts\n import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\n Deno.test({\n   name: \"inherit\",\n   permissions: {\n     net: \"inherit\",\n   },\n   async fn() {\n     const status = await Deno.permissions.query({ name: \"net\" })\n     assertEquals(status.state, \"granted\");\n   },\n });\n ```\n\n ```ts\n import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\n Deno.test({\n   name: \"true\",\n   permissions: {\n     net: true,\n   },\n   async fn() {\n     const status = await Deno.permissions.query({ name: \"net\" });\n     assertEquals(status.state, \"granted\");\n   },\n });\n ```\n\n ```ts\n import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\n Deno.test({\n   name: \"false\",\n   permissions: {\n     net: false,\n   },\n   async fn() {\n     const status = await Deno.permissions.query({ name: \"net\" });\n     assertEquals(status.state, \"denied\");\n   },\n });\n ```\n\n ```ts\n import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\n Deno.test({\n   name: \"localhost:8080\",\n   permissions: {\n     net: [\"localhost:8080\"],\n   },\n   async fn() {\n     const status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\n     assertEquals(status.state, \"granted\");\n   },\n });\n ```",
                    "isMethod": false,
                    "_": 583,
                    "source": "\n\n    /** Specifies if the `net` permission should be requested or revoked.\n     * if set to `\"inherit\"`, the current `net` permission will be inherited.\n     * if set to `true`, the global `net` permission will be requested.\n     * if set to `false`, the global `net` permission will be revoked.\n     * if set to `string[]`, the `net` permission will be requested with the\n     * specified host strings with the format `\"<host>[:<port>]`.\n     *\n     * @default {false}\n     *\n     * Examples:\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"inherit\",\n     *   permissions: {\n     *     net: \"inherit\",\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" })\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"true\",\n     *   permissions: {\n     *     net: true,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"false\",\n     *   permissions: {\n     *     net: false,\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\" });\n     *     assertEquals(status.state, \"denied\");\n     *   },\n     * });\n     * ```\n     *\n     * ```ts\n     * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * Deno.test({\n     *   name: \"localhost:8080\",\n     *   permissions: {\n     *     net: [\"localhost:8080\"],\n     *   },\n     *   async fn() {\n     *     const status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\n     *     assertEquals(status.state, \"granted\");\n     *   },\n     * });\n     * ```\n     */\n    net?: \"inherit\" | boolean | string[];",
                    "name": "net",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 583,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 583,
                          "source": " boolean"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 583,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 583,
                          "source": " string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 583,
                      "source": " \"inherit\" | boolean | string[]"
                    }
                  },
                  {
                    "doc": "Specifies if the `ffi` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `ffi` permission will be inherited.\n If set to `true`, the global `ffi` permission will be requested.\n If set to `false`, the global `ffi` permission will be revoked.\n\n @default {false}",
                    "isMethod": false,
                    "_": 592,
                    "source": "\n\n    /** Specifies if the `ffi` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `ffi` permission will be inherited.\n     * If set to `true`, the global `ffi` permission will be requested.\n     * If set to `false`, the global `ffi` permission will be revoked.\n     *\n     * @default {false}\n     */\n    ffi?: \"inherit\" | boolean | Array<string | URL>;",
                    "name": "ffi",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 592,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 592,
                          "source": " boolean"
                        },
                        {
                          "ref": "Array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 592,
                                  "source": "string"
                                },
                                {
                                  "ref": "URL",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 592,
                                  "source": " URL"
                                }
                              ],
                              "isNullable": false,
                              "_": 592,
                              "source": "string | URL"
                            }
                          ],
                          "isNullable": false,
                          "_": 592,
                          "source": " Array<string | URL>"
                        }
                      ],
                      "isNullable": false,
                      "_": 592,
                      "source": " \"inherit\" | boolean | Array<string | URL>"
                    }
                  },
                  {
                    "doc": "Specifies if the `read` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `read` permission will be inherited.\n If set to `true`, the global `read` permission will be requested.\n If set to `false`, the global `read` permission will be revoked.\n If set to `Array<string | URL>`, the `read` permission will be requested with the\n specified file paths.\n\n @default {false}",
                    "isMethod": false,
                    "_": 603,
                    "source": "\n\n    /** Specifies if the `read` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `read` permission will be inherited.\n     * If set to `true`, the global `read` permission will be requested.\n     * If set to `false`, the global `read` permission will be revoked.\n     * If set to `Array<string | URL>`, the `read` permission will be requested with the\n     * specified file paths.\n     *\n     * @default {false}\n     */\n    read?: \"inherit\" | boolean | Array<string | URL>;",
                    "name": "read",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 603,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 603,
                          "source": " boolean"
                        },
                        {
                          "ref": "Array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 603,
                                  "source": "string"
                                },
                                {
                                  "ref": "URL",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 603,
                                  "source": " URL"
                                }
                              ],
                              "isNullable": false,
                              "_": 603,
                              "source": "string | URL"
                            }
                          ],
                          "isNullable": false,
                          "_": 603,
                          "source": " Array<string | URL>"
                        }
                      ],
                      "isNullable": false,
                      "_": 603,
                      "source": " \"inherit\" | boolean | Array<string | URL>"
                    }
                  },
                  {
                    "doc": "Specifies if the `run` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `run` permission will be inherited.\n If set to `true`, the global `run` permission will be requested.\n If set to `false`, the global `run` permission will be revoked.\n\n @default {false}",
                    "isMethod": false,
                    "_": 612,
                    "source": "\n\n    /** Specifies if the `run` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `run` permission will be inherited.\n     * If set to `true`, the global `run` permission will be requested.\n     * If set to `false`, the global `run` permission will be revoked.\n     *\n     * @default {false}\n     */\n    run?: \"inherit\" | boolean | Array<string | URL>;",
                    "name": "run",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 612,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 612,
                          "source": " boolean"
                        },
                        {
                          "ref": "Array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 612,
                                  "source": "string"
                                },
                                {
                                  "ref": "URL",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 612,
                                  "source": " URL"
                                }
                              ],
                              "isNullable": false,
                              "_": 612,
                              "source": "string | URL"
                            }
                          ],
                          "isNullable": false,
                          "_": 612,
                          "source": " Array<string | URL>"
                        }
                      ],
                      "isNullable": false,
                      "_": 612,
                      "source": " \"inherit\" | boolean | Array<string | URL>"
                    }
                  },
                  {
                    "doc": "Specifies if the `write` permission should be requested or revoked.\n If set to `\"inherit\"`, the current `write` permission will be inherited.\n If set to `true`, the global `write` permission will be requested.\n If set to `false`, the global `write` permission will be revoked.\n If set to `Array<string | URL>`, the `write` permission will be requested with the\n specified file paths.\n\n @default {false}",
                    "isMethod": false,
                    "_": 623,
                    "source": "\n\n    /** Specifies if the `write` permission should be requested or revoked.\n     * If set to `\"inherit\"`, the current `write` permission will be inherited.\n     * If set to `true`, the global `write` permission will be requested.\n     * If set to `false`, the global `write` permission will be revoked.\n     * If set to `Array<string | URL>`, the `write` permission will be requested with the\n     * specified file paths.\n     *\n     * @default {false}\n     */\n    write?: \"inherit\" | boolean | Array<string | URL>;",
                    "name": "write",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 623,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 623,
                          "source": " boolean"
                        },
                        {
                          "ref": "Array",
                          "targs": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 623,
                                  "source": "string"
                                },
                                {
                                  "ref": "URL",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 623,
                                  "source": " URL"
                                }
                              ],
                              "isNullable": false,
                              "_": 623,
                              "source": "string | URL"
                            }
                          ],
                          "isNullable": false,
                          "_": 623,
                          "source": " Array<string | URL>"
                        }
                      ],
                      "isNullable": false,
                      "_": 623,
                      "source": " \"inherit\" | boolean | Array<string | URL>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 632,
                "name": "TestContext",
                "generics": [],
                "doc": "Context that is passed to a testing function, which can be used to either\ngain information about the current test, or register additional test\nsteps within the current test.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The current test name.",
                    "isMethod": false,
                    "_": 634,
                    "source": "\n    /** The current test name. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 634,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The string URL of the current test.",
                    "isMethod": false,
                    "_": 636,
                    "source": "\n    /** The string URL of the current test. */\n    origin: string;",
                    "name": "origin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 636,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "If the current test is a step of another test, the parent test context\n will be set here.",
                    "isMethod": false,
                    "_": 639,
                    "source": "\n    /** If the current test is a step of another test, the parent test context\n     * will be set here. */\n    parent?: TestContext;",
                    "name": "parent",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TestContext",
                      "targs": [],
                      "isNullable": false,
                      "_": 639,
                      "source": " TestContext"
                    }
                  },
                  {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\n that resolves to a boolean signifying if the step completed successfully.\n\n The returned promise never rejects unless the arguments are invalid.\n\n If the test was ignored the promise returns `false`.\n\n ```ts\n Deno.test({\n   name: \"a parent test\",\n   async fn(t) {\n     console.log(\"before the step\");\n     await t.step({\n       name: \"step 1\",\n       fn(t) {\n         console.log(\"current step:\", t.name);\n       }\n     });\n     console.log(\"after the step\");\n   }\n });\n ```",
                    "isMethod": true,
                    "_": 664,
                    "source": "\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test({\n     *   name: \"a parent test\",\n     *   async fn(t) {\n     *     console.log(\"before the step\");\n     *     await t.step({\n     *       name: \"step 1\",\n     *       fn(t) {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     });\n     *     console.log(\"after the step\");\n     *   }\n     * });\n     * ```\n     */\n    step(definition: TestStepDefinition): Promise<boolean>;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "definition",
                        "type": {
                          "ref": "TestStepDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 664,
                          "source": " TestStepDefinition"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 664,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 664,
                      "source": " Promise<boolean>"
                    }
                  },
                  {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\n that resolves to a boolean signifying if the step completed successfully.\n\n The returned promise never rejects unless the arguments are invalid.\n\n If the test was ignored the promise returns `false`.\n\n ```ts\n Deno.test(\n   \"a parent test\",\n   async (t) => {\n     console.log(\"before the step\");\n     await t.step(\n       \"step 1\",\n       (t) => {\n         console.log(\"current step:\", t.name);\n       }\n     );\n     console.log(\"after the step\");\n   }\n );\n ```",
                    "isMethod": true,
                    "_": 689,
                    "source": "\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test(\n     *   \"a parent test\",\n     *   async (t) => {\n     *     console.log(\"before the step\");\n     *     await t.step(\n     *       \"step 1\",\n     *       (t) => {\n     *         console.log(\"current step:\", t.name);\n     *       }\n     *     );\n     *     console.log(\"after the step\");\n     *   }\n     * );\n     * ```\n     */\n    step(\n      name: string,\n      fn: (t: TestContext) => void | Promise<void>,\n    ): Promise<boolean>;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "name",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 690,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "fn",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 691,
                                "source": " void"
                              },
                              {
                                "ref": "Promise",
                                "targs": [
                                  {
                                    "core": "void",
                                    "isNullable": false,
                                    "_": 691,
                                    "source": "void"
                                  }
                                ],
                                "isNullable": false,
                                "_": 691,
                                "source": " Promise<void>"
                              }
                            ],
                            "isNullable": false,
                            "_": 691,
                            "source": " void | Promise<void>"
                          },
                          "params": [
                            {
                              "name": "t",
                              "type": {
                                "ref": "TestContext",
                                "targs": [],
                                "isNullable": false,
                                "_": 691,
                                "source": " TestContext"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 691,
                          "source": " (t: TestContext) => void | Promise<void>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 692,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 692,
                      "source": " Promise<boolean>"
                    }
                  },
                  {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\n that resolves to a boolean signifying if the step completed successfully.\n\n The returned promise never rejects unless the arguments are invalid.\n\n If the test was ignored the promise returns `false`.\n\n ```ts\n Deno.test(async function aParentTest(t) {\n   console.log(\"before the step\");\n   await t.step(function step1(t) {\n     console.log(\"current step:\", t.name);\n   });\n   console.log(\"after the step\");\n });\n ```",
                    "isMethod": true,
                    "_": 711,
                    "source": "\n\n    /** Run a sub step of the parent test or step. Returns a promise\n     * that resolves to a boolean signifying if the step completed successfully.\n     *\n     * The returned promise never rejects unless the arguments are invalid.\n     *\n     * If the test was ignored the promise returns `false`.\n     *\n     * ```ts\n     * Deno.test(async function aParentTest(t) {\n     *   console.log(\"before the step\");\n     *   await t.step(function step1(t) {\n     *     console.log(\"current step:\", t.name);\n     *   });\n     *   console.log(\"after the step\");\n     * });\n     * ```\n     */\n    step(fn: (t: TestContext) => void | Promise<void>): Promise<boolean>;",
                    "name": "step",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "fn",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "union": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 711,
                                "source": " void"
                              },
                              {
                                "ref": "Promise",
                                "targs": [
                                  {
                                    "core": "void",
                                    "isNullable": false,
                                    "_": 711,
                                    "source": "void"
                                  }
                                ],
                                "isNullable": false,
                                "_": 711,
                                "source": " Promise<void>"
                              }
                            ],
                            "isNullable": false,
                            "_": 711,
                            "source": " void | Promise<void>"
                          },
                          "params": [
                            {
                              "name": "t",
                              "type": {
                                "ref": "TestContext",
                                "targs": [],
                                "isNullable": false,
                                "_": 711,
                                "source": " TestContext"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 711,
                          "source": " (t: TestContext) => void | Promise<void>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 711,
                          "source": "boolean"
                        }
                      ],
                      "isNullable": false,
                      "_": 711,
                      "source": " Promise<boolean>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 715,
                "name": "TestStepDefinition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The test function that will be tested when this step is executed. The\n function can take an argument which will provide information about the\n current step's context.",
                    "isMethod": false,
                    "_": 719,
                    "source": "\n    /** The test function that will be tested when this step is executed. The\n     * function can take an argument which will provide information about the\n     * current step's context. */\n    fn: (t: TestContext) => void | Promise<void>;",
                    "name": "fn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 719,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 719,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 719,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 719,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 719,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 719,
                      "source": " (t: TestContext) => void | Promise<void>"
                    }
                  },
                  {
                    "doc": "The name of the step.",
                    "isMethod": false,
                    "_": 721,
                    "source": "\n    /** The name of the step. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 721,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "If truthy the current test step will be ignored.\n\n This is a quick way to skip over a step, but also can be used for\n conditional logic, like determining if an environment feature is present.",
                    "isMethod": false,
                    "_": 727,
                    "source": "\n    /** If truthy the current test step will be ignored.\n     *\n     * This is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;",
                    "name": "ignore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 727,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check that the number of async completed operations after the test step\n is the same as number of dispatched operations. This ensures that the\n code tested does not start async operations which it then does\n not await. This helps in preventing logic errors and memory leaks\n in the application code.\n\n Defaults to the parent test or step's value.",
                    "isMethod": false,
                    "_": 735,
                    "source": "\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeOps?: boolean;",
                    "name": "sanitizeOps",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 735,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Ensure the test step does not \"leak\" resources - like open files or\n network connections - by ensuring the open resources at the start of the\n step match the open resources at the end of the step.\n\n Defaults to the parent test or step's value.",
                    "isMethod": false,
                    "_": 741,
                    "source": "\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * step match the open resources at the end of the step.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeResources?: boolean;",
                    "name": "sanitizeResources",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 741,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Ensure the test step does not prematurely cause the process to exit,\n for example via a call to {@linkcode Deno.exit}.\n\n Defaults to the parent test or step's value.",
                    "isMethod": false,
                    "_": 746,
                    "source": "\n    /** Ensure the test step does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * Defaults to the parent test or step's value. */\n    sanitizeExit?: boolean;",
                    "name": "sanitizeExit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 746,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 750,
                "name": "TestDefinition",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 751,
                    "source": "\n    fn: (t: TestContext) => void | Promise<void>;",
                    "name": "fn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 751,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 751,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 751,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 751,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 751,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 751,
                      "source": " (t: TestContext) => void | Promise<void>"
                    }
                  },
                  {
                    "doc": "The name of the test.",
                    "isMethod": false,
                    "_": 753,
                    "source": "\n    /** The name of the test. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 753,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "If truthy the current test step will be ignored.\n\n It is a quick way to skip over a step, but also can be used for\n conditional logic, like determining if an environment feature is present.",
                    "isMethod": false,
                    "_": 759,
                    "source": "\n    /** If truthy the current test step will be ignored.\n     *\n     * It is a quick way to skip over a step, but also can be used for\n     * conditional logic, like determining if an environment feature is present.\n     */\n    ignore?: boolean;",
                    "name": "ignore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 759,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If at least one test has `only` set to `true`, only run tests that have\n `only` set to `true` and fail the test suite.",
                    "isMethod": false,
                    "_": 762,
                    "source": "\n    /** If at least one test has `only` set to `true`, only run tests that have\n     * `only` set to `true` and fail the test suite. */\n    only?: boolean;",
                    "name": "only",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 762,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Check that the number of async completed operations after the test step\n is the same as number of dispatched operations. This ensures that the\n code tested does not start async operations which it then does\n not await. This helps in preventing logic errors and memory leaks\n in the application code.\n\n @default {true}",
                    "isMethod": false,
                    "_": 770,
                    "source": "\n    /** Check that the number of async completed operations after the test step\n     * is the same as number of dispatched operations. This ensures that the\n     * code tested does not start async operations which it then does\n     * not await. This helps in preventing logic errors and memory leaks\n     * in the application code.\n     *\n     * @default {true} */\n    sanitizeOps?: boolean;",
                    "name": "sanitizeOps",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 770,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Ensure the test step does not \"leak\" resources - like open files or\n network connections - by ensuring the open resources at the start of the\n test match the open resources at the end of the test.\n\n @default {true}",
                    "isMethod": false,
                    "_": 776,
                    "source": "\n    /** Ensure the test step does not \"leak\" resources - like open files or\n     * network connections - by ensuring the open resources at the start of the\n     * test match the open resources at the end of the test.\n     *\n     * @default {true} */\n    sanitizeResources?: boolean;",
                    "name": "sanitizeResources",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 776,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Ensure the test case does not prematurely cause the process to exit,\n for example via a call to {@linkcode Deno.exit}.\n\n @default {true}",
                    "isMethod": false,
                    "_": 781,
                    "source": "\n    /** Ensure the test case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * @default {true} */\n    sanitizeExit?: boolean;",
                    "name": "sanitizeExit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 781,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Specifies the permissions that should be used to run the test.\n\n Set this to \"inherit\" to keep the calling runtime permissions, set this\n to \"none\" to revoke all permissions, or set a more specific set of\n permissions using a {@linkcode PermissionOptionsObject}.\n\n @default {\"inherit\"}",
                    "isMethod": false,
                    "_": 789,
                    "source": "\n    /** Specifies the permissions that should be used to run the test.\n     *\n     * Set this to \"inherit\" to keep the calling runtime permissions, set this\n     * to \"none\" to revoke all permissions, or set a more specific set of\n     * permissions using a {@linkcode PermissionOptionsObject}.\n     *\n     * @default {\"inherit\"} */\n    permissions?: PermissionOptions;",
                    "name": "permissions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "PermissionOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 789,
                      "source": " PermissionOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 980,
                "name": "BenchDefinition",
                "generics": [],
                "doc": "The interface for defining a benchmark test using {@linkcode Deno.bench}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The test function which will be benchmarked.",
                    "isMethod": false,
                    "_": 982,
                    "source": "\n    /** The test function which will be benchmarked. */\n    fn: () => void | Promise<void>;",
                    "name": "fn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 982,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 982,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 982,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 982,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 982,
                      "source": " () => void | Promise<void>"
                    }
                  },
                  {
                    "doc": "The name of the test, which will be used in displaying the results.",
                    "isMethod": false,
                    "_": 984,
                    "source": "\n    /** The name of the test, which will be used in displaying the results. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 984,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "If truthy, the benchmark test will be ignored/skipped.",
                    "isMethod": false,
                    "_": 986,
                    "source": "\n    /** If truthy, the benchmark test will be ignored/skipped. */\n    ignore?: boolean;",
                    "name": "ignore",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 986,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Group name for the benchmark.\n\n Grouped benchmarks produce a group time summary, where the difference\n in performance between each test of the group is compared.",
                    "isMethod": false,
                    "_": 991,
                    "source": "\n    /** Group name for the benchmark.\n     *\n     * Grouped benchmarks produce a group time summary, where the difference\n     * in performance between each test of the group is compared. */\n    group?: string;",
                    "name": "group",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 991,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Benchmark should be used as the baseline for other benchmarks.\n\n If there are multiple baselines in a group, the first one is used as the\n baseline.",
                    "isMethod": false,
                    "_": 996,
                    "source": "\n    /** Benchmark should be used as the baseline for other benchmarks.\n     *\n     * If there are multiple baselines in a group, the first one is used as the\n     * baseline. */\n    baseline?: boolean;",
                    "name": "baseline",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 996,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If at least one bench has `only` set to true, only run benches that have\n `only` set to `true` and fail the bench suite.",
                    "isMethod": false,
                    "_": 999,
                    "source": "\n    /** If at least one bench has `only` set to true, only run benches that have\n     * `only` set to `true` and fail the bench suite. */\n    only?: boolean;",
                    "name": "only",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 999,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Ensure the bench case does not prematurely cause the process to exit,\n for example via a call to {@linkcode Deno.exit}.\n\n @default {true}",
                    "isMethod": false,
                    "_": 1004,
                    "source": "\n    /** Ensure the bench case does not prematurely cause the process to exit,\n     * for example via a call to {@linkcode Deno.exit}.\n     *\n     * @default {true} */\n    sanitizeExit?: boolean;",
                    "name": "sanitizeExit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1004,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Specifies the permissions that should be used to run the bench.\n\n Set this to `\"inherit\"` to keep the calling thread's permissions.\n\n Set this to `\"none\"` to revoke all permissions.\n\n @default {\"inherit\"}",
                    "isMethod": false,
                    "_": 1013,
                    "source": "\n    /** Specifies the permissions that should be used to run the bench.\n     *\n     * Set this to `\"inherit\"` to keep the calling thread's permissions.\n     *\n     * Set this to `\"none\"` to revoke all permissions.\n     *\n     * @default {\"inherit\"}\n     */\n    permissions?: PermissionOptions;",
                    "name": "permissions",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "PermissionOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1013,
                      "source": " PermissionOptions"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline0",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Env",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1303,
                      "source": " string"
                    },
                    "value": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1303,
                      "source": " string"
                    },
                    "doc": "",
                    "_": 1303,
                    "source": " [index: string]: string",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": []
              },
              {
                "_": 1233,
                "name": "Env",
                "generics": [],
                "doc": "An interface containing methods to interact with the process environment\nvariables.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Retrieve the value of an environment variable.\n\n Returns `undefined` if the supplied environment variable is not defined.\n\n ```ts\n console.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\n console.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n ```\n\n Requires `allow-env` permission.\n\n @tags allow-env",
                    "isMethod": true,
                    "_": 1247,
                    "source": "\n    /** Retrieve the value of an environment variable.\n     *\n     * Returns `undefined` if the supplied environment variable is not defined.\n     *\n     * ```ts\n     * console.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\n     * console.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    get(key: string): string | undefined;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1247,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1247,
                          "source": " string"
                        },
                        {
                          "core": "undefined",
                          "isNullable": false,
                          "_": 1247,
                          "source": " undefined"
                        }
                      ],
                      "isNullable": false,
                      "_": 1247,
                      "source": " string | undefined"
                    }
                  },
                  {
                    "doc": "Set the value of an environment variable.\n\n ```ts\n Deno.env.set(\"SOME_VAR\", \"Value\");\n Deno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n ```\n\n Requires `allow-env` permission.\n\n @tags allow-env",
                    "isMethod": true,
                    "_": 1260,
                    "source": "\n\n    /** Set the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    set(key: string, value: string): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1260,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1260,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1260,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Delete the value of an environment variable.\n\n ```ts\n Deno.env.set(\"SOME_VAR\", \"Value\");\n Deno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n ```\n\n Requires `allow-env` permission.\n\n @tags allow-env",
                    "isMethod": true,
                    "_": 1273,
                    "source": "\n\n    /** Delete the value of an environment variable.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    delete(key: string): void;",
                    "name": "delete",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1273,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1273,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Check whether an environment variable is present or not.\n\n ```ts\n Deno.env.set(\"SOME_VAR\", \"Value\");\n Deno.env.has(\"SOME_VAR\");  // outputs true\n ```\n\n Requires `allow-env` permission.\n\n @tags allow-env",
                    "isMethod": true,
                    "_": 1286,
                    "source": "\n\n    /** Check whether an environment variable is present or not.\n     *\n     * ```ts\n     * Deno.env.set(\"SOME_VAR\", \"Value\");\n     * Deno.env.has(\"SOME_VAR\");  // outputs true\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    has(key: string): boolean;",
                    "name": "has",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "key",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 1286,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 1286,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Returns a snapshot of the environment variables at invocation as a\n simple object of keys and values.\n\n ```ts\n Deno.env.set(\"TEST_VAR\", \"A\");\n const myEnv = Deno.env.toObject();\n console.log(myEnv.SHELL);\n Deno.env.set(\"TEST_VAR\", \"B\");\n console.log(myEnv.TEST_VAR);  // outputs \"A\"\n ```\n\n Requires `allow-env` permission.\n\n @tags allow-env",
                    "isMethod": true,
                    "_": 1303,
                    "source": "\n\n    /** Returns a snapshot of the environment variables at invocation as a\n     * simple object of keys and values.\n     *\n     * ```ts\n     * Deno.env.set(\"TEST_VAR\", \"A\");\n     * const myEnv = Deno.env.toObject();\n     * console.log(myEnv.SHELL);\n     * Deno.env.set(\"TEST_VAR\", \"B\");\n     * console.log(myEnv.TEST_VAR);  // outputs \"A\"\n     * ```\n     *\n     * Requires `allow-env` permission.\n     *\n     * @tags allow-env\n     */\n    toObject(): { [index: string]: string };",
                    "name": "toObject",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "IInline0",
                      "targs": [],
                      "isNullable": false,
                      "_": 1303,
                      "source": " { [index: string]: string }"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1415,
                "name": "Reader",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to read\nbytes into an array buffer asynchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n use all of `p` as scratch space during the call. If some data is\n available but not `p.byteLength` bytes, `read()` conventionally resolves\n to what is available instead of waiting for more.\n\n When `read()` encounters end-of-file condition, it resolves to EOF\n (`null`).\n\n When `read()` encounters an error, it rejects with an error.\n\n Callers should always process the `n` > `0` bytes returned before\n considering the EOF (`null`). Doing so correctly handles I/O errors that\n happen after reading some bytes and also both of the allowed EOF\n behaviors.\n\n Implementations should not retain a reference to `p`.\n\n Use\n [`itereateReader`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReader)\n from\n [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n to turn a `Reader` into an {@linkcode AsyncIterator}.",
                    "isMethod": true,
                    "_": 1441,
                    "source": "\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n     * bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n     * use all of `p` as scratch space during the call. If some data is\n     * available but not `p.byteLength` bytes, `read()` conventionally resolves\n     * to what is available instead of waiting for more.\n     *\n     * When `read()` encounters end-of-file condition, it resolves to EOF\n     * (`null`).\n     *\n     * When `read()` encounters an error, it rejects with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * [`itereateReader`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReader)\n     * from\n     * [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n     * to turn a `Reader` into an {@linkcode AsyncIterator}.\n     */\n    read(p: Uint8Array): Promise<number | null>;",
                    "name": "read",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 1441,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 1441,
                              "source": "number"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 1441,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 1441,
                          "source": "number | null"
                        }
                      ],
                      "isNullable": false,
                      "_": 1441,
                      "source": " Promise<number | null>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1449,
                "name": "ReaderSync",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to read\nbytes into an array buffer synchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n encountered. Even if `readSync()` returns `n` < `p.byteLength`, it may use\n all of `p` as scratch space during the call. If some data is available\n but not `p.byteLength` bytes, `readSync()` conventionally returns what is\n available instead of waiting for more.\n\n When `readSync()` encounters end-of-file condition, it returns EOF\n (`null`).\n\n When `readSync()` encounters an error, it throws with an error.\n\n Callers should always process the `n` > `0` bytes returned before\n considering the EOF (`null`). Doing so correctly handles I/O errors that\n happen after reading some bytes and also both of the allowed EOF\n behaviors.\n\n Implementations should not retain a reference to `p`.\n\n Use\n [`itereateReaderSync`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReaderSync)\n from from\n [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n to turn a `ReaderSync` into an {@linkcode Iterator}.",
                    "isMethod": true,
                    "_": 1475,
                    "source": "\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n     * of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `readSync()` returns `n` < `p.byteLength`, it may use\n     * all of `p` as scratch space during the call. If some data is available\n     * but not `p.byteLength` bytes, `readSync()` conventionally returns what is\n     * available instead of waiting for more.\n     *\n     * When `readSync()` encounters end-of-file condition, it returns EOF\n     * (`null`).\n     *\n     * When `readSync()` encounters an error, it throws with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the EOF (`null`). Doing so correctly handles I/O errors that\n     * happen after reading some bytes and also both of the allowed EOF\n     * behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     *\n     * Use\n     * [`itereateReaderSync`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReaderSync)\n     * from from\n     * [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n     * to turn a `ReaderSync` into an {@linkcode Iterator}.\n     */\n    readSync(p: Uint8Array): number | null;",
                    "name": "readSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 1475,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 1475,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 1475,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 1475,
                      "source": " number | null"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1483,
                "name": "Writer",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to write\nbytes from an array buffer to a file/resource asynchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n resolves to the number of bytes written from `p` (`0` <= `n` <=\n `p.byteLength`) or reject with the error encountered that caused the\n write to stop early. `write()` must reject with a non-null error if\n would resolve to `n` < `p.byteLength`. `write()` must not modify the\n slice data, even temporarily.\n\n Implementations should not retain a reference to `p`.",
                    "isMethod": true,
                    "_": 1493,
                    "source": "\n    /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n     * resolves to the number of bytes written from `p` (`0` <= `n` <=\n     * `p.byteLength`) or reject with the error encountered that caused the\n     * write to stop early. `write()` must reject with a non-null error if\n     * would resolve to `n` < `p.byteLength`. `write()` must not modify the\n     * slice data, even temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    write(p: Uint8Array): Promise<number>;",
                    "name": "write",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 1493,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 1493,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 1493,
                      "source": " Promise<number>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1501,
                "name": "WriterSync",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to write\nbytes from an array buffer to a file/resource synchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Writes `p.byteLength` bytes from `p` to the underlying data\n stream. It returns the number of bytes written from `p` (`0` <= `n`\n <= `p.byteLength`) and any error encountered that caused the write to\n stop early. `writeSync()` must throw a non-null error if it returns `n` <\n `p.byteLength`. `writeSync()` must not modify the slice data, even\n temporarily.\n\n Implementations should not retain a reference to `p`.",
                    "isMethod": true,
                    "_": 1511,
                    "source": "\n    /** Writes `p.byteLength` bytes from `p` to the underlying data\n     * stream. It returns the number of bytes written from `p` (`0` <= `n`\n     * <= `p.byteLength`) and any error encountered that caused the write to\n     * stop early. `writeSync()` must throw a non-null error if it returns `n` <\n     * `p.byteLength`. `writeSync()` must not modify the slice data, even\n     * temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    writeSync(p: Uint8Array): number;",
                    "name": "writeSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 1511,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1511,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1519,
                "name": "Closer",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to close\nfiles/resources that were previously opened.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Closes the resource, \"freeing\" the backing file/resource.",
                    "isMethod": true,
                    "_": 1521,
                    "source": "\n    /** Closes the resource, \"freeing\" the backing file/resource. */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 1521,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1529,
                "name": "Seeker",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to seek\nwithin an open file/resource asynchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Seek sets the offset for the next `read()` or `write()` to offset,\n interpreted according to `whence`: `Start` means relative to the\n start of the file, `Current` means relative to the current offset,\n and `End` means relative to the end. Seek resolves to the new offset\n relative to the start of the file.\n\n Seeking to an offset before the start of the file is an error. Seeking to\n any positive offset is legal, but the behavior of subsequent I/O\n operations on the underlying object is implementation-dependent.\n\n It resolves with the updated offset.",
                    "isMethod": true,
                    "_": 1542,
                    "source": "\n    /** Seek sets the offset for the next `read()` or `write()` to offset,\n     * interpreted according to `whence`: `Start` means relative to the\n     * start of the file, `Current` means relative to the current offset,\n     * and `End` means relative to the end. Seek resolves to the new offset\n     * relative to the start of the file.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It resolves with the updated offset.\n     */\n    seek(offset: number | bigint, whence: SeekMode): Promise<number>;",
                    "name": "seek",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "offset",
                        "type": {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 1542,
                              "source": " number"
                            },
                            {
                              "core": "bigint",
                              "isNullable": false,
                              "_": 1542,
                              "source": " bigint"
                            }
                          ],
                          "isNullable": false,
                          "_": 1542,
                          "source": " number | bigint"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "whence",
                        "type": {
                          "ref": "SeekMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 1542,
                          "source": " SeekMode"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 1542,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 1542,
                      "source": " Promise<number>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 1550,
                "name": "SeekerSync",
                "generics": [],
                "doc": "An abstract interface which when implemented provides an interface to seek\nwithin an open file/resource synchronously.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Seek sets the offset for the next `readSync()` or `writeSync()` to\n offset, interpreted according to `whence`: `Start` means relative\n to the start of the file, `Current` means relative to the current\n offset, and `End` means relative to the end.\n\n Seeking to an offset before the start of the file is an error. Seeking to\n any positive offset is legal, but the behavior of subsequent I/O\n operations on the underlying object is implementation-dependent.\n\n It returns the updated offset.",
                    "isMethod": true,
                    "_": 1562,
                    "source": "\n    /** Seek sets the offset for the next `readSync()` or `writeSync()` to\n     * offset, interpreted according to `whence`: `Start` means relative\n     * to the start of the file, `Current` means relative to the current\n     * offset, and `End` means relative to the end.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     *\n     * It returns the updated offset.\n     */\n    seekSync(offset: number, whence: SeekMode): number;",
                    "name": "seekSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "offset",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 1562,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "whence",
                        "type": {
                          "ref": "SeekMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 1562,
                          "source": " SeekMode"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1562,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline1",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1584,
                    "source": " bufSize?: number",
                    "name": "bufSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1584,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline2",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1600,
                    "source": " bufSize?: number",
                    "name": "bufSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1600,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline3",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 1617,
                    "source": "\n      bufSize?: number;",
                    "name": "bufSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1617,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 1998,
                "name": "FsFile",
                "generics": [],
                "doc": "The Deno abstraction for reading and writing files.\n\nThis is the most straight forward way of handling files within Deno and is\nrecommended over using the discreet functions within the `Deno` namespace.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true });\nconst fileInfo = await file.stat();\nif (fileInfo.isFile) {\n const buf = new Uint8Array(100);\n const numberOfBytesRead = await file.read(buf); // 11 bytes\n const text = new TextDecoder().decode(buf);  // \"hello world\"\n}\nfile.close();\n```",
                "heritage": [
                  [
                    {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 2000,
                      "source": "\n      Reader"
                    },
                    {
                      "ref": "ReaderSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2001,
                      "source": "\n      ReaderSync"
                    },
                    {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2002,
                      "source": "\n      Writer"
                    },
                    {
                      "ref": "WriterSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2003,
                      "source": "\n      WriterSync"
                    },
                    {
                      "ref": "Seeker",
                      "targs": [],
                      "isNullable": false,
                      "_": 2004,
                      "source": "\n      Seeker"
                    },
                    {
                      "ref": "SeekerSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2005,
                      "source": "\n      SeekerSync"
                    },
                    {
                      "ref": "Closer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2006,
                      "source": "\n      Closer"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2042,
                    "source": "\n    /** The constructor which takes a resource ID. Generally `FsFile` should\n     * not be constructed directly. Instead use {@linkcode Deno.open} or\n     * {@linkcode Deno.openSync} to create a new instance of `FsFile`. */\n    constructor(rid: number);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "rid",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 2042,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The resource ID associated with the file instance. The resource ID\nshould be considered an opaque reference to resource.",
                    "isMethod": false,
                    "_": 2009,
                    "source": "\n    /** The resource ID associated with the file instance. The resource ID\n     * should be considered an opaque reference to resource. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2009,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A {@linkcode ReadableStream} instance representing to the byte contents\nof the file. This makes it easy to interoperate with other web streams\nbased APIs.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true });\nconst decoder = new TextDecoder();\nfor await (const chunk of file.readable) {\n console.log(decoder.decode(chunk));\n}\n```",
                    "isMethod": false,
                    "_": 2022,
                    "source": "\n    /** A {@linkcode ReadableStream} instance representing to the byte contents\n     * of the file. This makes it easy to interoperate with other web streams\n     * based APIs.\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\", { read: true });\n     * const decoder = new TextDecoder();\n     * for await (const chunk of file.readable) {\n     *   console.log(decoder.decode(chunk));\n     * }\n     * ```\n     */\n    readonly readable: ReadableStream<Uint8Array>;",
                    "name": "readable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2022,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 2022,
                      "source": " ReadableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "A {@linkcode WritableStream} instance to write the contents of the\nfile. This makes it easy to interoperate with other web streams based\nAPIs.\n\n```ts\nconst items = [\"hello\", \"world\"];\nconst file = await Deno.open(\"my_file.txt\", { write: true });\nconst encoder = new TextEncoder();\nconst writer = file.writable.getWriter();\nfor (const item of items) {\n await writer.write(encoder.encode(item));\n}\nfile.close();\n```",
                    "isMethod": false,
                    "_": 2038,
                    "source": "\n    /** A {@linkcode WritableStream} instance to write the contents of the\n     * file. This makes it easy to interoperate with other web streams based\n     * APIs.\n     *\n     * ```ts\n     * const items = [\"hello\", \"world\"];\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * const encoder = new TextEncoder();\n     * const writer = file.writable.getWriter();\n     * for (const item of items) {\n     *   await writer.write(encoder.encode(item));\n     * }\n     * file.close();\n     * ```\n     */\n    readonly writable: WritableStream<Uint8Array>;",
                    "name": "writable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WritableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2038,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 2038,
                      "source": " WritableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Write the contents of the array buffer (`p`) to the file.\n\n Resolves to the number of bytes written.\n\n **It is not guaranteed that the full buffer will be written in a single\n call.**\n\n ```ts\n const encoder = new TextEncoder();\n const data = encoder.encode(\"Hello world\");\n const file = await Deno.open(\"/foo/bar.txt\", { write: true });\n const bytesWritten = await file.write(data); // 11\n file.close();\n ```\n\n @category I/O",
                    "isMethod": true,
                    "_": 2060,
                    "source": "\n    /** Write the contents of the array buffer (`p`) to the file.\n     *\n     * Resolves to the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * const file = await Deno.open(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = await file.write(data); // 11\n     * file.close();\n     * ```\n     *\n     * @category I/O\n     */\n    write(p: Uint8Array): Promise<number>;",
                    "name": "write",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2060,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2060,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 2060,
                      "source": " Promise<number>"
                    }
                  },
                  {
                    "doc": "Synchronously write the contents of the array buffer (`p`) to the file.\n\n Returns the number of bytes written.\n\n **It is not guaranteed that the full buffer will be written in a single\n call.**\n\n ```ts\n const encoder = new TextEncoder();\n const data = encoder.encode(\"Hello world\");\n const file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n const bytesWritten = file.writeSync(data); // 11\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2076,
                    "source": "\n    /** Synchronously write the contents of the array buffer (`p`) to the file.\n     *\n     * Returns the number of bytes written.\n     *\n     * **It is not guaranteed that the full buffer will be written in a single\n     * call.**\n     *\n     * ```ts\n     * const encoder = new TextEncoder();\n     * const data = encoder.encode(\"Hello world\");\n     * const file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n     * const bytesWritten = file.writeSync(data); // 11\n     * file.close();\n     * ```\n     */\n    writeSync(p: Uint8Array): number;",
                    "name": "writeSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2076,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2076,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Truncates (or extends) the file to reach the specified `len`. If `len`\n is not specified, then the entire file contents are truncated.\n\n ### Truncate the entire file\n\n ```ts\n const file = await Deno.open(\"my_file.txt\", { write: true });\n await file.truncate();\n file.close();\n ```\n\n ### Truncate part of the file\n\n ```ts\n // if \"my_file.txt\" contains the text \"hello world\":\n const file = await Deno.open(\"my_file.txt\", { write: true });\n await file.truncate(7);\n const buf = new Uint8Array(100);\n await file.read(buf);\n const text = new TextDecoder().decode(buf); // \"hello w\"\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2100,
                    "source": "\n    /** Truncates (or extends) the file to reach the specified `len`. If `len`\n     * is not specified, then the entire file contents are truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate();\n     * file.close();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * const file = await Deno.open(\"my_file.txt\", { write: true });\n     * await file.truncate(7);\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * file.close();\n     * ```\n     */\n    truncate(len?: number): Promise<void>;",
                    "name": "truncate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "len",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 2100,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 2100,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 2100,
                      "source": " Promise<void>"
                    }
                  },
                  {
                    "doc": "Synchronously truncates (or extends) the file to reach the specified\n `len`. If `len` is not specified, then the entire file contents are\n truncated.\n\n ### Truncate the entire file\n\n ```ts\n const file = Deno.openSync(\"my_file.txt\", { write: true });\n file.truncateSync();\n file.close();\n ```\n\n ### Truncate part of the file\n\n ```ts\n // if \"my_file.txt\" contains the text \"hello world\":\n const file = Deno.openSync(\"my_file.txt\", { write: true });\n file.truncateSync(7);\n const buf = new Uint8Array(100);\n file.readSync(buf);\n const text = new TextDecoder().decode(buf); // \"hello w\"\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2125,
                    "source": "\n    /** Synchronously truncates (or extends) the file to reach the specified\n     * `len`. If `len` is not specified, then the entire file contents are\n     * truncated.\n     *\n     * ### Truncate the entire file\n     *\n     * ```ts\n     * const file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync();\n     * file.close();\n     * ```\n     *\n     * ### Truncate part of the file\n     *\n     * ```ts\n     * // if \"my_file.txt\" contains the text \"hello world\":\n     * const file = Deno.openSync(\"my_file.txt\", { write: true });\n     * file.truncateSync(7);\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * const text = new TextDecoder().decode(buf); // \"hello w\"\n     * file.close();\n     * ```\n     */\n    truncateSync(len?: number): void;",
                    "name": "truncateSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "len",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 2125,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2125,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Read the file into an array buffer (`p`).\n\n Resolves to either the number of bytes read during the operation or EOF\n (`null`) if there was nothing more to read.\n\n It is possible for a read to successfully return with `0` bytes. This\n does not indicate EOF.\n\n **It is not guaranteed that the full buffer will be read in a single\n call.**\n\n ```ts\n // if \"/foo/bar.txt\" contains the text \"hello world\":\n const file = await Deno.open(\"/foo/bar.txt\");\n const buf = new Uint8Array(100);\n const numberOfBytesRead = await file.read(buf); // 11 bytes\n const text = new TextDecoder().decode(buf);  // \"hello world\"\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2146,
                    "source": "\n    /** Read the file into an array buffer (`p`).\n     *\n     * Resolves to either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * const file = await Deno.open(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = await file.read(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * file.close();\n     * ```\n     */\n    read(p: Uint8Array): Promise<number | null>;",
                    "name": "read",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2146,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 2146,
                              "source": "number"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 2146,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 2146,
                          "source": "number | null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2146,
                      "source": " Promise<number | null>"
                    }
                  },
                  {
                    "doc": "Synchronously read from the file into an array buffer (`p`).\n\n Returns either the number of bytes read during the operation or EOF\n (`null`) if there was nothing more to read.\n\n It is possible for a read to successfully return with `0` bytes. This\n does not indicate EOF.\n\n **It is not guaranteed that the full buffer will be read in a single\n call.**\n\n ```ts\n // if \"/foo/bar.txt\" contains the text \"hello world\":\n const file = Deno.openSync(\"/foo/bar.txt\");\n const buf = new Uint8Array(100);\n const numberOfBytesRead = file.readSync(buf); // 11 bytes\n const text = new TextDecoder().decode(buf);  // \"hello world\"\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2167,
                    "source": "\n    /** Synchronously read from the file into an array buffer (`p`).\n     *\n     * Returns either the number of bytes read during the operation or EOF\n     * (`null`) if there was nothing more to read.\n     *\n     * It is possible for a read to successfully return with `0` bytes. This\n     * does not indicate EOF.\n     *\n     * **It is not guaranteed that the full buffer will be read in a single\n     * call.**\n     *\n     * ```ts\n     * // if \"/foo/bar.txt\" contains the text \"hello world\":\n     * const file = Deno.openSync(\"/foo/bar.txt\");\n     * const buf = new Uint8Array(100);\n     * const numberOfBytesRead = file.readSync(buf); // 11 bytes\n     * const text = new TextDecoder().decode(buf);  // \"hello world\"\n     * file.close();\n     * ```\n     */\n    readSync(p: Uint8Array): number | null;",
                    "name": "readSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2167,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2167,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2167,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2167,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Seek to the given `offset` under mode given by `whence`. The call\n resolves to the new position within the resource (bytes from the start).\n\n ```ts\n // Given file pointing to file with \"Hello world\", which is 11 bytes long:\n const file = await Deno.open(\n   \"hello.txt\",\n   { read: true, write: true, truncate: true, create: true },\n );\n await file.write(new TextEncoder().encode(\"Hello world\"));\n\n // advance cursor 6 bytes\n const cursorPosition = await file.seek(6, Deno.SeekMode.Start);\n console.log(cursorPosition);  // 6\n const buf = new Uint8Array(100);\n await file.read(buf);\n console.log(new TextDecoder().decode(buf)); // \"world\"\n file.close();\n ```\n\n The seek modes work as follows:\n\n ```ts\n // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n const file = await Deno.open(\n   \"hello.txt\",\n   { read: true, write: true, truncate: true, create: true },\n );\n await file.write(new TextEncoder().encode(\"Hello world\"));\n\n // Seek 6 bytes from the start of the file\n console.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n // Seek 2 more bytes from the current position\n console.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n // Seek backwards 2 bytes from the end of the file\n console.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n ```",
                    "isMethod": true,
                    "_": 2206,
                    "source": "\n    /** Seek to the given `offset` under mode given by `whence`. The call\n     * resolves to the new position within the resource (bytes from the start).\n     *\n     * ```ts\n     * // Given file pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = await file.seek(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * await file.read(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * file.close();\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = await Deno.open(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * await file.write(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n     * ```\n     */\n    seek(offset: number | bigint, whence: SeekMode): Promise<number>;",
                    "name": "seek",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "offset",
                        "type": {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 2206,
                              "source": " number"
                            },
                            {
                              "core": "bigint",
                              "isNullable": false,
                              "_": 2206,
                              "source": " bigint"
                            }
                          ],
                          "isNullable": false,
                          "_": 2206,
                          "source": " number | bigint"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "whence",
                        "type": {
                          "ref": "SeekMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 2206,
                          "source": " SeekMode"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2206,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 2206,
                      "source": " Promise<number>"
                    }
                  },
                  {
                    "doc": "Synchronously seek to the given `offset` under mode given by `whence`.\n The new position within the resource (bytes from the start) is returned.\n\n ```ts\n const file = Deno.openSync(\n   \"hello.txt\",\n   { read: true, write: true, truncate: true, create: true },\n );\n file.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n // advance cursor 6 bytes\n const cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\n console.log(cursorPosition);  // 6\n const buf = new Uint8Array(100);\n file.readSync(buf);\n console.log(new TextDecoder().decode(buf)); // \"world\"\n file.close();\n ```\n\n The seek modes work as follows:\n\n ```ts\n // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n const file = Deno.openSync(\n   \"hello.txt\",\n   { read: true, write: true, truncate: true, create: true },\n );\n file.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n // Seek 6 bytes from the start of the file\n console.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n // Seek 2 more bytes from the current position\n console.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n // Seek backwards 2 bytes from the end of the file\n console.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2245,
                    "source": "\n    /** Synchronously seek to the given `offset` under mode given by `whence`.\n     * The new position within the resource (bytes from the start) is returned.\n     *\n     * ```ts\n     * const file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // advance cursor 6 bytes\n     * const cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\n     * console.log(cursorPosition);  // 6\n     * const buf = new Uint8Array(100);\n     * file.readSync(buf);\n     * console.log(new TextDecoder().decode(buf)); // \"world\"\n     * file.close();\n     * ```\n     *\n     * The seek modes work as follows:\n     *\n     * ```ts\n     * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n     * const file = Deno.openSync(\n     *   \"hello.txt\",\n     *   { read: true, write: true, truncate: true, create: true },\n     * );\n     * file.writeSync(new TextEncoder().encode(\"Hello world\"));\n     *\n     * // Seek 6 bytes from the start of the file\n     * console.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n     * // Seek 2 more bytes from the current position\n     * console.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n     * // Seek backwards 2 bytes from the end of the file\n     * console.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n     * file.close();\n     * ```\n     */\n    seekSync(offset: number | bigint, whence: SeekMode): number;",
                    "name": "seekSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "offset",
                        "type": {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 2245,
                              "source": " number"
                            },
                            {
                              "core": "bigint",
                              "isNullable": false,
                              "_": 2245,
                              "source": " bigint"
                            }
                          ],
                          "isNullable": false,
                          "_": 2245,
                          "source": " number | bigint"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "whence",
                        "type": {
                          "ref": "SeekMode",
                          "targs": [],
                          "isNullable": false,
                          "_": 2245,
                          "source": " SeekMode"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2245,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Resolves to a {@linkcode Deno.FileInfo} for the file.\n\n ```ts\n import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\n const file = await Deno.open(\"hello.txt\");\n const fileInfo = await file.stat();\n assert(fileInfo.isFile);\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2257,
                    "source": "\n    /** Resolves to a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const file = await Deno.open(\"hello.txt\");\n     * const fileInfo = await file.stat();\n     * assert(fileInfo.isFile);\n     * file.close();\n     * ```\n     */\n    stat(): Promise<FileInfo>;",
                    "name": "stat",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "FileInfo",
                          "targs": [],
                          "isNullable": false,
                          "_": 2257,
                          "source": "FileInfo"
                        }
                      ],
                      "isNullable": false,
                      "_": 2257,
                      "source": " Promise<FileInfo>"
                    }
                  },
                  {
                    "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n\n ```ts\n import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\n const file = Deno.openSync(\"hello.txt\")\n const fileInfo = file.statSync();\n assert(fileInfo.isFile);\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2269,
                    "source": "\n    /** Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const file = Deno.openSync(\"hello.txt\")\n     * const fileInfo = file.statSync();\n     * assert(fileInfo.isFile);\n     * file.close();\n     * ```\n     */\n    statSync(): FileInfo;",
                    "name": "statSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "FileInfo",
                      "targs": [],
                      "isNullable": false,
                      "_": 2269,
                      "source": " FileInfo"
                    }
                  },
                  {
                    "doc": "Close the file. Closing a file when you are finished with it is\n important to avoid leaking resources.\n\n ```ts\n const file = await Deno.open(\"my_file.txt\");\n // do work with \"file\" object\n file.close();\n ```",
                    "isMethod": true,
                    "_": 2279,
                    "source": "\n    /** Close the file. Closing a file when you are finished with it is\n     * important to avoid leaking resources.\n     *\n     * ```ts\n     * const file = await Deno.open(\"my_file.txt\");\n     * // do work with \"file\" object\n     * file.close();\n     * ```\n     */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2279,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline4",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2304,
                    "source": "\n    columns: number;",
                    "name": "columns",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2304,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2305,
                    "source": "\n    rows: number;",
                    "name": "rows",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2305,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2309,
                "name": "SetRawOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The `cbreak` option can be used to indicate that characters that\n correspond to a signal should still be generated. When disabling raw\n mode, this option is ignored. This functionality currently only works on\n Linux and Mac OS.",
                    "isMethod": false,
                    "_": 2316,
                    "source": "\n    /**\n     * The `cbreak` option can be used to indicate that characters that\n     * correspond to a signal should still be generated. When disabling raw\n     * mode, this option is ignored. This functionality currently only works on\n     * Linux and Mac OS.\n     */\n    cbreak: boolean;",
                    "name": "cbreak",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2316,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline5",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource ID assigned to `stdin`. This can be used with the discreet\nI/O functions in the `Deno` namespace.",
                    "isMethod": false,
                    "_": 2339,
                    "source": "\n    /** The resource ID assigned to `stdin`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2339,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A readable stream interface to `stdin`.",
                    "isMethod": false,
                    "_": 2341,
                    "source": "\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;",
                    "name": "readable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2341,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 2341,
                      "source": " ReadableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Set TTY to be under raw mode or not. In raw mode, characters are read and\n returned as is, without being processed. All special processing of\n characters by the terminal is disabled, including echoing input\n characters. Reading from a TTY device in raw mode is faster than reading\n from a TTY device in canonical mode.\n\n ```ts\n Deno.stdin.setRaw(true, { cbreak: true });\n ```\n\n @category I/O",
                    "isMethod": true,
                    "_": 2355,
                    "source": "\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;",
                    "name": "setRaw",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "mode",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 2355,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "SetRawOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 2355,
                          "source": " SetRawOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2355,
                      "source": " void"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline6",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource ID assigned to `stdout`. This can be used with the discreet\nI/O functions in the `Deno` namespace.",
                    "isMethod": false,
                    "_": 2370,
                    "source": "\n    /** The resource ID assigned to `stdout`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2370,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A writable stream interface to `stdout`.",
                    "isMethod": false,
                    "_": 2372,
                    "source": "\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;",
                    "name": "writable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WritableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2372,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 2372,
                      "source": " WritableStream<Uint8Array>"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline7",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource ID assigned to `stderr`. This can be used with the discreet\nI/O functions in the `Deno` namespace.",
                    "isMethod": false,
                    "_": 2387,
                    "source": "\n    /** The resource ID assigned to `stderr`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2387,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A writable stream interface to `stderr`.",
                    "isMethod": false,
                    "_": 2389,
                    "source": "\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;",
                    "name": "writable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WritableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2389,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 2389,
                      "source": " WritableStream<Uint8Array>"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2397,
                "name": "OpenOptions",
                "generics": [],
                "doc": "Options which can be set when doing {@linkcode Deno.open} and\n{@linkcode Deno.openSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Sets the option for read access. This option, when `true`, means that\n the file should be read-able if opened.\n\n @default {true}",
                    "isMethod": false,
                    "_": 2402,
                    "source": "\n    /** Sets the option for read access. This option, when `true`, means that\n     * the file should be read-able if opened.\n     *\n     * @default {true} */\n    read?: boolean;",
                    "name": "read",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2402,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sets the option for write access. This option, when `true`, means that\n the file should be write-able if opened. If the file already exists,\n any write calls on it will overwrite its contents, by default without\n truncating it.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2409,
                    "source": "\n    /** Sets the option for write access. This option, when `true`, means that\n     * the file should be write-able if opened. If the file already exists,\n     * any write calls on it will overwrite its contents, by default without\n     * truncating it.\n     *\n     * @default {false} */\n    write?: boolean;",
                    "name": "write",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2409,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sets the option for the append mode. This option, when `true`, means\n that writes will append to a file instead of overwriting previous\n contents.\n\n Note that setting `{ write: true, append: true }` has the same effect as\n setting only `{ append: true }`.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2418,
                    "source": "\n    /** Sets the option for the append mode. This option, when `true`, means\n     * that writes will append to a file instead of overwriting previous\n     * contents.\n     *\n     * Note that setting `{ write: true, append: true }` has the same effect as\n     * setting only `{ append: true }`.\n     *\n     * @default {false} */\n    append?: boolean;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2418,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sets the option for truncating a previous file. If a file is\n successfully opened with this option set it will truncate the file to `0`\n size if it already exists. The file must be opened with write access\n for truncate to work.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2425,
                    "source": "\n    /** Sets the option for truncating a previous file. If a file is\n     * successfully opened with this option set it will truncate the file to `0`\n     * size if it already exists. The file must be opened with write access\n     * for truncate to work.\n     *\n     * @default {false} */\n    truncate?: boolean;",
                    "name": "truncate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2425,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sets the option to allow creating a new file, if one doesn't already\n exist at the specified path. Requires write or append access to be\n used.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2431,
                    "source": "\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path. Requires write or append access to be\n     * used.\n     *\n     * @default {false} */\n    create?: boolean;",
                    "name": "create",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2431,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\n the target location. Requires write or append access to be used. When\n createNew is set to `true`, create and truncate are ignored.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2437,
                    "source": "\n    /** If set to `true`, no file, directory, or symlink is allowed to exist at\n     * the target location. Requires write or append access to be used. When\n     * createNew is set to `true`, create and truncate are ignored.\n     *\n     * @default {false} */\n    createNew?: boolean;",
                    "name": "createNew",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2437,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Permissions to use if creating the file (defaults to `0o666`, before\n the process's umask).\n\n Ignored on Windows.",
                    "isMethod": false,
                    "_": 2442,
                    "source": "\n    /** Permissions to use if creating the file (defaults to `0o666`, before\n     * the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;",
                    "name": "mode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2442,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2450,
                "name": "ReadFileOptions",
                "generics": [],
                "doc": "Options which can be set when using {@linkcode Deno.readFile} or\n{@linkcode Deno.readFileSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "An abort signal to allow cancellation of the file read operation.\n If the signal becomes aborted the readFile operation will be stopped\n and the promise returned will be rejected with an AbortError.",
                    "isMethod": false,
                    "_": 2456,
                    "source": "\n    /**\n     * An abort signal to allow cancellation of the file read operation.\n     * If the signal becomes aborted the readFile operation will be stopped\n     * and the promise returned will be rejected with an AbortError.\n     */\n    signal?: AbortSignal;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AbortSignal",
                      "targs": [],
                      "isNullable": false,
                      "_": 2456,
                      "source": " AbortSignal"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline8",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "Buffer",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 2496,
                    "source": " copy?: boolean",
                    "name": "copy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2496,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 2485,
                "name": "Buffer",
                "generics": [],
                "doc": "A variable-sized buffer of bytes with `read()` and `write()` methods.",
                "heritage": [
                  [
                    {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 2485,
                      "source": " Reader"
                    },
                    {
                      "ref": "ReaderSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2485,
                      "source": " ReaderSync"
                    },
                    {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2485,
                      "source": " Writer"
                    },
                    {
                      "ref": "WriterSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2485,
                      "source": " WriterSync"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 2486,
                    "source": "\n    constructor(ab?: ArrayBuffer);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "ab",
                        "type": {
                          "ref": "ArrayBuffer",
                          "targs": [],
                          "isNullable": false,
                          "_": 2486,
                          "source": " ArrayBuffer"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Returns a slice holding the unread portion of the buffer.\n\n The slice is valid for use only until the next buffer modification (that\n is, only until the next call to a method like `read()`, `write()`,\n `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\n least until the next buffer modification, so immediate changes to the\n slice will affect the result of future reads.\n @param options Defaults to `{ copy: true }`",
                    "isMethod": true,
                    "_": 2496,
                    "source": "\n    /** Returns a slice holding the unread portion of the buffer.\n     *\n     * The slice is valid for use only until the next buffer modification (that\n     * is, only until the next call to a method like `read()`, `write()`,\n     * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\n     * least until the next buffer modification, so immediate changes to the\n     * slice will affect the result of future reads.\n     * @param options Defaults to `{ copy: true }`\n     */\n    bytes(options?: { copy?: boolean }): Uint8Array;",
                    "name": "bytes",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "options",
                        "type": {
                          "ref": "IInline8",
                          "targs": [],
                          "isNullable": false,
                          "_": 2496,
                          "source": " { copy?: boolean }"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 2496,
                      "source": " Uint8Array"
                    }
                  },
                  {
                    "doc": "Returns whether the unread portion of the buffer is empty.",
                    "isMethod": true,
                    "_": 2498,
                    "source": "\n    /** Returns whether the unread portion of the buffer is empty. */\n    empty(): boolean;",
                    "name": "empty",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2498,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "A read only number of bytes of the unread portion of the buffer.",
                    "isMethod": false,
                    "_": 2500,
                    "source": "\n    /** A read only number of bytes of the unread portion of the buffer. */\n    readonly length: number;",
                    "name": "length",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2500,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The read only capacity of the buffer's underlying byte slice, that is,\nthe total space allocated for the buffer's data.",
                    "isMethod": false,
                    "_": 2503,
                    "source": "\n    /** The read only capacity of the buffer's underlying byte slice, that is,\n     * the total space allocated for the buffer's data. */\n    readonly capacity: number;",
                    "name": "capacity",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2503,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Discards all but the first `n` unread bytes from the buffer but\n continues to use the same allocated storage. It throws if `n` is\n negative or greater than the length of the buffer.",
                    "isMethod": true,
                    "_": 2507,
                    "source": "\n    /** Discards all but the first `n` unread bytes from the buffer but\n     * continues to use the same allocated storage. It throws if `n` is\n     * negative or greater than the length of the buffer. */\n    truncate(n: number): void;",
                    "name": "truncate",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "n",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 2507,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2507,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Resets the buffer to be empty, but it retains the underlying storage for\n use by future writes. `.reset()` is the same as `.truncate(0)`.",
                    "isMethod": true,
                    "_": 2510,
                    "source": "\n    /** Resets the buffer to be empty, but it retains the underlying storage for\n     * use by future writes. `.reset()` is the same as `.truncate(0)`. */\n    reset(): void;",
                    "name": "reset",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2510,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Reads the next `p.length` bytes from the buffer or until the buffer is\n drained. Returns the number of bytes read. If the buffer has no data to\n return, the return is EOF (`null`).",
                    "isMethod": true,
                    "_": 2514,
                    "source": "\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Returns the number of bytes read. If the buffer has no data to\n     * return, the return is EOF (`null`). */\n    readSync(p: Uint8Array): number | null;",
                    "name": "readSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2514,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2514,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2514,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2514,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Reads the next `p.length` bytes from the buffer or until the buffer is\n drained. Resolves to the number of bytes read. If the buffer has no\n data to return, resolves to EOF (`null`).\n\n NOTE: This methods reads bytes synchronously; it's provided for\n compatibility with `Reader` interfaces.",
                    "isMethod": true,
                    "_": 2522,
                    "source": "\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Resolves to the number of bytes read. If the buffer has no\n     * data to return, resolves to EOF (`null`).\n     *\n     * NOTE: This methods reads bytes synchronously; it's provided for\n     * compatibility with `Reader` interfaces.\n     */\n    read(p: Uint8Array): Promise<number | null>;",
                    "name": "read",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2522,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "union": [
                            {
                              "core": "number",
                              "isNullable": false,
                              "_": 2522,
                              "source": "number"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 2522,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 2522,
                          "source": "number | null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2522,
                      "source": " Promise<number | null>"
                    }
                  },
                  {
                    "doc": "Writes `p.byteLength` bytes from `p` to the underlying data\nstream. It returns the number of bytes written from `p` (`0` <= `n`\n<= `p.byteLength`) and any error encountered that caused the write to\nstop early. `writeSync()` must throw a non-null error if it returns `n` <\n`p.byteLength`. `writeSync()` must not modify the slice data, even\ntemporarily.\n\nImplementations should not retain a reference to `p`.",
                    "isMethod": true,
                    "_": 2523,
                    "source": "\n    writeSync(p: Uint8Array): number;",
                    "name": "writeSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2523,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2523,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "NOTE: This methods writes bytes synchronously; it's provided for\n compatibility with `Writer` interface.",
                    "isMethod": true,
                    "_": 2526,
                    "source": "\n    /** NOTE: This methods writes bytes synchronously; it's provided for\n     * compatibility with `Writer` interface. */\n    write(p: Uint8Array): Promise<number>;",
                    "name": "write",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "p",
                        "type": {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 2526,
                          "source": " Uint8Array"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2526,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 2526,
                      "source": " Promise<number>"
                    }
                  },
                  {
                    "doc": "Grows the buffer's capacity, if necessary, to guarantee space for\n another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\n the buffer without another allocation. If `n` is negative, `.grow()` will\n throw. If the buffer can't grow it will throw an error.\n\n Based on Go Lang's\n [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow).",
                    "isMethod": true,
                    "_": 2534,
                    "source": "\n    /** Grows the buffer's capacity, if necessary, to guarantee space for\n     * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\n     * the buffer without another allocation. If `n` is negative, `.grow()` will\n     * throw. If the buffer can't grow it will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */\n    grow(n: number): void;",
                    "name": "grow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "n",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 2534,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 2534,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\n growing the buffer as needed. It resolves to the number of bytes read.\n If the buffer becomes too large, `.readFrom()` will reject with an error.\n\n Based on Go Lang's\n [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                    "isMethod": true,
                    "_": 2541,
                    "source": "\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It resolves to the number of bytes read.\n     * If the buffer becomes too large, `.readFrom()` will reject with an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFrom(r: Reader): Promise<number>;",
                    "name": "readFrom",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "r",
                        "type": {
                          "ref": "Reader",
                          "targs": [],
                          "isNullable": false,
                          "_": 2541,
                          "source": " Reader"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2541,
                          "source": "number"
                        }
                      ],
                      "isNullable": false,
                      "_": 2541,
                      "source": " Promise<number>"
                    }
                  },
                  {
                    "doc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\n growing the buffer as needed. It returns the number of bytes read. If the\n buffer becomes too large, `.readFromSync()` will throw an error.\n\n Based on Go Lang's\n [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                    "isMethod": true,
                    "_": 2548,
                    "source": "\n    /** Reads data from `r` until EOF (`null`) and appends it to the buffer,\n     * growing the buffer as needed. It returns the number of bytes read. If the\n     * buffer becomes too large, `.readFromSync()` will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFromSync(r: ReaderSync): number;",
                    "name": "readFromSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "r",
                        "type": {
                          "ref": "ReaderSync",
                          "targs": [],
                          "isNullable": false,
                          "_": 2548,
                          "source": " ReaderSync"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2548,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 2609,
                "name": "MkdirOptions",
                "generics": [],
                "doc": "Options which can be set when using {@linkcode Deno.mkdir} and\n{@linkcode Deno.mkdirSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If set to `true`, means that any intermediate directories will also be\n created (as with the shell command `mkdir -p`).\n\n Intermediate directories are created with the same permissions.\n\n When recursive is set to `true`, succeeds silently (without changing any\n permissions) if a directory already exists at the path, or if the path\n is a symlink to an existing directory.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2620,
                    "source": "\n    /** If set to `true`, means that any intermediate directories will also be\n     * created (as with the shell command `mkdir -p`).\n     *\n     * Intermediate directories are created with the same permissions.\n     *\n     * When recursive is set to `true`, succeeds silently (without changing any\n     * permissions) if a directory already exists at the path, or if the path\n     * is a symlink to an existing directory.\n     *\n     * @default {false} */\n    recursive?: boolean;",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2620,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Permissions to use when creating the directory (defaults to `0o777`,\n before the process's umask).\n\n Ignored on Windows.",
                    "isMethod": false,
                    "_": 2625,
                    "source": "\n    /** Permissions to use when creating the directory (defaults to `0o777`,\n     * before the process's umask).\n     *\n     * Ignored on Windows. */\n    mode?: number;",
                    "name": "mode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2625,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2671,
                "name": "MakeTempOptions",
                "generics": [],
                "doc": "Options which can be set when using {@linkcode Deno.makeTempDir},\n{@linkcode Deno.makeTempDirSync}, {@linkcode Deno.makeTempFile}, and\n{@linkcode Deno.makeTempFileSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Directory where the temporary directory should be created (defaults to\n the env variable `TMPDIR`, or the system's default, usually `/tmp`).\n\n Note that if the passed `dir` is relative, the path returned by\n `makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\n this when changing working directory.",
                    "isMethod": false,
                    "_": 2678,
                    "source": "\n    /** Directory where the temporary directory should be created (defaults to\n     * the env variable `TMPDIR`, or the system's default, usually `/tmp`).\n     *\n     * Note that if the passed `dir` is relative, the path returned by\n     * `makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\n     * this when changing working directory. */\n    dir?: string;",
                    "name": "dir",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2678,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "String that should precede the random portion of the temporary\n directory's name.",
                    "isMethod": false,
                    "_": 2681,
                    "source": "\n    /** String that should precede the random portion of the temporary\n     * directory's name. */\n    prefix?: string;",
                    "name": "prefix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2681,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "String that should follow the random portion of the temporary\n directory's name.",
                    "isMethod": false,
                    "_": 2684,
                    "source": "\n    /** String that should follow the random portion of the temporary\n     * directory's name. */\n    suffix?: string;",
                    "name": "suffix",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 2684,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 2890,
                "name": "RemoveOptions",
                "generics": [],
                "doc": "Options which can be set when using {@linkcode Deno.remove} and\n{@linkcode Deno.removeSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If set to `true`, path will be removed even if it's a non-empty directory.\n\n @default {false}",
                    "isMethod": false,
                    "_": 2894,
                    "source": "\n    /** If set to `true`, path will be removed even if it's a non-empty directory.\n     *\n     * @default {false} */\n    recursive?: boolean;",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 2894,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3060,
                "name": "FileInfo",
                "generics": [],
                "doc": "Provides information about a file and is returned by\n{@linkcode Deno.stat}, {@linkcode Deno.lstat}, {@linkcode Deno.statSync},\nand {@linkcode Deno.lstatSync} or from calling `stat()` and `statSync()`\non an {@linkcode Deno.FsFile} instance.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "True if this is info for a regular file. Mutually exclusive to\n `FileInfo.isDirectory` and `FileInfo.isSymlink`.",
                    "isMethod": false,
                    "_": 3063,
                    "source": "\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `FileInfo.isDirectory` and `FileInfo.isSymlink`. */\n    isFile: boolean;",
                    "name": "isFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3063,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "True if this is info for a regular directory. Mutually exclusive to\n `FileInfo.isFile` and `FileInfo.isSymlink`.",
                    "isMethod": false,
                    "_": 3066,
                    "source": "\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isSymlink`. */\n    isDirectory: boolean;",
                    "name": "isDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3066,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "True if this is info for a symlink. Mutually exclusive to\n `FileInfo.isFile` and `FileInfo.isDirectory`.",
                    "isMethod": false,
                    "_": 3069,
                    "source": "\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `FileInfo.isFile` and `FileInfo.isDirectory`. */\n    isSymlink: boolean;",
                    "name": "isSymlink",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3069,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The size of the file, in bytes.",
                    "isMethod": false,
                    "_": 3071,
                    "source": "\n    /** The size of the file, in bytes. */\n    size: number;",
                    "name": "size",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3071,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The last modification time of the file. This corresponds to the `mtime`\n field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n may not be available on all platforms.",
                    "isMethod": false,
                    "_": 3075,
                    "source": "\n    /** The last modification time of the file. This corresponds to the `mtime`\n     * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n     * may not be available on all platforms. */\n    mtime: Date | null;",
                    "name": "mtime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 3075,
                          "source": " Date"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3075,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3075,
                      "source": " Date | null"
                    }
                  },
                  {
                    "doc": "The last access time of the file. This corresponds to the `atime`\n field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n be available on all platforms.",
                    "isMethod": false,
                    "_": 3079,
                    "source": "\n    /** The last access time of the file. This corresponds to the `atime`\n     * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n     * be available on all platforms. */\n    atime: Date | null;",
                    "name": "atime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 3079,
                          "source": " Date"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3079,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3079,
                      "source": " Date | null"
                    }
                  },
                  {
                    "doc": "The creation time of the file. This corresponds to the `birthtime`\n field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\n not be available on all platforms.",
                    "isMethod": false,
                    "_": 3083,
                    "source": "\n    /** The creation time of the file. This corresponds to the `birthtime`\n     * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\n     * not be available on all platforms. */\n    birthtime: Date | null;",
                    "name": "birthtime",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 3083,
                          "source": " Date"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3083,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3083,
                      "source": " Date | null"
                    }
                  },
                  {
                    "doc": "ID of the device containing the file.",
                    "isMethod": false,
                    "_": 3085,
                    "source": "\n    /** ID of the device containing the file. */\n    dev: number;",
                    "name": "dev",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3085,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Inode number.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3089,
                    "source": "\n    /** Inode number.\n     *\n     * _Linux/Mac OS only._ */\n    ino: number | null;",
                    "name": "ino",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3089,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3089,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3089,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "*UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\n The underlying raw `st_mode` bits that contain the standard Unix\n permissions for this file/directory.",
                    "isMethod": false,
                    "_": 3094,
                    "source": "\n    /** **UNSTABLE**: Match behavior with Go on Windows for `mode`.\n     *\n     * The underlying raw `st_mode` bits that contain the standard Unix\n     * permissions for this file/directory. */\n    mode: number | null;",
                    "name": "mode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3094,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3094,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3094,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Number of hard links pointing to this file.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3098,
                    "source": "\n    /** Number of hard links pointing to this file.\n     *\n     * _Linux/Mac OS only._ */\n    nlink: number | null;",
                    "name": "nlink",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3098,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3098,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3098,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "User ID of the owner of this file.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3102,
                    "source": "\n    /** User ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    uid: number | null;",
                    "name": "uid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3102,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3102,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3102,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Group ID of the owner of this file.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3106,
                    "source": "\n    /** Group ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    gid: number | null;",
                    "name": "gid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3106,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3106,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3106,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Device ID of this file.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3110,
                    "source": "\n    /** Device ID of this file.\n     *\n     * _Linux/Mac OS only._ */\n    rdev: number | null;",
                    "name": "rdev",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3110,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3110,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3110,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Blocksize for filesystem I/O.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3114,
                    "source": "\n    /** Blocksize for filesystem I/O.\n     *\n     * _Linux/Mac OS only._ */\n    blksize: number | null;",
                    "name": "blksize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3114,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3114,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3114,
                      "source": " number | null"
                    }
                  },
                  {
                    "doc": "Number of blocks allocated to the file, in 512-byte units.\n\n _Linux/Mac OS only._",
                    "isMethod": false,
                    "_": 3118,
                    "source": "\n    /** Number of blocks allocated to the file, in 512-byte units.\n     *\n     * _Linux/Mac OS only._ */\n    blocks: number | null;",
                    "name": "blocks",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3118,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 3118,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 3118,
                      "source": " number | null"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3169,
                "name": "DirEntry",
                "generics": [],
                "doc": "Information about a directory entry returned from {@linkcode Deno.readDir}\nand {@linkcode Deno.readDirSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The file name of the entry. It is just the entity name and does not\n include the full path.",
                    "isMethod": false,
                    "_": 3172,
                    "source": "\n    /** The file name of the entry. It is just the entity name and does not\n     * include the full path. */\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3172,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "True if this is info for a regular file. Mutually exclusive to\n `DirEntry.isDirectory` and `DirEntry.isSymlink`.",
                    "isMethod": false,
                    "_": 3175,
                    "source": "\n    /** True if this is info for a regular file. Mutually exclusive to\n     * `DirEntry.isDirectory` and `DirEntry.isSymlink`. */\n    isFile: boolean;",
                    "name": "isFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3175,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "True if this is info for a regular directory. Mutually exclusive to\n `DirEntry.isFile` and `DirEntry.isSymlink`.",
                    "isMethod": false,
                    "_": 3178,
                    "source": "\n    /** True if this is info for a regular directory. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isSymlink`. */\n    isDirectory: boolean;",
                    "name": "isDirectory",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3178,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "True if this is info for a symlink. Mutually exclusive to\n `DirEntry.isFile` and `DirEntry.isDirectory`.",
                    "isMethod": false,
                    "_": 3181,
                    "source": "\n    /** True if this is info for a symlink. Mutually exclusive to\n     * `DirEntry.isFile` and `DirEntry.isDirectory`. */\n    isSymlink: boolean;",
                    "name": "isSymlink",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3181,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3363,
                "name": "WriteFileOptions",
                "generics": [],
                "doc": "Options for writing to a file.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If set to `true`, will append to a file instead of overwriting previous\n contents.\n\n @default {false}",
                    "isMethod": false,
                    "_": 3368,
                    "source": "\n    /** If set to `true`, will append to a file instead of overwriting previous\n     * contents.\n     *\n     * @default {false} */\n    append?: boolean;",
                    "name": "append",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3368,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sets the option to allow creating a new file, if one doesn't already\n exist at the specified path.\n\n @default {true}",
                    "isMethod": false,
                    "_": 3373,
                    "source": "\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path.\n     *\n     * @default {true} */\n    create?: boolean;",
                    "name": "create",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3373,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\n the target location. When createNew is set to `true`, `create` is ignored.\n\n @default {false}",
                    "isMethod": false,
                    "_": 3378,
                    "source": "\n    /** If set to `true`, no file, directory, or symlink is allowed to exist at\n     * the target location. When createNew is set to `true`, `create` is ignored.\n     *\n     * @default {false} */\n    createNew?: boolean;",
                    "name": "createNew",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3378,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Permissions always applied to file.",
                    "isMethod": false,
                    "_": 3380,
                    "source": "\n    /** Permissions always applied to file. */\n    mode?: number;",
                    "name": "mode",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3380,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "An abort signal to allow cancellation of the file write operation.\n\n If the signal becomes aborted the write file operation will be stopped\n and the promise returned will be rejected with an {@linkcode AbortError}.",
                    "isMethod": false,
                    "_": 3386,
                    "source": "\n    /** An abort signal to allow cancellation of the file write operation.\n     *\n     * If the signal becomes aborted the write file operation will be stopped\n     * and the promise returned will be rejected with an {@linkcode AbortError}.\n     */\n    signal?: AbortSignal;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AbortSignal",
                      "targs": [],
                      "isNullable": false,
                      "_": 3386,
                      "source": " AbortSignal"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3528,
                "name": "OpMetrics",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3529,
                    "source": "\n    opsDispatched: number;",
                    "name": "opsDispatched",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3529,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3530,
                    "source": "\n    opsDispatchedSync: number;",
                    "name": "opsDispatchedSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3530,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3531,
                    "source": "\n    opsDispatchedAsync: number;",
                    "name": "opsDispatchedAsync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3531,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3532,
                    "source": "\n    opsDispatchedAsyncUnref: number;",
                    "name": "opsDispatchedAsyncUnref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3532,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3533,
                    "source": "\n    opsCompleted: number;",
                    "name": "opsCompleted",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3533,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3534,
                    "source": "\n    opsCompletedSync: number;",
                    "name": "opsCompletedSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3534,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3535,
                    "source": "\n    opsCompletedAsync: number;",
                    "name": "opsCompletedAsync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3535,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3536,
                    "source": "\n    opsCompletedAsyncUnref: number;",
                    "name": "opsCompletedAsyncUnref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3536,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3537,
                    "source": "\n    bytesSentControl: number;",
                    "name": "bytesSentControl",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3537,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3538,
                    "source": "\n    bytesSentData: number;",
                    "name": "bytesSentData",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3538,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3539,
                    "source": "\n    bytesReceived: number;",
                    "name": "bytesReceived",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3539,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3543,
                "name": "Metrics",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "OpMetrics",
                      "targs": [],
                      "isNullable": false,
                      "_": 3543,
                      "source": " OpMetrics"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3544,
                    "source": "\n    ops: Record<string, OpMetrics>;",
                    "name": "ops",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Record",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3544,
                          "source": "string"
                        },
                        {
                          "ref": "OpMetrics",
                          "targs": [],
                          "isNullable": false,
                          "_": 3544,
                          "source": " OpMetrics"
                        }
                      ],
                      "isNullable": false,
                      "_": 3544,
                      "source": " Record<string, OpMetrics>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3579,
                "name": "ResourceMap",
                "generics": [],
                "doc": "A map of open resources that Deno is tracking. The key is the resource ID\n(_rid_) and the value is its representation.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [
                  {
                    "key": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3580,
                      "source": " number"
                    },
                    "value": {
                      "core": "unknown",
                      "isNullable": false,
                      "_": 3580,
                      "source": " unknown"
                    },
                    "doc": "",
                    "_": 3580,
                    "source": "\n    [rid: number]: unknown;",
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false
                  }
                ],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3620,
                "name": "FsEvent",
                "generics": [],
                "doc": "Represents a unique file system event yielded by a\n{@linkcode Deno.FsWatcher}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The kind/type of the file system event.",
                    "isMethod": false,
                    "_": 3622,
                    "source": "\n    /** The kind/type of the file system event. */\n    kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\" | \"other\";",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"any\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"any\""
                        },
                        {
                          "core": "\"access\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"access\""
                        },
                        {
                          "core": "\"create\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"create\""
                        },
                        {
                          "core": "\"modify\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"modify\""
                        },
                        {
                          "core": "\"remove\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"remove\""
                        },
                        {
                          "core": "\"other\"",
                          "isNullable": false,
                          "_": 3622,
                          "source": " \"other\""
                        }
                      ],
                      "isNullable": false,
                      "_": 3622,
                      "source": " \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\" | \"other\""
                    }
                  },
                  {
                    "doc": "An array of paths that are associated with the file system event.",
                    "isMethod": false,
                    "_": 3624,
                    "source": "\n    /** An array of paths that are associated with the file system event. */\n    paths: string[];",
                    "name": "paths",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3624,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 3624,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "Any additional flags associated with the event.",
                    "isMethod": false,
                    "_": 3626,
                    "source": "\n    /** Any additional flags associated with the event. */\n    flag?: FsEventFlag;",
                    "name": "flag",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "FsEventFlag",
                      "targs": [],
                      "isNullable": false,
                      "_": 3626,
                      "source": " FsEventFlag"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 3636,
                "name": "FsWatcher",
                "generics": [],
                "doc": "Returned by {@linkcode Deno.watchFs}. It is an async iterator yielding up\nsystem events. To stop watching the file system by calling `.close()`\nmethod.",
                "heritage": [
                  [
                    {
                      "ref": "AsyncIterable",
                      "targs": [
                        {
                          "ref": "FsEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 3636,
                          "source": "FsEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 3636,
                      "source": " AsyncIterable<FsEvent>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource id.",
                    "isMethod": false,
                    "_": 3638,
                    "source": "\n    /** The resource id. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3638,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Stops watching the file system and closes the watcher resource.",
                    "isMethod": true,
                    "_": 3640,
                    "source": "\n    /** Stops watching the file system and closes the watcher resource. */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3640,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Stops watching the file system and closes the watcher resource.\n\n @deprecated Will be removed in the future.",
                    "isMethod": true,
                    "_": 3646,
                    "source": "\n    /**\n     * Stops watching the file system and closes the watcher resource.\n     *\n     * @deprecated Will be removed in the future.\n     */\n    return?(value?: any): Promise<IteratorResult<FsEvent>>;",
                    "name": "return",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "value",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 3646,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "IteratorResult",
                          "targs": [
                            {
                              "ref": "FsEvent",
                              "targs": [],
                              "isNullable": false,
                              "_": 3646,
                              "source": "FsEvent"
                            }
                          ],
                          "isNullable": false,
                          "_": 3646,
                          "source": "IteratorResult<FsEvent>"
                        }
                      ],
                      "isNullable": false,
                      "_": 3646,
                      "source": " Promise<IteratorResult<FsEvent>>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 3647,
                    "source": "\n    [Symbol.asyncIterator](): AsyncIterableIterator<FsEvent>;",
                    "name": "[Symbol.asyncIterator]",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "AsyncIterableIterator",
                      "targs": [
                        {
                          "ref": "FsEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 3647,
                          "source": "FsEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 3647,
                      "source": " AsyncIterableIterator<FsEvent>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline9",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3691,
                    "source": " recursive: boolean",
                    "name": "recursive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 3691,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 3697,
                "name": "RunOptions",
                "generics": [],
                "doc": "Options which can be used with {@linkcode Deno.run}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Arguments to pass.\n\n _Note_: the first element needs to be a path to the executable that is\n being run.",
                    "isMethod": false,
                    "_": 3702,
                    "source": "\n    /** Arguments to pass.\n     *\n     * _Note_: the first element needs to be a path to the executable that is\n     * being run. */\n    cmd: readonly string[] | [string | URL, ...string[]];",
                    "name": "cmd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "operator": 146,
                          "type": {
                            "core": "array",
                            "targs": [
                              {
                                "core": "string",
                                "isNullable": false,
                                "_": 3702,
                                "source": " string"
                              }
                            ],
                            "isNullable": false,
                            "_": 3702,
                            "source": " string[]"
                          },
                          "isNullable": false,
                          "_": 3702,
                          "source": " readonly string[]"
                        },
                        {
                          "tuple": [
                            {
                              "union": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 3702,
                                  "source": "string"
                                },
                                {
                                  "ref": "URL",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 3702,
                                  "source": " URL"
                                }
                              ],
                              "isNullable": false,
                              "_": 3702,
                              "source": "string | URL"
                            },
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 3702,
                                  "source": "string"
                                }
                              ],
                              "isNullable": false,
                              "_": 3702,
                              "source": " ...string[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 3702,
                          "source": " [string | URL, ...string[]]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3702,
                      "source": " readonly string[] | [string | URL, ...string[]]"
                    }
                  },
                  {
                    "doc": "The current working directory that should be used when running the\n sub-process.",
                    "isMethod": false,
                    "_": 3705,
                    "source": "\n    /** The current working directory that should be used when running the\n     * sub-process. */\n    cwd?: string;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3705,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Any environment variables to be set when running the sub-process.",
                    "isMethod": false,
                    "_": 3707,
                    "source": "\n    /** Any environment variables to be set when running the sub-process. */\n    env?: Record<string, string>;",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Record",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3707,
                          "source": "string"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3707,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 3707,
                      "source": " Record<string, string>"
                    }
                  },
                  {
                    "doc": "By default subprocess inherits `stdout` of parent process. To change\n this this option can be set to a resource ID (_rid_) of an open file,\n `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n - _number_: the resource ID of an open file/resource. This allows you to\n   write to a file.\n - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   parent.\n - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   sub-process.\n - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   the stream to `/dev/null`.",
                    "isMethod": false,
                    "_": 3721,
                    "source": "\n    /** By default subprocess inherits `stdout` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdout?: \"inherit\" | \"piped\" | \"null\" | number;",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 3721,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 3721,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 3721,
                          "source": " \"null\""
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3721,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 3721,
                      "source": " \"inherit\" | \"piped\" | \"null\" | number"
                    }
                  },
                  {
                    "doc": "By default subprocess inherits `stderr` of parent process. To change\n this this option can be set to a resource ID (_rid_) of an open file,\n `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n - _number_: the resource ID of an open file/resource. This allows you to\n   write to a file.\n - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   parent.\n - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   sub-process.\n - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   the stream to `/dev/null`.",
                    "isMethod": false,
                    "_": 3735,
                    "source": "\n    /** By default subprocess inherits `stderr` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   write to a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stderr?: \"inherit\" | \"piped\" | \"null\" | number;",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 3735,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 3735,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 3735,
                          "source": " \"null\""
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3735,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 3735,
                      "source": " \"inherit\" | \"piped\" | \"null\" | number"
                    }
                  },
                  {
                    "doc": "By default subprocess inherits `stdin` of parent process. To change\n this this option can be set to a resource ID (_rid_) of an open file,\n `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n\n - _number_: the resource ID of an open file/resource. This allows you to\n   read from a file.\n - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   parent.\n - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   sub-process.\n - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   the stream to `/dev/null`.",
                    "isMethod": false,
                    "_": 3749,
                    "source": "\n    /** By default subprocess inherits `stdin` of parent process. To change\n     * this this option can be set to a resource ID (_rid_) of an open file,\n     * `\"inherit\"`, `\"piped\"`, or `\"null\"`:\n     *\n     * - _number_: the resource ID of an open file/resource. This allows you to\n     *   read from a file.\n     * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n     *   parent.\n     * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n     *   sub-process.\n     * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n     *   the stream to `/dev/null`.\n     */\n    stdin?: \"inherit\" | \"piped\" | \"null\" | number;",
                    "name": "stdin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 3749,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 3749,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 3749,
                          "source": " \"null\""
                        },
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 3749,
                          "source": " number"
                        }
                      ],
                      "isNullable": false,
                      "_": 3749,
                      "source": " \"inherit\" | \"piped\" | \"null\" | number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline10",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ProcessStatus",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3761,
                    "source": "\n      success: true;",
                    "name": "success",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "true",
                      "isNullable": false,
                      "_": 3761,
                      "source": " true"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3762,
                    "source": "\n      code: 0;",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "0",
                      "isNullable": false,
                      "_": 3762,
                      "source": " 0"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3763,
                    "source": "\n      signal?: undefined;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "undefined",
                      "isNullable": false,
                      "_": 3763,
                      "source": " undefined"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline11",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ProcessStatus",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3766,
                    "source": "\n      success: false;",
                    "name": "success",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "false",
                      "isNullable": false,
                      "_": 3766,
                      "source": " false"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3767,
                    "source": "\n      code: number;",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3767,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 3768,
                    "source": "\n      signal?: number;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3768,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 3776,
                "name": "Process",
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "RunOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3776,
                      "source": " RunOptions"
                    },
                    "default": {
                      "ref": "RunOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3776,
                      "source": " RunOptions"
                    },
                    "_": 3776,
                    "source": "T extends RunOptions = RunOptions"
                  }
                ],
                "doc": "Represents an instance of a sub process that is returned from\n{@linkcode Deno.run} which can be used to manage the sub-process.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource ID of the sub-process.",
                    "isMethod": false,
                    "_": 3778,
                    "source": "\n    /** The resource ID of the sub-process. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3778,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The operating system's process ID for the sub-process.",
                    "isMethod": false,
                    "_": 3780,
                    "source": "\n    /** The operating system's process ID for the sub-process. */\n    readonly pid: number;",
                    "name": "pid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3780,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A reference to the sub-processes `stdin`, which allows interacting with\nthe sub-process at a low level.",
                    "isMethod": false,
                    "_": 3783,
                    "source": "\n    /** A reference to the sub-processes `stdin`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdin: T[\"stdin\"] extends \"piped\" ? Writer & Closer & {\n        writable: WritableStream<Uint8Array>;\n      }\n      : (Writer & Closer & { writable: WritableStream<Uint8Array> }) | null;",
                    "name": "stdin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": true,
                      "_": 3795,
                      "source": " T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null"
                    }
                  },
                  {
                    "doc": "A reference to the sub-processes `stdout`, which allows interacting with\nthe sub-process at a low level.",
                    "isMethod": false,
                    "_": 3789,
                    "source": "\n    /** A reference to the sub-processes `stdout`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stdout: T[\"stdout\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": true,
                      "_": 3795,
                      "source": " T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null"
                    }
                  },
                  {
                    "doc": "A reference to the sub-processes `stderr`, which allows interacting with\nthe sub-process at a low level.",
                    "isMethod": false,
                    "_": 3795,
                    "source": "\n    /** A reference to the sub-processes `stderr`, which allows interacting with\n     * the sub-process at a low level. */\n    readonly stderr: T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null;",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": true,
                      "_": 3795,
                      "source": " T[\"stderr\"] extends \"piped\" ? Reader & Closer & {\n        readable: ReadableStream<Uint8Array>;\n      }\n      : (Reader & Closer & { readable: ReadableStream<Uint8Array> }) | null"
                    }
                  },
                  {
                    "doc": "Wait for the process to exit and return its exit status.\n\n Calling this function multiple times will return the same status.\n\n The `stdin` reference to the process will be closed before waiting to\n avoid a deadlock.\n\n If `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\n manually before the process can exit.\n\n To run process to completion and collect output from both `stdout` and\n `stderr` use:\n\n ```ts\n const p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\n const [status, stdout, stderr] = await Promise.all([\n   p.status(),\n   p.output(),\n   p.stderrOutput()\n ]);\n p.close();\n ```",
                    "isMethod": true,
                    "_": 3822,
                    "source": "\n    /** Wait for the process to exit and return its exit status.\n     *\n     * Calling this function multiple times will return the same status.\n     *\n     * The `stdin` reference to the process will be closed before waiting to\n     * avoid a deadlock.\n     *\n     * If `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\n     * manually before the process can exit.\n     *\n     * To run process to completion and collect output from both `stdout` and\n     * `stderr` use:\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"echo\", \"hello world\" ], stderr: 'piped', stdout: 'piped' });\n     * const [status, stdout, stderr] = await Promise.all([\n     *   p.status(),\n     *   p.output(),\n     *   p.stderrOutput()\n     * ]);\n     * p.close();\n     * ```\n     */\n    status(): Promise<ProcessStatus>;",
                    "name": "status",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "ProcessStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 3822,
                          "source": "ProcessStatus"
                        }
                      ],
                      "isNullable": false,
                      "_": 3822,
                      "source": " Promise<ProcessStatus>"
                    }
                  },
                  {
                    "doc": "Buffer the stdout until EOF and return it as `Uint8Array`.\n\n You must set `stdout` to `\"piped\"` when creating the process.\n\n This calls `close()` on stdout after its done.",
                    "isMethod": true,
                    "_": 3828,
                    "source": "\n    /** Buffer the stdout until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stdout` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stdout after its done. */\n    output(): Promise<Uint8Array>;",
                    "name": "output",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3828,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 3828,
                      "source": " Promise<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Buffer the stderr until EOF and return it as `Uint8Array`.\n\n You must set `stderr` to `\"piped\"` when creating the process.\n\n This calls `close()` on stderr after its done.",
                    "isMethod": true,
                    "_": 3834,
                    "source": "\n    /** Buffer the stderr until EOF and return it as `Uint8Array`.\n     *\n     * You must set `stderr` to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stderr after its done. */\n    stderrOutput(): Promise<Uint8Array>;",
                    "name": "stderrOutput",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3834,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 3834,
                      "source": " Promise<Uint8Array>"
                    }
                  },
                  {
                    "doc": "Clean up resources associated with the sub-process instance.",
                    "isMethod": true,
                    "_": 3836,
                    "source": "\n    /** Clean up resources associated with the sub-process instance. */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3836,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Send a signal to process.\n Default signal is `\"SIGTERM\"`.\n\n ```ts\n const p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\n p.kill(\"SIGTERM\");\n p.close();\n ```",
                    "isMethod": true,
                    "_": 3846,
                    "source": "\n    /** Send a signal to process.\n     * Default signal is `\"SIGTERM\"`.\n     *\n     * ```ts\n     * const p = Deno.run({ cmd: [ \"sleep\", \"20\" ]});\n     * p.kill(\"SIGTERM\");\n     * p.close();\n     * ```\n     */\n    kill(signo?: Signal): void;",
                    "name": "kill",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "signo",
                        "type": {
                          "ref": "Signal",
                          "targs": [],
                          "isNullable": false,
                          "_": 3846,
                          "source": " Signal"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 3846,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4038,
                "name": "Command",
                "generics": [],
                "doc": "Create a child process.\n\nIf any stdio options are not set to `\"piped\"`, accessing the corresponding\nfield on the `Command` or its `CommandOutput` will throw a `TypeError`.\n\nIf `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\nneeds to be closed manually.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 4039,
                    "source": "\n    constructor(command: string | URL, options?: CommandOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "command",
                        "type": {
                          "union": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 4039,
                              "source": " string"
                            },
                            {
                              "ref": "URL",
                              "targs": [],
                              "isNullable": false,
                              "_": 4039,
                              "source": " URL"
                            }
                          ],
                          "isNullable": false,
                          "_": 4039,
                          "source": " string | URL"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "CommandOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 4039,
                          "source": " CommandOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Executes the {@linkcode Deno.Command}, waiting for it to finish and\n collecting all of its output.\n If `spawn()` was called, calling this function will collect the remaining\n output.\n\n Will throw an error if `stdin: \"piped\"` is set.\n\n If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.",
                    "isMethod": true,
                    "_": 4051,
                    "source": "\n    /**\n     * Executes the {@linkcode Deno.Command}, waiting for it to finish and\n     * collecting all of its output.\n     * If `spawn()` was called, calling this function will collect the remaining\n     * output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    output(): Promise<CommandOutput>;",
                    "name": "output",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "CommandOutput",
                          "targs": [],
                          "isNullable": false,
                          "_": 4051,
                          "source": "CommandOutput"
                        }
                      ],
                      "isNullable": false,
                      "_": 4051,
                      "source": " Promise<CommandOutput>"
                    }
                  },
                  {
                    "doc": "Synchronously executes the {@linkcode Deno.Command}, waiting for it to\n finish and collecting all of its output.\n\n Will throw an error if `stdin: \"piped\"` is set.\n\n If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.",
                    "isMethod": true,
                    "_": 4061,
                    "source": "\n    /**\n     * Synchronously executes the {@linkcode Deno.Command}, waiting for it to\n     * finish and collecting all of its output.\n     *\n     * Will throw an error if `stdin: \"piped\"` is set.\n     *\n     * If options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\n     * corresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`.\n     */\n    outputSync(): CommandOutput;",
                    "name": "outputSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "CommandOutput",
                      "targs": [],
                      "isNullable": false,
                      "_": 4061,
                      "source": " CommandOutput"
                    }
                  },
                  {
                    "doc": "Spawns a streamable subprocess, allowing to use the other methods.",
                    "isMethod": true,
                    "_": 4065,
                    "source": "\n    /**\n     * Spawns a streamable subprocess, allowing to use the other methods.\n     */\n    spawn(): ChildProcess;",
                    "name": "spawn",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "ChildProcess",
                      "targs": [],
                      "isNullable": false,
                      "_": 4065,
                      "source": " ChildProcess"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4074,
                "name": "ChildProcess",
                "generics": [],
                "doc": "The interface for handling a child process returned from\n{@linkcode Deno.Command.spawn}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4075,
                    "source": "\n    get stdin(): WritableStream<Uint8Array>;",
                    "name": "stdin",
                    "generics": [],
                    "isGetter": true,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "WritableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 4075,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 4075,
                      "source": " WritableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4076,
                    "source": "\n    get stdout(): ReadableStream<Uint8Array>;",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": true,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "ReadableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 4076,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 4076,
                      "source": " ReadableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4077,
                    "source": "\n    get stderr(): ReadableStream<Uint8Array>;",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": true,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "ReadableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 4077,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 4077,
                      "source": " ReadableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4078,
                    "source": "\n    readonly pid: number;",
                    "name": "pid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4078,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Get the status of the child.",
                    "isMethod": false,
                    "_": 4080,
                    "source": "\n    /** Get the status of the child. */\n    readonly status: Promise<CommandStatus>;",
                    "name": "status",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "CommandStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 4080,
                          "source": "CommandStatus"
                        }
                      ],
                      "isNullable": false,
                      "_": 4080,
                      "source": " Promise<CommandStatus>"
                    }
                  },
                  {
                    "doc": "Waits for the child to exit completely, returning all its output and\n status.",
                    "isMethod": true,
                    "_": 4084,
                    "source": "\n\n    /** Waits for the child to exit completely, returning all its output and\n     * status. */\n    output(): Promise<CommandOutput>;",
                    "name": "output",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "CommandOutput",
                          "targs": [],
                          "isNullable": false,
                          "_": 4084,
                          "source": "CommandOutput"
                        }
                      ],
                      "isNullable": false,
                      "_": 4084,
                      "source": " Promise<CommandOutput>"
                    }
                  },
                  {
                    "doc": "Kills the process with given {@linkcode Deno.Signal}.\n\n @param [signo=\"SIGTERM\"]",
                    "isMethod": true,
                    "_": 4089,
                    "source": "\n    /** Kills the process with given {@linkcode Deno.Signal}.\n     *\n     * @param [signo=\"SIGTERM\"]\n     */\n    kill(signo?: Signal): void;",
                    "name": "kill",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "signo",
                        "type": {
                          "ref": "Signal",
                          "targs": [],
                          "isNullable": false,
                          "_": 4089,
                          "source": " Signal"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4089,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Ensure that the status of the child process prevents the Deno process\n from exiting.",
                    "isMethod": true,
                    "_": 4093,
                    "source": "\n\n    /** Ensure that the status of the child process prevents the Deno process\n     * from exiting. */\n    ref(): void;",
                    "name": "ref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4093,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Ensure that the status of the child process does not block the Deno\n process from exiting.",
                    "isMethod": true,
                    "_": 4096,
                    "source": "\n    /** Ensure that the status of the child process does not block the Deno\n     * process from exiting. */\n    unref(): void;",
                    "name": "unref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4096,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4104,
                "name": "CommandOptions",
                "generics": [],
                "doc": "Options which can be set when calling {@linkcode Deno.Command}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Arguments to pass to the process.",
                    "isMethod": false,
                    "_": 4106,
                    "source": "\n    /** Arguments to pass to the process. */\n    args?: string[];",
                    "name": "args",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4106,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 4106,
                      "source": " string[]"
                    }
                  },
                  {
                    "doc": "The working directory of the process.\n\n If not specified, the `cwd` of the parent process is used.",
                    "isMethod": false,
                    "_": 4112,
                    "source": "\n    /**\n     * The working directory of the process.\n     *\n     * If not specified, the `cwd` of the parent process is used.\n     */\n    cwd?: string | URL;",
                    "name": "cwd",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4112,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4112,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4112,
                      "source": " string | URL"
                    }
                  },
                  {
                    "doc": "Clear environmental variables from parent process.\n\n Doesn't guarantee that only `env` variables are present, as the OS may\n set environmental variables for processes.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4121,
                    "source": "\n    /**\n     * Clear environmental variables from parent process.\n     *\n     * Doesn't guarantee that only `env` variables are present, as the OS may\n     * set environmental variables for processes.\n     *\n     * @default {false}\n     */\n    clearEnv?: boolean;",
                    "name": "clearEnv",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4121,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Environmental variables to pass to the subprocess.",
                    "isMethod": false,
                    "_": 4123,
                    "source": "\n    /** Environmental variables to pass to the subprocess. */\n    env?: Record<string, string>;",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Record",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4123,
                          "source": "string"
                        },
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4123,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 4123,
                      "source": " Record<string, string>"
                    }
                  },
                  {
                    "doc": "Sets the child processâs user ID. This translates to a setuid call in the\n child process. Failure in the set uid call will cause the spawn to fail.",
                    "isMethod": false,
                    "_": 4128,
                    "source": "\n    /**\n     * Sets the child processâs user ID. This translates to a setuid call in the\n     * child process. Failure in the set uid call will cause the spawn to fail.\n     */\n    uid?: number;",
                    "name": "uid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4128,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Similar to `uid`, but sets the group ID of the child process.",
                    "isMethod": false,
                    "_": 4130,
                    "source": "\n    /** Similar to `uid`, but sets the group ID of the child process. */\n    gid?: number;",
                    "name": "gid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4130,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "An {@linkcode AbortSignal} that allows closing the process using the\n corresponding {@linkcode AbortController} by sending the process a\n SIGTERM signal.\n\n Not supported in {@linkcode Deno.Command.outputSync}.",
                    "isMethod": false,
                    "_": 4138,
                    "source": "\n    /**\n     * An {@linkcode AbortSignal} that allows closing the process using the\n     * corresponding {@linkcode AbortController} by sending the process a\n     * SIGTERM signal.\n     *\n     * Not supported in {@linkcode Deno.Command.outputSync}.\n     */\n    signal?: AbortSignal;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AbortSignal",
                      "targs": [],
                      "isNullable": false,
                      "_": 4138,
                      "source": " AbortSignal"
                    }
                  },
                  {
                    "doc": "How `stdin` of the spawned process should be handled.\n\n Defaults to `\"inherit\"` for `output` & `outputSync`,\n and `\"inherit\"` for `spawn`.",
                    "isMethod": false,
                    "_": 4144,
                    "source": "\n\n    /** How `stdin` of the spawned process should be handled.\n     *\n     * Defaults to `\"inherit\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stdin?: \"piped\" | \"inherit\" | \"null\";",
                    "name": "stdin",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 4144,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 4144,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 4144,
                          "source": " \"null\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4144,
                      "source": " \"piped\" | \"inherit\" | \"null\""
                    }
                  },
                  {
                    "doc": "How `stdout` of the spawned process should be handled.\n\n Defaults to `\"piped\"` for `output` & `outputSync`,\n and `\"inherit\"` for `spawn`.",
                    "isMethod": false,
                    "_": 4149,
                    "source": "\n    /** How `stdout` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stdout?: \"piped\" | \"inherit\" | \"null\";",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 4149,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 4149,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 4149,
                          "source": " \"null\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4149,
                      "source": " \"piped\" | \"inherit\" | \"null\""
                    }
                  },
                  {
                    "doc": "How `stderr` of the spawned process should be handled.\n\n Defaults to `\"piped\"` for `output` & `outputSync`,\n and `\"inherit\"` for `spawn`.",
                    "isMethod": false,
                    "_": 4154,
                    "source": "\n    /** How `stderr` of the spawned process should be handled.\n     *\n     * Defaults to `\"piped\"` for `output` & `outputSync`,\n     * and `\"inherit\"` for `spawn`. */\n    stderr?: \"piped\" | \"inherit\" | \"null\";",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"piped\"",
                          "isNullable": false,
                          "_": 4154,
                          "source": " \"piped\""
                        },
                        {
                          "core": "\"inherit\"",
                          "isNullable": false,
                          "_": 4154,
                          "source": " \"inherit\""
                        },
                        {
                          "core": "\"null\"",
                          "isNullable": false,
                          "_": 4154,
                          "source": " \"null\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4154,
                      "source": " \"piped\" | \"inherit\" | \"null\""
                    }
                  },
                  {
                    "doc": "Skips quoting and escaping of the arguments on windows. This option\n is ignored on non-windows platforms.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4160,
                    "source": "\n\n    /** Skips quoting and escaping of the arguments on windows. This option\n     * is ignored on non-windows platforms.\n     *\n     * @default {false} */\n    windowsRawArguments?: boolean;",
                    "name": "windowsRawArguments",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4160,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4166,
                "name": "CommandStatus",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If the child process exits with a 0 status code, `success` will be set\n to `true`, otherwise `false`.",
                    "isMethod": false,
                    "_": 4169,
                    "source": "\n    /** If the child process exits with a 0 status code, `success` will be set\n     * to `true`, otherwise `false`. */\n    success: boolean;",
                    "name": "success",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4169,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The exit code of the child process.",
                    "isMethod": false,
                    "_": 4171,
                    "source": "\n    /** The exit code of the child process. */\n    code: number;",
                    "name": "code",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4171,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The signal associated with the child process.",
                    "isMethod": false,
                    "_": 4173,
                    "source": "\n    /** The signal associated with the child process. */\n    signal: Signal | null;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "Signal",
                          "targs": [],
                          "isNullable": false,
                          "_": 4173,
                          "source": " Signal"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 4173,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 4173,
                      "source": " Signal | null"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4183,
                "name": "CommandOutput",
                "generics": [],
                "doc": "The interface returned from calling {@linkcode Deno.Command.output} or\n{@linkcode Deno.Command.outputSync} which represents the result of spawning the\nchild process.",
                "heritage": [
                  [
                    {
                      "ref": "CommandStatus",
                      "targs": [],
                      "isNullable": false,
                      "_": 4183,
                      "source": " CommandStatus"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The buffered output from the child process' `stdout`.",
                    "isMethod": false,
                    "_": 4185,
                    "source": "\n    /** The buffered output from the child process' `stdout`. */\n    readonly stdout: Uint8Array;",
                    "name": "stdout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 4185,
                      "source": " Uint8Array"
                    }
                  },
                  {
                    "doc": "The buffered output from the child process' `stderr`.",
                    "isMethod": false,
                    "_": 4187,
                    "source": "\n    /** The buffered output from the child process' `stderr`. */\n    readonly stderr: Uint8Array;",
                    "name": "stderr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 4187,
                      "source": " Uint8Array"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4193,
                "name": "InspectOptions",
                "generics": [],
                "doc": "Option which can be specified when performing {@linkcode Deno.inspect}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Stylize output with ANSI colors.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4197,
                    "source": "\n    /** Stylize output with ANSI colors.\n     *\n     * @default {false} */\n    colors?: boolean;",
                    "name": "colors",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4197,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Try to fit more than one entry of a collection on the same line.\n\n @default {true}",
                    "isMethod": false,
                    "_": 4201,
                    "source": "\n    /** Try to fit more than one entry of a collection on the same line.\n     *\n     * @default {true} */\n    compact?: boolean;",
                    "name": "compact",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4201,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Traversal depth for nested objects.\n\n @default {4}",
                    "isMethod": false,
                    "_": 4205,
                    "source": "\n    /** Traversal depth for nested objects.\n     *\n     * @default {4} */\n    depth?: number;",
                    "name": "depth",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4205,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The maximum number of iterable entries to print.\n\n @default {100}",
                    "isMethod": false,
                    "_": 4209,
                    "source": "\n    /** The maximum number of iterable entries to print.\n     *\n     * @default {100} */\n    iterableLimit?: number;",
                    "name": "iterableLimit",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4209,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Show a Proxy's target and handler.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4213,
                    "source": "\n    /** Show a Proxy's target and handler.\n     *\n     * @default {false} */\n    showProxy?: boolean;",
                    "name": "showProxy",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4213,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Sort Object, Set and Map entries by key.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4217,
                    "source": "\n    /** Sort Object, Set and Map entries by key.\n     *\n     * @default {false} */\n    sorted?: boolean;",
                    "name": "sorted",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4217,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Add a trailing comma for multiline collections.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4221,
                    "source": "\n    /** Add a trailing comma for multiline collections.\n     *\n     * @default {false} */\n    trailingComma?: boolean;",
                    "name": "trailingComma",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4221,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Evaluate the result of calling getters.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4225,
                    "source": "\n    /** Evaluate the result of calling getters.\n     *\n     * @default {false} */\n    getters?: boolean;",
                    "name": "getters",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4225,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "Show an object's non-enumerable properties.\n\n @default {false}",
                    "isMethod": false,
                    "_": 4229,
                    "source": "\n    /** Show an object's non-enumerable properties.\n     *\n     * @default {false} */\n    showHidden?: boolean;",
                    "name": "showHidden",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 4229,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "The maximum length of a string before it is truncated with an\n ellipsis.",
                    "isMethod": false,
                    "_": 4232,
                    "source": "\n    /** The maximum length of a string before it is truncated with an\n     * ellipsis. */\n    strAbbreviateSize?: number;",
                    "name": "strAbbreviateSize",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4232,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4307,
                "name": "RunPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-run` permission, which controls\naccess to what sub-processes can be executed by Deno. The option `command`\nallows scoping the permission to a specific executable.\n\n**Warning, in practice, `allow-run` is effectively the same as `allow-all`\nin the sense that malicious code could execute any arbitrary code on the\nhost.**",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4308,
                    "source": "\n    name: \"run\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"run\"",
                      "isNullable": false,
                      "_": 4308,
                      "source": " \"run\""
                    }
                  },
                  {
                    "doc": "The `allow-run` permission can be scoped to a specific executable,\n which would be relative to the start-up CWD of the Deno CLI.",
                    "isMethod": false,
                    "_": 4311,
                    "source": "\n    /** The `allow-run` permission can be scoped to a specific executable,\n     * which would be relative to the start-up CWD of the Deno CLI. */\n    command?: string | URL;",
                    "name": "command",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4311,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4311,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4311,
                      "source": " string | URL"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4323,
                "name": "ReadPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-read` permissions, which controls\naccess to reading resources from the local host. The option `path` allows\nscoping the permission to a specific path (and if the path is a directory\nany sub paths).\n\nPermission granted under `allow-read` only allows runtime code to attempt\nto read, the underlying operating system may apply additional permissions.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4324,
                    "source": "\n    name: \"read\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"read\"",
                      "isNullable": false,
                      "_": 4324,
                      "source": " \"read\""
                    }
                  },
                  {
                    "doc": "The `allow-read` permission can be scoped to a specific path (and if\n the path is a directory, any sub paths).",
                    "isMethod": false,
                    "_": 4327,
                    "source": "\n    /** The `allow-read` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4327,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4327,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4327,
                      "source": " string | URL"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4339,
                "name": "WritePermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-write` permissions, which\ncontrols access to writing to resources from the local host. The option\n`path` allow scoping the permission to a specific path (and if the path is\na directory any sub paths).\n\nPermission granted under `allow-write` only allows runtime code to attempt\nto write, the underlying operating system may apply additional permissions.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4340,
                    "source": "\n    name: \"write\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"write\"",
                      "isNullable": false,
                      "_": 4340,
                      "source": " \"write\""
                    }
                  },
                  {
                    "doc": "The `allow-write` permission can be scoped to a specific path (and if\n the path is a directory, any sub paths).",
                    "isMethod": false,
                    "_": 4343,
                    "source": "\n    /** The `allow-write` permission can be scoped to a specific path (and if\n     * the path is a directory, any sub paths). */\n    path?: string | URL;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4343,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4343,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4343,
                      "source": " string | URL"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4352,
                "name": "NetPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-net` permissions, which controls\naccess to opening network ports and connecting to remote hosts via the\nnetwork. The option `host` allows scoping the permission for outbound\nconnection to a specific host and port.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4353,
                    "source": "\n    name: \"net\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"net\"",
                      "isNullable": false,
                      "_": 4353,
                      "source": " \"net\""
                    }
                  },
                  {
                    "doc": "Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n\n      \"github.com\"\n      \"deno.land:8080\"",
                    "isMethod": false,
                    "_": 4359,
                    "source": "\n    /** Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n     *\n     *      \"github.com\"\n     *      \"deno.land:8080\"\n     */\n    host?: string;",
                    "name": "host",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4359,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4369,
                "name": "EnvPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-env` permissions, which controls\naccess to being able to read and write to the process environment variables\nas well as access other information about the environment. The option\n`variable` allows scoping the permission to a specific environment\nvariable.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4370,
                    "source": "\n    name: \"env\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"env\"",
                      "isNullable": false,
                      "_": 4370,
                      "source": " \"env\""
                    }
                  },
                  {
                    "doc": "Optional environment variable name (e.g. `PATH`).",
                    "isMethod": false,
                    "_": 4372,
                    "source": "\n    /** Optional environment variable name (e.g. `PATH`). */\n    variable?: string;",
                    "name": "variable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4372,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4381,
                "name": "SysPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-sys` permissions, which controls\naccess to sensitive host system information, which malicious code might\nattempt to exploit. The option `kind` allows scoping the permission to a\nspecific piece of information.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4382,
                    "source": "\n    name: \"sys\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"sys\"",
                      "isNullable": false,
                      "_": 4382,
                      "source": " \"sys\""
                    }
                  },
                  {
                    "doc": "The specific information to scope the permission to.",
                    "isMethod": false,
                    "_": 4384,
                    "source": "\n    /** The specific information to scope the permission to. */\n    kind?:\n      | \"loadavg\"\n      | \"hostname\"\n      | \"systemMemoryInfo\"\n      | \"networkInterfaces\"\n      | \"osRelease\"\n      | \"osUptime\"\n      | \"uid\"\n      | \"gid\";",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"loadavg\"",
                          "isNullable": false,
                          "_": 4385,
                          "source": " \"loadavg\""
                        },
                        {
                          "core": "\"hostname\"",
                          "isNullable": false,
                          "_": 4386,
                          "source": " \"hostname\""
                        },
                        {
                          "core": "\"systemMemoryInfo\"",
                          "isNullable": false,
                          "_": 4387,
                          "source": " \"systemMemoryInfo\""
                        },
                        {
                          "core": "\"networkInterfaces\"",
                          "isNullable": false,
                          "_": 4388,
                          "source": " \"networkInterfaces\""
                        },
                        {
                          "core": "\"osRelease\"",
                          "isNullable": false,
                          "_": 4389,
                          "source": " \"osRelease\""
                        },
                        {
                          "core": "\"osUptime\"",
                          "isNullable": false,
                          "_": 4390,
                          "source": " \"osUptime\""
                        },
                        {
                          "core": "\"uid\"",
                          "isNullable": false,
                          "_": 4391,
                          "source": " \"uid\""
                        },
                        {
                          "core": "\"gid\"",
                          "isNullable": false,
                          "_": 4392,
                          "source": " \"gid\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4385,
                      "source": "\n      | \"loadavg\"\n      | \"hostname\"\n      | \"systemMemoryInfo\"\n      | \"networkInterfaces\"\n      | \"osRelease\"\n      | \"osUptime\"\n      | \"uid\"\n      | \"gid\""
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4402,
                "name": "FfiPermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-ffi` permissions, which controls\naccess to loading _foreign_ code and interfacing with it via the\n[Foreign Function Interface API](https://deno.land/manual/runtime/ffi_api)\navailable in Deno.  The option `path` allows scoping the permission to a\nspecific path on the host.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4403,
                    "source": "\n    name: \"ffi\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"ffi\"",
                      "isNullable": false,
                      "_": 4403,
                      "source": " \"ffi\""
                    }
                  },
                  {
                    "doc": "Optional path on the local host to scope the permission to.",
                    "isMethod": false,
                    "_": 4405,
                    "source": "\n    /** Optional path on the local host to scope the permission to. */\n    path?: string | URL;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4405,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4405,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4405,
                      "source": " string | URL"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4415,
                "name": "HrtimePermissionDescriptor",
                "generics": [],
                "doc": "The permission descriptor for the `allow-hrtime` permission, which\ncontrols if the runtime code has access to high resolution time. High\nresolution time is consider sensitive information, because it can be used\nby malicious code to gain information about the host that it might\notherwise have access to.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4416,
                    "source": "\n    name: \"hrtime\";",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"hrtime\"",
                      "isNullable": false,
                      "_": 4416,
                      "source": " \"hrtime\""
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4441,
                "name": "PermissionStatusEventMap",
                "generics": [],
                "doc": "The interface which defines what event types are supported by\n{@linkcode PermissionStatus} instances.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4442,
                    "source": "\n    \"change\": Event;",
                    "name": "\"change\"",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Event",
                      "targs": [],
                      "isNullable": false,
                      "_": 4442,
                      "source": " Event"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 4449,
                "name": "PermissionStatus",
                "generics": [],
                "doc": "An {@linkcode EventTarget} returned from the {@linkcode Deno.permissions}\nAPI which can provide updates to any state changes of the permission.",
                "heritage": [
                  [
                    {
                      "ref": "EventTarget",
                      "targs": [],
                      "isNullable": false,
                      "_": 4449,
                      "source": " EventTarget"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4451,
                    "source": "\n    // deno-lint-ignore no-explicit-any\n    onchange: ((this: PermissionStatus, ev: Event) => any) | null;",
                    "name": "onchange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 4451,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "this",
                              "type": {
                                "ref": "PermissionStatus",
                                "targs": [],
                                "isNullable": false,
                                "_": 4451,
                                "source": " PermissionStatus"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "ev",
                              "type": {
                                "ref": "Event",
                                "targs": [],
                                "isNullable": false,
                                "_": 4451,
                                "source": " Event"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 4451,
                          "source": " ((this: PermissionStatus, ev: Event) => any)"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 4451,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 4451,
                      "source": " ((this: PermissionStatus, ev: Event) => any) | null"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 4452,
                    "source": "\n    readonly state: PermissionState;",
                    "name": "state",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "PermissionState",
                      "targs": [],
                      "isNullable": false,
                      "_": 4452,
                      "source": " PermissionState"
                    }
                  },
                  {
                    "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
                    "isMethod": true,
                    "_": 4453,
                    "source": "\n    addEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | AddEventListenerOptions,\n    ): void;",
                    "name": "addEventListener",
                    "generics": [
                      {
                        "name": "K",
                        "constraint": {
                          "operator": 141,
                          "type": {
                            "ref": "PermissionStatusEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 4453,
                            "source": " PermissionStatusEventMap"
                          },
                          "isNullable": false,
                          "_": 4453,
                          "source": " keyof PermissionStatusEventMap"
                        },
                        "_": 4453,
                        "source": "K extends keyof PermissionStatusEventMap"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "type",
                        "type": {
                          "ref": "K",
                          "targs": [],
                          "isNullable": false,
                          "_": 4454,
                          "source": " K"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "listener",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 4458,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "this",
                              "type": {
                                "ref": "PermissionStatus",
                                "targs": [],
                                "isNullable": false,
                                "_": 4456,
                                "source": " PermissionStatus"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "ev",
                              "type": {
                                "index": {
                                  "ref": "K",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4457,
                                  "source": "K"
                                },
                                "obj": {
                                  "ref": "PermissionStatusEventMap",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4457,
                                  "source": " PermissionStatusEventMap"
                                },
                                "isNullable": false,
                                "_": 4457,
                                "source": " PermissionStatusEventMap[K]"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 4455,
                          "source": " (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "union": [
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 4459,
                              "source": " boolean"
                            },
                            {
                              "ref": "AddEventListenerOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 4459,
                              "source": " AddEventListenerOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 4459,
                          "source": " boolean | AddEventListenerOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4460,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Appends an event listener for events whose type attribute value is type.\nThe callback argument sets the callback that will be invoked when the event\nis dispatched.\n\nThe options argument sets listener-specific options. For compatibility this\ncan be a boolean, in which case the method behaves exactly as if the value\nwas specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked\nwhen the event's eventPhase attribute value is BUBBLING_PHASE. When false\n(or not present), callback will not be invoked when event's eventPhase\nattribute value is CAPTURING_PHASE. Either way, callback will be invoked if\nevent's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not\ncancel the event by invoking preventDefault(). This is used to enable\nperformance optimizations described in Â§ 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be\ninvoked once after which the event listener will be removed.\n\nThe event listener is appended to target's event listener list and is not\nappended if it has the same type, callback, and capture.",
                    "isMethod": true,
                    "_": 4461,
                    "source": "\n    addEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): void;",
                    "name": "addEventListener",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "type",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 4462,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "listener",
                        "type": {
                          "ref": "EventListenerOrEventListenerObject",
                          "targs": [],
                          "isNullable": false,
                          "_": 4463,
                          "source": " EventListenerOrEventListenerObject"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "union": [
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 4464,
                              "source": " boolean"
                            },
                            {
                              "ref": "AddEventListenerOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 4464,
                              "source": " AddEventListenerOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 4464,
                          "source": " boolean | AddEventListenerOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4465,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
                    "isMethod": true,
                    "_": 4466,
                    "source": "\n    removeEventListener<K extends keyof PermissionStatusEventMap>(\n      type: K,\n      listener: (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any,\n      options?: boolean | EventListenerOptions,\n    ): void;",
                    "name": "removeEventListener",
                    "generics": [
                      {
                        "name": "K",
                        "constraint": {
                          "operator": 141,
                          "type": {
                            "ref": "PermissionStatusEventMap",
                            "targs": [],
                            "isNullable": false,
                            "_": 4466,
                            "source": " PermissionStatusEventMap"
                          },
                          "isNullable": false,
                          "_": 4466,
                          "source": " keyof PermissionStatusEventMap"
                        },
                        "_": 4466,
                        "source": "K extends keyof PermissionStatusEventMap"
                      }
                    ],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "type",
                        "type": {
                          "ref": "K",
                          "targs": [],
                          "isNullable": false,
                          "_": 4467,
                          "source": " K"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "listener",
                        "type": {
                          "ctor": false,
                          "generics": [],
                          "returns": {
                            "core": "any",
                            "isNullable": false,
                            "_": 4471,
                            "source": " any"
                          },
                          "params": [
                            {
                              "name": "this",
                              "type": {
                                "ref": "PermissionStatus",
                                "targs": [],
                                "isNullable": false,
                                "_": 4469,
                                "source": " PermissionStatus"
                              },
                              "varargs": false,
                              "isNullable": false
                            },
                            {
                              "name": "ev",
                              "type": {
                                "index": {
                                  "ref": "K",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4470,
                                  "source": "K"
                                },
                                "obj": {
                                  "ref": "PermissionStatusEventMap",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 4470,
                                  "source": " PermissionStatusEventMap"
                                },
                                "isNullable": false,
                                "_": 4470,
                                "source": " PermissionStatusEventMap[K]"
                              },
                              "varargs": false,
                              "isNullable": false
                            }
                          ],
                          "isNullable": false,
                          "_": 4468,
                          "source": " (\n        this: PermissionStatus,\n        ev: PermissionStatusEventMap[K],\n      ) => any"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "union": [
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 4472,
                              "source": " boolean"
                            },
                            {
                              "ref": "EventListenerOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 4472,
                              "source": " EventListenerOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 4472,
                          "source": " boolean | EventListenerOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4473,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Removes the event listener in target's event listener list with the same\ntype, callback, and options.",
                    "isMethod": true,
                    "_": 4474,
                    "source": "\n    removeEventListener(\n      type: string,\n      listener: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ): void;",
                    "name": "removeEventListener",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "type",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 4475,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "listener",
                        "type": {
                          "ref": "EventListenerOrEventListenerObject",
                          "targs": [],
                          "isNullable": false,
                          "_": 4476,
                          "source": " EventListenerOrEventListenerObject"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "options",
                        "type": {
                          "union": [
                            {
                              "core": "boolean",
                              "isNullable": false,
                              "_": 4477,
                              "source": " boolean"
                            },
                            {
                              "ref": "EventListenerOptions",
                              "targs": [],
                              "isNullable": false,
                              "_": 4477,
                              "source": " EventListenerOptions"
                            }
                          ],
                          "isNullable": false,
                          "_": 4477,
                          "source": " boolean | EventListenerOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 4478,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 4502,
                "name": "Permissions",
                "generics": [],
                "doc": "Deno's permission management API.\n\nThe class which provides the interface for the {@linkcode Deno.permissions}\nglobal instance and is based on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Resolves to the current status of a permission.\n\n Note, if the permission is already granted, `request()` will not prompt\n the user again, therefore `query()` is only necessary if you are going\n to react differently existing permissions without wanting to modify them\n or prompt the user to modify them.\n\n ```ts\n const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n console.log(status.state);\n ```",
                    "isMethod": true,
                    "_": 4515,
                    "source": "\n    /** Resolves to the current status of a permission.\n     *\n     * Note, if the permission is already granted, `request()` will not prompt\n     * the user again, therefore `query()` is only necessary if you are going\n     * to react differently existing permissions without wanting to modify them\n     * or prompt the user to modify them.\n     *\n     * ```ts\n     * const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n     * console.log(status.state);\n     * ```\n     */\n    query(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                    "name": "query",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4515,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "PermissionStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 4515,
                          "source": "PermissionStatus"
                        }
                      ],
                      "isNullable": false,
                      "_": 4515,
                      "source": " Promise<PermissionStatus>"
                    }
                  },
                  {
                    "doc": "Returns the current status of a permission.\n\n Note, if the permission is already granted, `request()` will not prompt\n the user again, therefore `querySync()` is only necessary if you are going\n to react differently existing permissions without wanting to modify them\n or prompt the user to modify them.\n\n ```ts\n const status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\n console.log(status.state);\n ```",
                    "isMethod": true,
                    "_": 4529,
                    "source": "\n\n    /** Returns the current status of a permission.\n     *\n     * Note, if the permission is already granted, `request()` will not prompt\n     * the user again, therefore `querySync()` is only necessary if you are going\n     * to react differently existing permissions without wanting to modify them\n     * or prompt the user to modify them.\n     *\n     * ```ts\n     * const status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\n     * console.log(status.state);\n     * ```\n     */\n    querySync(desc: PermissionDescriptor): PermissionStatus;",
                    "name": "querySync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4529,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "PermissionStatus",
                      "targs": [],
                      "isNullable": false,
                      "_": 4529,
                      "source": " PermissionStatus"
                    }
                  },
                  {
                    "doc": "Revokes a permission, and resolves to the state of the permission.\n\n ```ts\n import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\n const status = await Deno.permissions.revoke({ name: \"run\" });\n assert(status.state !== \"granted\")\n ```",
                    "isMethod": true,
                    "_": 4540,
                    "source": "\n\n    /** Revokes a permission, and resolves to the state of the permission.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const status = await Deno.permissions.revoke({ name: \"run\" });\n     * assert(status.state !== \"granted\")\n     * ```\n     */\n    revoke(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                    "name": "revoke",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4540,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "PermissionStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 4540,
                          "source": "PermissionStatus"
                        }
                      ],
                      "isNullable": false,
                      "_": 4540,
                      "source": " Promise<PermissionStatus>"
                    }
                  },
                  {
                    "doc": "Revokes a permission, and returns the state of the permission.\n\n ```ts\n import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\n const status = Deno.permissions.revokeSync({ name: \"run\" });\n assert(status.state !== \"granted\")\n ```",
                    "isMethod": true,
                    "_": 4551,
                    "source": "\n\n    /** Revokes a permission, and returns the state of the permission.\n     *\n     * ```ts\n     * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n     *\n     * const status = Deno.permissions.revokeSync({ name: \"run\" });\n     * assert(status.state !== \"granted\")\n     * ```\n     */\n    revokeSync(desc: PermissionDescriptor): PermissionStatus;",
                    "name": "revokeSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4551,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "PermissionStatus",
                      "targs": [],
                      "isNullable": false,
                      "_": 4551,
                      "source": " PermissionStatus"
                    }
                  },
                  {
                    "doc": "Requests the permission, and resolves to the state of the permission.\n\n If the permission is already granted, the user will not be prompted to\n grant the permission again.\n\n ```ts\n const status = await Deno.permissions.request({ name: \"env\" });\n if (status.state === \"granted\") {\n   console.log(\"'env' permission is granted.\");\n } else {\n   console.log(\"'env' permission is denied.\");\n }\n ```",
                    "isMethod": true,
                    "_": 4567,
                    "source": "\n\n    /** Requests the permission, and resolves to the state of the permission.\n     *\n     * If the permission is already granted, the user will not be prompted to\n     * grant the permission again.\n     *\n     * ```ts\n     * const status = await Deno.permissions.request({ name: \"env\" });\n     * if (status.state === \"granted\") {\n     *   console.log(\"'env' permission is granted.\");\n     * } else {\n     *   console.log(\"'env' permission is denied.\");\n     * }\n     * ```\n     */\n    request(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                    "name": "request",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4567,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "PermissionStatus",
                          "targs": [],
                          "isNullable": false,
                          "_": 4567,
                          "source": "PermissionStatus"
                        }
                      ],
                      "isNullable": false,
                      "_": 4567,
                      "source": " Promise<PermissionStatus>"
                    }
                  },
                  {
                    "doc": "Requests the permission, and returns the state of the permission.\n\n If the permission is already granted, the user will not be prompted to\n grant the permission again.\n\n ```ts\n const status = Deno.permissions.requestSync({ name: \"env\" });\n if (status.state === \"granted\") {\n   console.log(\"'env' permission is granted.\");\n } else {\n   console.log(\"'env' permission is denied.\");\n }\n ```",
                    "isMethod": true,
                    "_": 4583,
                    "source": "\n\n    /** Requests the permission, and returns the state of the permission.\n     *\n     * If the permission is already granted, the user will not be prompted to\n     * grant the permission again.\n     *\n     * ```ts\n     * const status = Deno.permissions.requestSync({ name: \"env\" });\n     * if (status.state === \"granted\") {\n     *   console.log(\"'env' permission is granted.\");\n     * } else {\n     *   console.log(\"'env' permission is denied.\");\n     * }\n     * ```\n     */\n    requestSync(desc: PermissionDescriptor): PermissionStatus;",
                    "name": "requestSync",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "desc",
                        "type": {
                          "ref": "PermissionDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 4583,
                          "source": " PermissionDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "PermissionStatus",
                      "targs": [],
                      "isNullable": false,
                      "_": 4583,
                      "source": " PermissionStatus"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline12",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The [LLVM](https://llvm.org/) target triple, which is the combination\n of `${arch}-${vendor}-${os}` and represent the specific build target that\n the current runtime was built for.",
                    "isMethod": false,
                    "_": 4675,
                    "source": "\n    /** The [LLVM](https://llvm.org/) target triple, which is the combination\n     * of `${arch}-${vendor}-${os}` and represent the specific build target that\n     * the current runtime was built for. */\n    target: string;",
                    "name": "target",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4675,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Instruction set architecture that the Deno CLI was built for.",
                    "isMethod": false,
                    "_": 4677,
                    "source": "\n    /** Instruction set architecture that the Deno CLI was built for. */\n    arch: \"x86_64\" | \"aarch64\";",
                    "name": "arch",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"x86_64\"",
                          "isNullable": false,
                          "_": 4677,
                          "source": " \"x86_64\""
                        },
                        {
                          "core": "\"aarch64\"",
                          "isNullable": false,
                          "_": 4677,
                          "source": " \"aarch64\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4677,
                      "source": " \"x86_64\" | \"aarch64\""
                    }
                  },
                  {
                    "doc": "The operating system that the Deno CLI was built for. `\"darwin\"` is\n also known as OSX or MacOS.",
                    "isMethod": false,
                    "_": 4680,
                    "source": "\n    /** The operating system that the Deno CLI was built for. `\"darwin\"` is\n     * also known as OSX or MacOS. */\n    os:\n      | \"darwin\"\n      | \"linux\"\n      | \"windows\"\n      | \"freebsd\"\n      | \"netbsd\"\n      | \"aix\"\n      | \"solaris\"\n      | \"illumos\";",
                    "name": "os",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"darwin\"",
                          "isNullable": false,
                          "_": 4681,
                          "source": " \"darwin\""
                        },
                        {
                          "core": "\"linux\"",
                          "isNullable": false,
                          "_": 4682,
                          "source": " \"linux\""
                        },
                        {
                          "core": "\"windows\"",
                          "isNullable": false,
                          "_": 4683,
                          "source": " \"windows\""
                        },
                        {
                          "core": "\"freebsd\"",
                          "isNullable": false,
                          "_": 4684,
                          "source": " \"freebsd\""
                        },
                        {
                          "core": "\"netbsd\"",
                          "isNullable": false,
                          "_": 4685,
                          "source": " \"netbsd\""
                        },
                        {
                          "core": "\"aix\"",
                          "isNullable": false,
                          "_": 4686,
                          "source": " \"aix\""
                        },
                        {
                          "core": "\"solaris\"",
                          "isNullable": false,
                          "_": 4687,
                          "source": " \"solaris\""
                        },
                        {
                          "core": "\"illumos\"",
                          "isNullable": false,
                          "_": 4688,
                          "source": " \"illumos\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4681,
                      "source": "\n      | \"darwin\"\n      | \"linux\"\n      | \"windows\"\n      | \"freebsd\"\n      | \"netbsd\"\n      | \"aix\"\n      | \"solaris\"\n      | \"illumos\""
                    }
                  },
                  {
                    "doc": "The computer vendor that the Deno CLI was built for.",
                    "isMethod": false,
                    "_": 4690,
                    "source": "\n    /** The computer vendor that the Deno CLI was built for. */\n    vendor: string;",
                    "name": "vendor",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4690,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Optional environment flags that were set for this build of Deno CLI.",
                    "isMethod": false,
                    "_": 4692,
                    "source": "\n    /** Optional environment flags that were set for this build of Deno CLI. */\n    env?: string;",
                    "name": "env",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4692,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline13",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Deno CLI's version. For example: `\"1.26.0\"`.",
                    "isMethod": false,
                    "_": 4708,
                    "source": "\n    /** Deno CLI's version. For example: `\"1.26.0\"`. */\n    deno: string;",
                    "name": "deno",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4708,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n\n V8 is the underlying JavaScript runtime platform that Deno is built on\n top of.",
                    "isMethod": false,
                    "_": 4713,
                    "source": "\n    /** The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n     *\n     * V8 is the underlying JavaScript runtime platform that Deno is built on\n     * top of. */\n    v8: string;",
                    "name": "v8",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4713,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n\n A version of the TypeScript type checker and language server is built-in\n to the Deno CLI.",
                    "isMethod": false,
                    "_": 4718,
                    "source": "\n    /** The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n     *\n     * A version of the TypeScript type checker and language server is built-in\n     * to the Deno CLI. */\n    typescript: string;",
                    "name": "typescript",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 4718,
                      "source": " string"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 4769,
                "name": "SymlinkOptions",
                "generics": [],
                "doc": "Options that can be used with {@linkcode symlink} and\n{@linkcode symlinkSync}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If the symbolic link should be either a file or directory. This option\n only applies to Windows and is ignored on other operating systems.",
                    "isMethod": false,
                    "_": 4772,
                    "source": "\n    /** If the symbolic link should be either a file or directory. This option\n     * only applies to Windows and is ignored on other operating systems. */\n    type: \"file\" | \"dir\";",
                    "name": "type",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"file\"",
                          "isNullable": false,
                          "_": 4772,
                          "source": " \"file\""
                        },
                        {
                          "core": "\"dir\"",
                          "isNullable": false,
                          "_": 4772,
                          "source": " \"dir\""
                        }
                      ],
                      "isNullable": false,
                      "_": 4772,
                      "source": " \"file\" | \"dir\""
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5011,
                "name": "RequestEvent",
                "generics": [],
                "doc": "The event yielded from an {@linkcode HttpConn} which represents an HTTP\nrequest from a remote client.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The request from the client in the form of the web platform\n{@linkcode Request}.",
                    "isMethod": false,
                    "_": 5014,
                    "source": "\n    /** The request from the client in the form of the web platform\n     * {@linkcode Request}. */\n    readonly request: Request;",
                    "name": "request",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Request",
                      "targs": [],
                      "isNullable": false,
                      "_": 5014,
                      "source": " Request"
                    }
                  },
                  {
                    "doc": "The method to be used to respond to the event. The response needs to\n either be an instance of {@linkcode Response} or a promise that resolves\n with an instance of `Response`.\n\n When the response is successfully processed then the promise returned\n will be resolved. If there are any issues with sending the response,\n the promise will be rejected.",
                    "isMethod": true,
                    "_": 5022,
                    "source": "\n    /** The method to be used to respond to the event. The response needs to\n     * either be an instance of {@linkcode Response} or a promise that resolves\n     * with an instance of `Response`.\n     *\n     * When the response is successfully processed then the promise returned\n     * will be resolved. If there are any issues with sending the response,\n     * the promise will be rejected. */\n    respondWith(r: Response | PromiseLike<Response>): Promise<void>;",
                    "name": "respondWith",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "r",
                        "type": {
                          "union": [
                            {
                              "ref": "Response",
                              "targs": [],
                              "isNullable": false,
                              "_": 5022,
                              "source": " Response"
                            },
                            {
                              "ref": "PromiseLike",
                              "targs": [
                                {
                                  "ref": "Response",
                                  "targs": [],
                                  "isNullable": false,
                                  "_": 5022,
                                  "source": "Response"
                                }
                              ],
                              "isNullable": false,
                              "_": 5022,
                              "source": " PromiseLike<Response>"
                            }
                          ],
                          "isNullable": false,
                          "_": 5022,
                          "source": " Response | PromiseLike<Response>"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 5022,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 5022,
                      "source": " Promise<void>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5030,
                "name": "HttpConn",
                "generics": [],
                "doc": "The async iterable that is returned from {@linkcode Deno.serveHttp} which\nyields up {@linkcode RequestEvent} events, representing individual\nrequests on the HTTP server connection.",
                "heritage": [
                  [
                    {
                      "ref": "AsyncIterable",
                      "targs": [
                        {
                          "ref": "RequestEvent",
                          "targs": [],
                          "isNullable": false,
                          "_": 5030,
                          "source": "RequestEvent"
                        }
                      ],
                      "isNullable": false,
                      "_": 5030,
                      "source": " AsyncIterable<RequestEvent>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The resource ID associated with this connection. Generally users do not\nneed to be aware of this identifier.",
                    "isMethod": false,
                    "_": 5033,
                    "source": "\n    /** The resource ID associated with this connection. Generally users do not\n     * need to be aware of this identifier. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5033,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "An alternative to the async iterable interface which provides promises\n which resolve with either a {@linkcode RequestEvent} when there is\n another request or `null` when the client has closed the connection.",
                    "isMethod": true,
                    "_": 5038,
                    "source": "\n\n    /** An alternative to the async iterable interface which provides promises\n     * which resolve with either a {@linkcode RequestEvent} when there is\n     * another request or `null` when the client has closed the connection. */\n    nextRequest(): Promise<RequestEvent | null>;",
                    "name": "nextRequest",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "union": [
                            {
                              "ref": "RequestEvent",
                              "targs": [],
                              "isNullable": false,
                              "_": 5038,
                              "source": "RequestEvent"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 5038,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 5038,
                          "source": "RequestEvent | null"
                        }
                      ],
                      "isNullable": false,
                      "_": 5038,
                      "source": " Promise<RequestEvent | null>"
                    }
                  },
                  {
                    "doc": "Initiate a server side closure of the connection, indicating to the\n client that you refuse to accept any more requests on this connection.\n\n Typically the client closes the connection, which will result in the\n async iterable terminating or the `nextRequest()` method returning\n `null`.",
                    "isMethod": true,
                    "_": 5045,
                    "source": "\n    /** Initiate a server side closure of the connection, indicating to the\n     * client that you refuse to accept any more requests on this connection.\n     *\n     * Typically the client closes the connection, which will result in the\n     * async iterable terminating or the `nextRequest()` method returning\n     * `null`. */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 5045,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5101,
                "name": "WebSocketUpgrade",
                "generics": [],
                "doc": "The object that is returned from a {@linkcode Deno.upgradeWebSocket}\nrequest.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The response object that represents the HTTP response to the client,\n which should be used to the {@linkcode RequestEvent} `.respondWith()` for\n the upgrade to be successful.",
                    "isMethod": false,
                    "_": 5105,
                    "source": "\n    /** The response object that represents the HTTP response to the client,\n     * which should be used to the {@linkcode RequestEvent} `.respondWith()` for\n     * the upgrade to be successful. */\n    response: Response;",
                    "name": "response",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Response",
                      "targs": [],
                      "isNullable": false,
                      "_": 5105,
                      "source": " Response"
                    }
                  },
                  {
                    "doc": "The {@linkcode WebSocket} interface to communicate to the client via a\n web socket.",
                    "isMethod": false,
                    "_": 5108,
                    "source": "\n    /** The {@linkcode WebSocket} interface to communicate to the client via a\n     * web socket. */\n    socket: WebSocket;",
                    "name": "socket",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "WebSocket",
                      "targs": [],
                      "isNullable": false,
                      "_": 5108,
                      "source": " WebSocket"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5115,
                "name": "UpgradeWebSocketOptions",
                "generics": [],
                "doc": "Options which can be set when performing a\n{@linkcode Deno.upgradeWebSocket} upgrade of a {@linkcode Request}",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Sets the `.protocol` property on the client side web socket to the\n value provided here, which should be one of the strings specified in the\n `protocols` parameter when requesting the web socket. This is intended\n for clients and servers to specify sub-protocols to use to communicate to\n each other.",
                    "isMethod": false,
                    "_": 5121,
                    "source": "\n    /** Sets the `.protocol` property on the client side web socket to the\n     * value provided here, which should be one of the strings specified in the\n     * `protocols` parameter when requesting the web socket. This is intended\n     * for clients and servers to specify sub-protocols to use to communicate to\n     * each other. */\n    protocol?: string;",
                    "name": "protocol",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5121,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "If the client does not respond to this frame with a\n `pong` within the timeout specified, the connection is deemed\n unhealthy and is closed. The `close` and `error` event will be emitted.\n\n The default is 120 seconds. Set to `0` to disable timeouts.",
                    "isMethod": false,
                    "_": 5127,
                    "source": "\n    /** If the client does not respond to this frame with a\n     * `pong` within the timeout specified, the connection is deemed\n     * unhealthy and is closed. The `close` and `error` event will be emitted.\n     *\n     * The default is 120 seconds. Set to `0` to disable timeouts. */\n    idleTimeout?: number;",
                    "name": "idleTimeout",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5127,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline14",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "parent": "ResolveDnsOptions",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The IP address of the name server.",
                    "isMethod": false,
                    "_": 5228,
                    "source": "\n      /** The IP address of the name server. */\n      ipAddr: string;",
                    "name": "ipAddr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5228,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The port number the query will be sent to.\n\n @default {53}",
                    "isMethod": false,
                    "_": 5232,
                    "source": "\n      /** The port number the query will be sent to.\n       *\n       * @default {53} */\n      port?: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5232,
                      "source": " number"
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 5221,
                "name": "ResolveDnsOptions",
                "generics": [],
                "doc": "Options which can be set when using {@linkcode Deno.resolveDns}.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The name server to be used for lookups.\n\n If not specified, defaults to the system configuration. For example\n `/etc/resolv.conf` on Unix-like systems.",
                    "isMethod": false,
                    "_": 5226,
                    "source": "\n    /** The name server to be used for lookups.\n     *\n     * If not specified, defaults to the system configuration. For example\n     * `/etc/resolv.conf` on Unix-like systems. */\n    nameServer?: {\n      /** The IP address of the name server. */\n      ipAddr: string;\n      /** The port number the query will be sent to.\n       *\n       * @default {53} */\n      port?: number;\n    };",
                    "name": "nameServer",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "IInline14",
                      "targs": [],
                      "isNullable": false,
                      "_": 5226,
                      "source": " {\n      /** The IP address of the name server. */\n      ipAddr: string;\n      /** The port number the query will be sent to.\n       *\n       * @default {53} */\n      port?: number;\n    }"
                    }
                  },
                  {
                    "doc": "An abort signal to allow cancellation of the DNS resolution operation.\n If the signal becomes aborted the resolveDns operation will be stopped\n and the promise returned will be rejected with an AbortError.",
                    "isMethod": false,
                    "_": 5239,
                    "source": "\n    /**\n     * An abort signal to allow cancellation of the DNS resolution operation.\n     * If the signal becomes aborted the resolveDns operation will be stopped\n     * and the promise returned will be rejected with an AbortError.\n     */\n    signal?: AbortSignal;",
                    "name": "signal",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "AbortSignal",
                      "targs": [],
                      "isNullable": false,
                      "_": 5239,
                      "source": " AbortSignal"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5247,
                "name": "CAARecord",
                "generics": [],
                "doc": "If {@linkcode Deno.resolveDns} is called with `\"CAA\"` record type\nspecified, it will resolve with an array of objects with this interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "If `true`, indicates that the corresponding property tag **must** be\n understood if the semantics of the CAA record are to be correctly\n interpreted by an issuer.\n\n Issuers **must not** issue certificates for a domain if the relevant CAA\n Resource Record set contains unknown property tags that have `critical`\n set.",
                    "isMethod": false,
                    "_": 5255,
                    "source": "\n    /** If `true`, indicates that the corresponding property tag **must** be\n     * understood if the semantics of the CAA record are to be correctly\n     * interpreted by an issuer.\n     *\n     * Issuers **must not** issue certificates for a domain if the relevant CAA\n     * Resource Record set contains unknown property tags that have `critical`\n     * set. */\n    critical: boolean;",
                    "name": "critical",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 5255,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "An string that represents the identifier of the property represented by\n the record.",
                    "isMethod": false,
                    "_": 5258,
                    "source": "\n    /** An string that represents the identifier of the property represented by\n     * the record. */\n    tag: string;",
                    "name": "tag",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5258,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "The value associated with the tag.",
                    "isMethod": false,
                    "_": 5260,
                    "source": "\n    /** The value associated with the tag. */\n    value: string;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5260,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5267,
                "name": "MXRecord",
                "generics": [],
                "doc": "If {@linkcode Deno.resolveDns} is called with `\"MX\"` record type\nspecified, it will return an array of objects with this interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A priority value, which is a relative value compared to the other\n preferences of MX records for the domain.",
                    "isMethod": false,
                    "_": 5270,
                    "source": "\n    /** A priority value, which is a relative value compared to the other\n     * preferences of MX records for the domain. */\n    preference: number;",
                    "name": "preference",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5270,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "The server that mail should be delivered to.",
                    "isMethod": false,
                    "_": 5272,
                    "source": "\n    /** The server that mail should be delivered to. */\n    exchange: string;",
                    "name": "exchange",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5272,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5279,
                "name": "NAPTRRecord",
                "generics": [],
                "doc": "If {@linkcode Deno.resolveDns} is called with `\"NAPTR\"` record type\nspecified, it will return an array of objects with this interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5280,
                    "source": "\n    order: number;",
                    "name": "order",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5280,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5281,
                    "source": "\n    preference: number;",
                    "name": "preference",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5281,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5282,
                    "source": "\n    flags: string;",
                    "name": "flags",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5282,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5283,
                    "source": "\n    services: string;",
                    "name": "services",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5283,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5284,
                    "source": "\n    regexp: string;",
                    "name": "regexp",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5284,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5285,
                    "source": "\n    replacement: string;",
                    "name": "replacement",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5285,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5292,
                "name": "SOARecord",
                "generics": [],
                "doc": "If {@linkcode Deno.resolveDns} is called with `\"SOA\"` record type\nspecified, it will return an array of objects with this interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5293,
                    "source": "\n    mname: string;",
                    "name": "mname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5293,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5294,
                    "source": "\n    rname: string;",
                    "name": "rname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5294,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5295,
                    "source": "\n    serial: number;",
                    "name": "serial",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5295,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5296,
                    "source": "\n    refresh: number;",
                    "name": "refresh",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5296,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5297,
                    "source": "\n    retry: number;",
                    "name": "retry",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5297,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5298,
                    "source": "\n    expire: number;",
                    "name": "expire",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5298,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5299,
                    "source": "\n    minimum: number;",
                    "name": "minimum",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5299,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 5307,
                "name": "SRVRecord",
                "generics": [],
                "doc": "If {@linkcode Deno.resolveDns} is called with `\"SRV\"` record type\nspecified, it will return an array of objects with this interface.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5308,
                    "source": "\n    priority: number;",
                    "name": "priority",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5308,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5309,
                    "source": "\n    weight: number;",
                    "name": "weight",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5309,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5310,
                    "source": "\n    port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5310,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 5311,
                    "source": "\n    target: string;",
                    "name": "target",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5311,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8128,
                "name": "NetAddr",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8129,
                    "source": "\n    transport: \"tcp\" | \"udp\";",
                    "name": "transport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"tcp\"",
                          "isNullable": false,
                          "_": 8129,
                          "source": " \"tcp\""
                        },
                        {
                          "core": "\"udp\"",
                          "isNullable": false,
                          "_": 8129,
                          "source": " \"udp\""
                        }
                      ],
                      "isNullable": false,
                      "_": 8129,
                      "source": " \"tcp\" | \"udp\""
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8130,
                    "source": "\n    hostname: string;",
                    "name": "hostname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8130,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8131,
                    "source": "\n    port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8131,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8135,
                "name": "UnixAddr",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8136,
                    "source": "\n    transport: \"unix\" | \"unixpacket\";",
                    "name": "transport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "core": "\"unix\"",
                          "isNullable": false,
                          "_": 8136,
                          "source": " \"unix\""
                        },
                        {
                          "core": "\"unixpacket\"",
                          "isNullable": false,
                          "_": 8136,
                          "source": " \"unixpacket\""
                        }
                      ],
                      "isNullable": false,
                      "_": 8136,
                      "source": " \"unix\" | \"unixpacket\""
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8137,
                    "source": "\n    path: string;",
                    "name": "path",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8137,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8147,
                "name": "Listener",
                "generics": [],
                "doc": "A generic network listener for stream-oriented protocols.",
                "heritage": [
                  [
                    {
                      "ref": "AsyncIterable",
                      "targs": [
                        {
                          "ref": "Conn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8147,
                          "source": "Conn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8147,
                      "source": " AsyncIterable<Conn>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Waits for and resolves to the next connection to the `Listener`.",
                    "isMethod": true,
                    "_": 8149,
                    "source": "\n    /** Waits for and resolves to the next connection to the `Listener`. */\n    accept(): Promise<Conn>;",
                    "name": "accept",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "Conn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8149,
                          "source": "Conn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8149,
                      "source": " Promise<Conn>"
                    }
                  },
                  {
                    "doc": "Close closes the listener. Any pending accept promises will be rejected\n with errors.",
                    "isMethod": true,
                    "_": 8152,
                    "source": "\n    /** Close closes the listener. Any pending accept promises will be rejected\n     * with errors. */\n    close(): void;",
                    "name": "close",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8152,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Return the address of the `Listener`.",
                    "isMethod": false,
                    "_": 8154,
                    "source": "\n    /** Return the address of the `Listener`. */\n    readonly addr: Addr;",
                    "name": "addr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Addr",
                      "targs": [],
                      "isNullable": false,
                      "_": 8154,
                      "source": " Addr"
                    }
                  },
                  {
                    "doc": "Return the rid of the `Listener`.",
                    "isMethod": false,
                    "_": 8157,
                    "source": "\n\n    /** Return the rid of the `Listener`. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8157,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8159,
                    "source": "\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<Conn>;",
                    "name": "[Symbol.asyncIterator]",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "AsyncIterableIterator",
                      "targs": [
                        {
                          "ref": "Conn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8159,
                          "source": "Conn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8159,
                      "source": " AsyncIterableIterator<Conn>"
                    }
                  },
                  {
                    "doc": "Make the listener block the event loop from finishing.\n\n Note: the listener blocks the event loop from finishing by default.\n This method is only meaningful after `.unref()` is called.",
                    "isMethod": true,
                    "_": 8167,
                    "source": "\n\n    /**\n     * Make the listener block the event loop from finishing.\n     *\n     * Note: the listener blocks the event loop from finishing by default.\n     * This method is only meaningful after `.unref()` is called.\n     */\n    ref(): void;",
                    "name": "ref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8167,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Make the listener not block the event loop from finishing.",
                    "isMethod": true,
                    "_": 8170,
                    "source": "\n\n    /** Make the listener not block the event loop from finishing. */\n    unref(): void;",
                    "name": "unref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8170,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8177,
                "name": "TlsListener",
                "generics": [],
                "doc": "Specialized listener that accepts TLS connections.",
                "heritage": [
                  [
                    {
                      "ref": "Listener",
                      "targs": [],
                      "isNullable": false,
                      "_": 8177,
                      "source": " Listener"
                    },
                    {
                      "ref": "AsyncIterable",
                      "targs": [
                        {
                          "ref": "TlsConn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8177,
                          "source": "TlsConn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8177,
                      "source": " AsyncIterable<TlsConn>"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Waits for a TLS client to connect and accepts the connection.",
                    "isMethod": true,
                    "_": 8179,
                    "source": "\n    /** Waits for a TLS client to connect and accepts the connection. */\n    accept(): Promise<TlsConn>;",
                    "name": "accept",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "TlsConn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8179,
                          "source": "TlsConn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8179,
                      "source": " Promise<TlsConn>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8180,
                    "source": "\n    [Symbol.asyncIterator](): AsyncIterableIterator<TlsConn>;",
                    "name": "[Symbol.asyncIterator]",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "AsyncIterableIterator",
                      "targs": [
                        {
                          "ref": "TlsConn",
                          "targs": [],
                          "isNullable": false,
                          "_": 8180,
                          "source": "TlsConn"
                        }
                      ],
                      "isNullable": false,
                      "_": 8180,
                      "source": " AsyncIterableIterator<TlsConn>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8184,
                "name": "Conn",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 8184,
                      "source": " Reader"
                    },
                    {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 8184,
                      "source": " Writer"
                    },
                    {
                      "ref": "Closer",
                      "targs": [],
                      "isNullable": false,
                      "_": 8184,
                      "source": " Closer"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The local address of the connection.",
                    "isMethod": false,
                    "_": 8186,
                    "source": "\n    /** The local address of the connection. */\n    readonly localAddr: Addr;",
                    "name": "localAddr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Addr",
                      "targs": [],
                      "isNullable": false,
                      "_": 8186,
                      "source": " Addr"
                    }
                  },
                  {
                    "doc": "The remote address of the connection.",
                    "isMethod": false,
                    "_": 8188,
                    "source": "\n    /** The remote address of the connection. */\n    readonly remoteAddr: Addr;",
                    "name": "remoteAddr",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Addr",
                      "targs": [],
                      "isNullable": false,
                      "_": 8188,
                      "source": " Addr"
                    }
                  },
                  {
                    "doc": "The resource ID of the connection.",
                    "isMethod": false,
                    "_": 8190,
                    "source": "\n    /** The resource ID of the connection. */\n    readonly rid: number;",
                    "name": "rid",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8190,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Shuts down (`shutdown(2)`) the write side of the connection. Most\n callers should just use `close()`.",
                    "isMethod": true,
                    "_": 8193,
                    "source": "\n    /** Shuts down (`shutdown(2)`) the write side of the connection. Most\n     * callers should just use `close()`. */\n    closeWrite(): Promise<void>;",
                    "name": "closeWrite",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "core": "void",
                          "isNullable": false,
                          "_": 8193,
                          "source": "void"
                        }
                      ],
                      "isNullable": false,
                      "_": 8193,
                      "source": " Promise<void>"
                    }
                  },
                  {
                    "doc": "*UNSTABLE**: New API, yet to be vetted.\n\n Make the connection block the event loop from finishing.\n\n Note: the connection blocks the event loop from finishing by default.\n This method is only meaningful after `.unref()` is called.",
                    "isMethod": true,
                    "_": 8202,
                    "source": "\n\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Make the connection block the event loop from finishing.\n     *\n     * Note: the connection blocks the event loop from finishing by default.\n     * This method is only meaningful after `.unref()` is called.\n     */\n    ref(): void;",
                    "name": "ref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8202,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "*UNSTABLE**: New API, yet to be vetted.\n\n Make the connection not block the event loop from finishing.",
                    "isMethod": true,
                    "_": 8207,
                    "source": "\n    /** **UNSTABLE**: New API, yet to be vetted.\n     *\n     * Make the connection not block the event loop from finishing.\n     */\n    unref(): void;",
                    "name": "unref",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8207,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8209,
                    "source": "\n\n    readonly readable: ReadableStream<Uint8Array>;",
                    "name": "readable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "ReadableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8209,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 8209,
                      "source": " ReadableStream<Uint8Array>"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8210,
                    "source": "\n    readonly writable: WritableStream<Uint8Array>;",
                    "name": "writable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "WritableStream",
                      "targs": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 8210,
                          "source": "Uint8Array"
                        }
                      ],
                      "isNullable": false,
                      "_": 8210,
                      "source": " WritableStream<Uint8Array>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8215,
                "name": "TlsHandshakeInfo",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8218,
                "name": "TlsConn",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "Conn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8218,
                      "source": " Conn"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Runs the client or server handshake protocol to completion if that has\n not happened yet. Calling this method is optional; the TLS handshake\n will be completed automatically as soon as data is sent or received.",
                    "isMethod": true,
                    "_": 8222,
                    "source": "\n    /** Runs the client or server handshake protocol to completion if that has\n     * not happened yet. Calling this method is optional; the TLS handshake\n     * will be completed automatically as soon as data is sent or received. */\n    handshake(): Promise<TlsHandshakeInfo>;",
                    "name": "handshake",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "ref": "Promise",
                      "targs": [
                        {
                          "ref": "TlsHandshakeInfo",
                          "targs": [],
                          "isNullable": false,
                          "_": 8222,
                          "source": "TlsHandshakeInfo"
                        }
                      ],
                      "isNullable": false,
                      "_": 8222,
                      "source": " Promise<TlsHandshakeInfo>"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8226,
                "name": "ListenOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The port to listen on.",
                    "isMethod": false,
                    "_": 8228,
                    "source": "\n    /** The port to listen on. */\n    port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8228,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n __Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\n the browsers on Windows don't work with the address `0.0.0.0`.\n You should show the message like `server running on localhost:8080` instead of\n `server running on 0.0.0.0:8080` if your program supports Windows.\n\n @default {\"0.0.0.0\"}",
                    "isMethod": false,
                    "_": 8237,
                    "source": "\n    /** A literal IP address or host name that can be resolved to an IP address.\n     *\n     * __Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\n     * the browsers on Windows don't work with the address `0.0.0.0`.\n     * You should show the message like `server running on localhost:8080` instead of\n     * `server running on 0.0.0.0:8080` if your program supports Windows.\n     *\n     * @default {\"0.0.0.0\"} */\n    hostname?: string;",
                    "name": "hostname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8237,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8242,
                "name": "TcpListenOptions",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "ListenOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8242,
                      "source": " ListenOptions"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "isClass": false,
                "_": -1,
                "name": "IInline44",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": true,
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8260,
                    "source": " transport?: \"tcp\"",
                    "name": "transport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"tcp\"",
                      "isNullable": false,
                      "_": 8260,
                      "source": " \"tcp\""
                    }
                  }
                ],
                "calls": []
              },
              {
                "_": 8264,
                "name": "ListenTlsOptions",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "TcpListenOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8264,
                      "source": " TcpListenOptions"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Server private key in PEM format",
                    "isMethod": false,
                    "_": 8266,
                    "source": "\n    /** Server private key in PEM format */\n    key?: string;",
                    "name": "key",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8266,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Cert chain in PEM format",
                    "isMethod": false,
                    "_": 8268,
                    "source": "\n    /** Cert chain in PEM format */\n    cert?: string;",
                    "name": "cert",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8268,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Path to a file containing a PEM formatted CA certificate. Requires\n `--allow-read`.\n\n @tags allow-read\n @deprecated This option is deprecated and will be removed in Deno 2.0.",
                    "isMethod": false,
                    "_": 8275,
                    "source": "\n    /** Path to a file containing a PEM formatted CA certificate. Requires\n     * `--allow-read`.\n     *\n     * @tags allow-read\n     * @deprecated This option is deprecated and will be removed in Deno 2.0.\n     */\n    certFile?: string;",
                    "name": "certFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8275,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Server private key file. Requires `--allow-read`.\n\n @tags allow-read\n @deprecated This option is deprecated and will be removed in Deno 2.0.",
                    "isMethod": false,
                    "_": 8281,
                    "source": "\n    /** Server private key file. Requires `--allow-read`.\n     *\n     * @tags allow-read\n     * @deprecated This option is deprecated and will be removed in Deno 2.0.\n     */\n    keyFile?: string;",
                    "name": "keyFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8281,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8283,
                    "source": "\n\n    transport?: \"tcp\";",
                    "name": "transport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"tcp\"",
                      "isNullable": false,
                      "_": 8283,
                      "source": " \"tcp\""
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8301,
                "name": "ConnectOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The port to connect to.",
                    "isMethod": false,
                    "_": 8303,
                    "source": "\n    /** The port to connect to. */\n    port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8303,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n If not specified,\n\n @default {\"127.0.0.1\"}",
                    "isMethod": false,
                    "_": 8308,
                    "source": "\n    /** A literal IP address or host name that can be resolved to an IP address.\n     * If not specified,\n     *\n     * @default {\"127.0.0.1\"} */\n    hostname?: string;",
                    "name": "hostname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8308,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8309,
                    "source": "\n    transport?: \"tcp\";",
                    "name": "transport",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "\"tcp\"",
                      "isNullable": false,
                      "_": 8309,
                      "source": " \"tcp\""
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8331,
                "name": "TcpConn",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "Conn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8331,
                      "source": " Conn"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "Enable/disable the use of Nagle's algorithm.\n\n @param [noDelay=true]",
                    "isMethod": true,
                    "_": 8337,
                    "source": "\n    /**\n     * Enable/disable the use of Nagle's algorithm.\n     *\n     * @param [noDelay=true]\n     */\n    setNoDelay(noDelay?: boolean): void;",
                    "name": "setNoDelay",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "noDelay",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8337,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8337,
                      "source": " void"
                    }
                  },
                  {
                    "doc": "Enable/disable keep-alive functionality.",
                    "isMethod": true,
                    "_": 8339,
                    "source": "\n    /** Enable/disable keep-alive functionality. */\n    setKeepAlive(keepAlive?: boolean): void;",
                    "name": "setKeepAlive",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "keepAlive",
                        "type": {
                          "core": "boolean",
                          "isNullable": false,
                          "_": 8339,
                          "source": " boolean"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8339,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8344,
                "name": "UnixConn",
                "generics": [],
                "doc": "",
                "heritage": [
                  [
                    {
                      "ref": "Conn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8344,
                      "source": " Conn"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8347,
                "name": "ConnectTlsOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "The port to connect to.",
                    "isMethod": false,
                    "_": 8349,
                    "source": "\n    /** The port to connect to. */\n    port: number;",
                    "name": "port",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8349,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n @default {\"127.0.0.1\"}",
                    "isMethod": false,
                    "_": 8353,
                    "source": "\n    /** A literal IP address or host name that can be resolved to an IP address.\n     *\n     * @default {\"127.0.0.1\"} */\n    hostname?: string;",
                    "name": "hostname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8353,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "Server certificate file.\n\n @deprecated This option is deprecated and will be removed in a future\n release.",
                    "isMethod": false,
                    "_": 8360,
                    "source": "\n    /**\n     * Server certificate file.\n     *\n     * @deprecated This option is deprecated and will be removed in a future\n     * release.\n     */\n    certFile?: string;",
                    "name": "certFile",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8360,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A list of root certificates that will be used in addition to the\n default root certificates to verify the peer's certificate.\n\n Must be in PEM format.",
                    "isMethod": false,
                    "_": 8365,
                    "source": "\n    /** A list of root certificates that will be used in addition to the\n     * default root certificates to verify the peer's certificate.\n     *\n     * Must be in PEM format. */\n    caCerts?: string[];",
                    "name": "caCerts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 8365,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 8365,
                      "source": " string[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8389,
                "name": "StartTlsOptions",
                "generics": [],
                "doc": "",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n @default {\"127.0.0.1\"}",
                    "isMethod": false,
                    "_": 8393,
                    "source": "\n    /** A literal IP address or host name that can be resolved to an IP address.\n     *\n     * @default {\"127.0.0.1\"} */\n    hostname?: string;",
                    "name": "hostname",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8393,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "A list of root certificates that will be used in addition to the\n default root certificates to verify the peer's certificate.\n\n Must be in PEM format.",
                    "isMethod": false,
                    "_": 8398,
                    "source": "\n    /** A list of root certificates that will be used in addition to the\n     * default root certificates to verify the peer's certificate.\n     *\n     * Must be in PEM format. */\n    caCerts?: string[];",
                    "name": "caCerts",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 8398,
                          "source": " string"
                        }
                      ],
                      "isNullable": false,
                      "_": 8398,
                      "source": " string[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              }
            ],
            "typedefs": [
              {
                "name": "PermissionOptions",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"inherit\"",
                      "isNullable": false,
                      "_": 475,
                      "source": " \"inherit\""
                    },
                    {
                      "core": "\"none\"",
                      "isNullable": false,
                      "_": 476,
                      "source": " \"none\""
                    },
                    {
                      "ref": "PermissionOptionsObject",
                      "targs": [],
                      "isNullable": false,
                      "_": 477,
                      "source": " PermissionOptionsObject"
                    }
                  ],
                  "isNullable": false,
                  "_": 475,
                  "source": "\n    | \"inherit\"\n    | \"none\"\n    | PermissionOptionsObject",
                  "parent": "PermissionOptions"
                },
                "doc": "Options which define the permissions within a test or worker context.\n\n`\"inherit\"` ensures that all permissions of the parent process will be\napplied to the test context. `\"none\"` ensures the test context has no\npermissions. A `PermissionOptionsObject` provides a more specific\nset of permissions to the test context.",
                "_": 474,
                "source": "\n\n  /**\n   * Options which define the permissions within a test or worker context.\n   *\n   * `\"inherit\"` ensures that all permissions of the parent process will be\n   * applied to the test context. `\"none\"` ensures the test context has no\n   * permissions. A `PermissionOptionsObject` provides a more specific\n   * set of permissions to the test context.\n   *\n   * @category Permissions */\n  export type PermissionOptions =\n    | \"inherit\"\n    | \"none\"\n    | PermissionOptionsObject;"
              },
              {
                "name": "FsEventFlag",
                "generics": [],
                "type": {
                  "core": "\"rescan\"",
                  "isNullable": false,
                  "_": 3613,
                  "source": " \"rescan\"",
                  "parent": "FsEventFlag"
                },
                "doc": "Additional information for FsEvent objects with the \"other\" kind.\n\n- `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   change in the filesystem such that events received so far can no longer\n   be relied on to represent the state of the filesystem now. An\n   application that simply reacts to file changes may not care about this.\n   An application that keeps an in-memory representation of the filesystem\n   will need to care, and will need to refresh that representation directly\n   from the filesystem.",
                "_": 3613,
                "source": "\n\n  /**\n   * Additional information for FsEvent objects with the \"other\" kind.\n   *\n   * - `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   *    change in the filesystem such that events received so far can no longer\n   *    be relied on to represent the state of the filesystem now. An\n   *    application that simply reacts to file changes may not care about this.\n   *    An application that keeps an in-memory representation of the filesystem\n   *    will need to care, and will need to refresh that representation directly\n   *    from the filesystem.\n   *\n   * @category File System\n   */\n  export type FsEventFlag = \"rescan\";"
              },
              {
                "name": "ProcessStatus",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "IInline10",
                      "targs": [],
                      "isNullable": false,
                      "_": 3760,
                      "source": " {\n      success: true;\n      code: 0;\n      signal?: undefined;\n    }"
                    },
                    {
                      "ref": "IInline11",
                      "targs": [],
                      "isNullable": false,
                      "_": 3765,
                      "source": " {\n      success: false;\n      code: number;\n      signal?: number;\n    }"
                    }
                  ],
                  "isNullable": false,
                  "_": 3760,
                  "source": "\n    | {\n      success: true;\n      code: 0;\n      signal?: undefined;\n    }\n    | {\n      success: false;\n      code: number;\n      signal?: number;\n    }",
                  "parent": "ProcessStatus"
                },
                "doc": "The status resolved from the `.status()` method of a\n{@linkcode Deno.Process} instance.\n\nIf `success` is `true`, then `code` will be `0`, but if `success` is\n`false`, the sub-process exit code will be set in `code`.",
                "_": 3759,
                "source": "\n\n  /** The status resolved from the `.status()` method of a\n   * {@linkcode Deno.Process} instance.\n   *\n   * If `success` is `true`, then `code` will be `0`, but if `success` is\n   * `false`, the sub-process exit code will be set in `code`.\n   *\n   * @category Sub Process */\n  export type ProcessStatus =\n    | {\n      success: true;\n      code: 0;\n      signal?: undefined;\n    }\n    | {\n      success: false;\n      code: number;\n      signal?: number;\n    };"
              },
              {
                "name": "Signal",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"SIGABRT\"",
                      "isNullable": false,
                      "_": 3854,
                      "source": " \"SIGABRT\""
                    },
                    {
                      "core": "\"SIGALRM\"",
                      "isNullable": false,
                      "_": 3855,
                      "source": " \"SIGALRM\""
                    },
                    {
                      "core": "\"SIGBREAK\"",
                      "isNullable": false,
                      "_": 3856,
                      "source": " \"SIGBREAK\""
                    },
                    {
                      "core": "\"SIGBUS\"",
                      "isNullable": false,
                      "_": 3857,
                      "source": " \"SIGBUS\""
                    },
                    {
                      "core": "\"SIGCHLD\"",
                      "isNullable": false,
                      "_": 3858,
                      "source": " \"SIGCHLD\""
                    },
                    {
                      "core": "\"SIGCONT\"",
                      "isNullable": false,
                      "_": 3859,
                      "source": " \"SIGCONT\""
                    },
                    {
                      "core": "\"SIGEMT\"",
                      "isNullable": false,
                      "_": 3860,
                      "source": " \"SIGEMT\""
                    },
                    {
                      "core": "\"SIGFPE\"",
                      "isNullable": false,
                      "_": 3861,
                      "source": " \"SIGFPE\""
                    },
                    {
                      "core": "\"SIGHUP\"",
                      "isNullable": false,
                      "_": 3862,
                      "source": " \"SIGHUP\""
                    },
                    {
                      "core": "\"SIGILL\"",
                      "isNullable": false,
                      "_": 3863,
                      "source": " \"SIGILL\""
                    },
                    {
                      "core": "\"SIGINFO\"",
                      "isNullable": false,
                      "_": 3864,
                      "source": " \"SIGINFO\""
                    },
                    {
                      "core": "\"SIGINT\"",
                      "isNullable": false,
                      "_": 3865,
                      "source": " \"SIGINT\""
                    },
                    {
                      "core": "\"SIGIO\"",
                      "isNullable": false,
                      "_": 3866,
                      "source": " \"SIGIO\""
                    },
                    {
                      "core": "\"SIGKILL\"",
                      "isNullable": false,
                      "_": 3867,
                      "source": " \"SIGKILL\""
                    },
                    {
                      "core": "\"SIGPIPE\"",
                      "isNullable": false,
                      "_": 3868,
                      "source": " \"SIGPIPE\""
                    },
                    {
                      "core": "\"SIGPROF\"",
                      "isNullable": false,
                      "_": 3869,
                      "source": " \"SIGPROF\""
                    },
                    {
                      "core": "\"SIGPWR\"",
                      "isNullable": false,
                      "_": 3870,
                      "source": " \"SIGPWR\""
                    },
                    {
                      "core": "\"SIGQUIT\"",
                      "isNullable": false,
                      "_": 3871,
                      "source": " \"SIGQUIT\""
                    },
                    {
                      "core": "\"SIGSEGV\"",
                      "isNullable": false,
                      "_": 3872,
                      "source": " \"SIGSEGV\""
                    },
                    {
                      "core": "\"SIGSTKFLT\"",
                      "isNullable": false,
                      "_": 3873,
                      "source": " \"SIGSTKFLT\""
                    },
                    {
                      "core": "\"SIGSTOP\"",
                      "isNullable": false,
                      "_": 3874,
                      "source": " \"SIGSTOP\""
                    },
                    {
                      "core": "\"SIGSYS\"",
                      "isNullable": false,
                      "_": 3875,
                      "source": " \"SIGSYS\""
                    },
                    {
                      "core": "\"SIGTERM\"",
                      "isNullable": false,
                      "_": 3876,
                      "source": " \"SIGTERM\""
                    },
                    {
                      "core": "\"SIGTRAP\"",
                      "isNullable": false,
                      "_": 3877,
                      "source": " \"SIGTRAP\""
                    },
                    {
                      "core": "\"SIGTSTP\"",
                      "isNullable": false,
                      "_": 3878,
                      "source": " \"SIGTSTP\""
                    },
                    {
                      "core": "\"SIGTTIN\"",
                      "isNullable": false,
                      "_": 3879,
                      "source": " \"SIGTTIN\""
                    },
                    {
                      "core": "\"SIGTTOU\"",
                      "isNullable": false,
                      "_": 3880,
                      "source": " \"SIGTTOU\""
                    },
                    {
                      "core": "\"SIGURG\"",
                      "isNullable": false,
                      "_": 3881,
                      "source": " \"SIGURG\""
                    },
                    {
                      "core": "\"SIGUSR1\"",
                      "isNullable": false,
                      "_": 3882,
                      "source": " \"SIGUSR1\""
                    },
                    {
                      "core": "\"SIGUSR2\"",
                      "isNullable": false,
                      "_": 3883,
                      "source": " \"SIGUSR2\""
                    },
                    {
                      "core": "\"SIGVTALRM\"",
                      "isNullable": false,
                      "_": 3884,
                      "source": " \"SIGVTALRM\""
                    },
                    {
                      "core": "\"SIGWINCH\"",
                      "isNullable": false,
                      "_": 3885,
                      "source": " \"SIGWINCH\""
                    },
                    {
                      "core": "\"SIGXCPU\"",
                      "isNullable": false,
                      "_": 3886,
                      "source": " \"SIGXCPU\""
                    },
                    {
                      "core": "\"SIGXFSZ\"",
                      "isNullable": false,
                      "_": 3887,
                      "source": " \"SIGXFSZ\""
                    }
                  ],
                  "isNullable": false,
                  "_": 3854,
                  "source": "\n    | \"SIGABRT\"\n    | \"SIGALRM\"\n    | \"SIGBREAK\"\n    | \"SIGBUS\"\n    | \"SIGCHLD\"\n    | \"SIGCONT\"\n    | \"SIGEMT\"\n    | \"SIGFPE\"\n    | \"SIGHUP\"\n    | \"SIGILL\"\n    | \"SIGINFO\"\n    | \"SIGINT\"\n    | \"SIGIO\"\n    | \"SIGKILL\"\n    | \"SIGPIPE\"\n    | \"SIGPROF\"\n    | \"SIGPWR\"\n    | \"SIGQUIT\"\n    | \"SIGSEGV\"\n    | \"SIGSTKFLT\"\n    | \"SIGSTOP\"\n    | \"SIGSYS\"\n    | \"SIGTERM\"\n    | \"SIGTRAP\"\n    | \"SIGTSTP\"\n    | \"SIGTTIN\"\n    | \"SIGTTOU\"\n    | \"SIGURG\"\n    | \"SIGUSR1\"\n    | \"SIGUSR2\"\n    | \"SIGVTALRM\"\n    | \"SIGWINCH\"\n    | \"SIGXCPU\"\n    | \"SIGXFSZ\"",
                  "parent": "Signal"
                },
                "doc": "Operating signals which can be listened for or sent to sub-processes. What\nsignals and what their standard behaviors are OS dependent.",
                "_": 3853,
                "source": "\n\n  /** Operating signals which can be listened for or sent to sub-processes. What\n   * signals and what their standard behaviors are OS dependent.\n   *\n   * @category Runtime Environment */\n  export type Signal =\n    | \"SIGABRT\"\n    | \"SIGALRM\"\n    | \"SIGBREAK\"\n    | \"SIGBUS\"\n    | \"SIGCHLD\"\n    | \"SIGCONT\"\n    | \"SIGEMT\"\n    | \"SIGFPE\"\n    | \"SIGHUP\"\n    | \"SIGILL\"\n    | \"SIGINFO\"\n    | \"SIGINT\"\n    | \"SIGIO\"\n    | \"SIGKILL\"\n    | \"SIGPIPE\"\n    | \"SIGPROF\"\n    | \"SIGPWR\"\n    | \"SIGQUIT\"\n    | \"SIGSEGV\"\n    | \"SIGSTKFLT\"\n    | \"SIGSTOP\"\n    | \"SIGSYS\"\n    | \"SIGTERM\"\n    | \"SIGTRAP\"\n    | \"SIGTSTP\"\n    | \"SIGTTIN\"\n    | \"SIGTTOU\"\n    | \"SIGURG\"\n    | \"SIGUSR1\"\n    | \"SIGUSR2\"\n    | \"SIGVTALRM\"\n    | \"SIGWINCH\"\n    | \"SIGXCPU\"\n    | \"SIGXFSZ\";"
              },
              {
                "name": "PermissionName",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"run\"",
                      "isNullable": false,
                      "_": 4279,
                      "source": " \"run\""
                    },
                    {
                      "core": "\"read\"",
                      "isNullable": false,
                      "_": 4280,
                      "source": " \"read\""
                    },
                    {
                      "core": "\"write\"",
                      "isNullable": false,
                      "_": 4281,
                      "source": " \"write\""
                    },
                    {
                      "core": "\"net\"",
                      "isNullable": false,
                      "_": 4282,
                      "source": " \"net\""
                    },
                    {
                      "core": "\"env\"",
                      "isNullable": false,
                      "_": 4283,
                      "source": " \"env\""
                    },
                    {
                      "core": "\"sys\"",
                      "isNullable": false,
                      "_": 4284,
                      "source": " \"sys\""
                    },
                    {
                      "core": "\"ffi\"",
                      "isNullable": false,
                      "_": 4285,
                      "source": " \"ffi\""
                    },
                    {
                      "core": "\"hrtime\"",
                      "isNullable": false,
                      "_": 4286,
                      "source": " \"hrtime\""
                    }
                  ],
                  "isNullable": false,
                  "_": 4279,
                  "source": "\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"sys\"\n    | \"ffi\"\n    | \"hrtime\"",
                  "parent": "PermissionName"
                },
                "doc": "The name of a privileged feature which needs permission.",
                "_": 4278,
                "source": "\n\n  /** The name of a privileged feature which needs permission.\n   *\n   * @category Permissions\n   */\n  export type PermissionName =\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"sys\"\n    | \"ffi\"\n    | \"hrtime\";"
              },
              {
                "name": "PermissionState",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"granted\"",
                      "isNullable": false,
                      "_": 4296,
                      "source": " \"granted\""
                    },
                    {
                      "core": "\"denied\"",
                      "isNullable": false,
                      "_": 4296,
                      "source": " \"denied\""
                    },
                    {
                      "core": "\"prompt\"",
                      "isNullable": false,
                      "_": 4296,
                      "source": " \"prompt\""
                    }
                  ],
                  "isNullable": false,
                  "_": 4296,
                  "source": " \"granted\" | \"denied\" | \"prompt\"",
                  "parent": "PermissionState"
                },
                "doc": "The current status of the permission:\n\n- `\"granted\"` - the permission has been granted.\n- `\"denied\"` - the permission has been explicitly denied.\n- `\"prompt\"` - the permission has not explicitly granted nor denied.",
                "_": 4296,
                "source": "\n\n  /** The current status of the permission:\n   *\n   * - `\"granted\"` - the permission has been granted.\n   * - `\"denied\"` - the permission has been explicitly denied.\n   * - `\"prompt\"` - the permission has not explicitly granted nor denied.\n   *\n   * @category Permissions\n   */\n  export type PermissionState = \"granted\" | \"denied\" | \"prompt\";"
              },
              {
                "name": "PermissionDescriptor",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "RunPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4428,
                      "source": " RunPermissionDescriptor"
                    },
                    {
                      "ref": "ReadPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4429,
                      "source": " ReadPermissionDescriptor"
                    },
                    {
                      "ref": "WritePermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4430,
                      "source": " WritePermissionDescriptor"
                    },
                    {
                      "ref": "NetPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4431,
                      "source": " NetPermissionDescriptor"
                    },
                    {
                      "ref": "EnvPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4432,
                      "source": " EnvPermissionDescriptor"
                    },
                    {
                      "ref": "SysPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4433,
                      "source": " SysPermissionDescriptor"
                    },
                    {
                      "ref": "FfiPermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4434,
                      "source": " FfiPermissionDescriptor"
                    },
                    {
                      "ref": "HrtimePermissionDescriptor",
                      "targs": [],
                      "isNullable": false,
                      "_": 4435,
                      "source": " HrtimePermissionDescriptor"
                    }
                  ],
                  "isNullable": false,
                  "_": 4428,
                  "source": "\n    | RunPermissionDescriptor\n    | ReadPermissionDescriptor\n    | WritePermissionDescriptor\n    | NetPermissionDescriptor\n    | EnvPermissionDescriptor\n    | SysPermissionDescriptor\n    | FfiPermissionDescriptor\n    | HrtimePermissionDescriptor",
                  "parent": "PermissionDescriptor"
                },
                "doc": "Permission descriptors which define a permission and can be queried,\nrequested, or revoked.\n\nView the specifics of the individual descriptors for more information about\neach permission kind.",
                "_": 4427,
                "source": "\n\n  /** Permission descriptors which define a permission and can be queried,\n   * requested, or revoked.\n   *\n   * View the specifics of the individual descriptors for more information about\n   * each permission kind.\n   *\n   * @category Permissions\n   */\n  export type PermissionDescriptor =\n    | RunPermissionDescriptor\n    | ReadPermissionDescriptor\n    | WritePermissionDescriptor\n    | NetPermissionDescriptor\n    | EnvPermissionDescriptor\n    | SysPermissionDescriptor\n    | FfiPermissionDescriptor\n    | HrtimePermissionDescriptor;"
              },
              {
                "name": "RecordType",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"A\"",
                      "isNullable": false,
                      "_": 5204,
                      "source": " \"A\""
                    },
                    {
                      "core": "\"AAAA\"",
                      "isNullable": false,
                      "_": 5205,
                      "source": " \"AAAA\""
                    },
                    {
                      "core": "\"ANAME\"",
                      "isNullable": false,
                      "_": 5206,
                      "source": " \"ANAME\""
                    },
                    {
                      "core": "\"CAA\"",
                      "isNullable": false,
                      "_": 5207,
                      "source": " \"CAA\""
                    },
                    {
                      "core": "\"CNAME\"",
                      "isNullable": false,
                      "_": 5208,
                      "source": " \"CNAME\""
                    },
                    {
                      "core": "\"MX\"",
                      "isNullable": false,
                      "_": 5209,
                      "source": " \"MX\""
                    },
                    {
                      "core": "\"NAPTR\"",
                      "isNullable": false,
                      "_": 5210,
                      "source": " \"NAPTR\""
                    },
                    {
                      "core": "\"NS\"",
                      "isNullable": false,
                      "_": 5211,
                      "source": " \"NS\""
                    },
                    {
                      "core": "\"PTR\"",
                      "isNullable": false,
                      "_": 5212,
                      "source": " \"PTR\""
                    },
                    {
                      "core": "\"SOA\"",
                      "isNullable": false,
                      "_": 5213,
                      "source": " \"SOA\""
                    },
                    {
                      "core": "\"SRV\"",
                      "isNullable": false,
                      "_": 5214,
                      "source": " \"SRV\""
                    },
                    {
                      "core": "\"TXT\"",
                      "isNullable": false,
                      "_": 5215,
                      "source": " \"TXT\""
                    }
                  ],
                  "isNullable": false,
                  "_": 5204,
                  "source": "\n    | \"A\"\n    | \"AAAA\"\n    | \"ANAME\"\n    | \"CAA\"\n    | \"CNAME\"\n    | \"MX\"\n    | \"NAPTR\"\n    | \"NS\"\n    | \"PTR\"\n    | \"SOA\"\n    | \"SRV\"\n    | \"TXT\"",
                  "parent": "RecordType"
                },
                "doc": "The type of the resource record to resolve via DNS using\n{@linkcode Deno.resolveDns}.\n\nOnly the listed types are supported currently.",
                "_": 5203,
                "source": "\n\n  /** The type of the resource record to resolve via DNS using\n   * {@linkcode Deno.resolveDns}.\n   *\n   * Only the listed types are supported currently.\n   *\n   * @category Network\n   */\n  export type RecordType =\n    | \"A\"\n    | \"AAAA\"\n    | \"ANAME\"\n    | \"CAA\"\n    | \"CNAME\"\n    | \"MX\"\n    | \"NAPTR\"\n    | \"NS\"\n    | \"PTR\"\n    | \"SOA\"\n    | \"SRV\"\n    | \"TXT\";"
              },
              {
                "name": "Addr",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "NetAddr",
                      "targs": [],
                      "isNullable": false,
                      "_": 8141,
                      "source": " NetAddr"
                    },
                    {
                      "ref": "UnixAddr",
                      "targs": [],
                      "isNullable": false,
                      "_": 8141,
                      "source": " UnixAddr"
                    }
                  ],
                  "isNullable": false,
                  "_": 8141,
                  "source": " NetAddr | UnixAddr",
                  "parent": "Addr"
                },
                "doc": "",
                "_": 8141,
                "source": "\n\n  /** @category Network */\n  export type Addr = NetAddr | UnixAddr;"
              }
            ],
            "modules": [
              {
                "_": 138,
                "namespace": "errors",
                "from": "submodule Deno",
                "items": {
                  "structs": [
                    {
                      "_": 144,
                      "name": "NotFound",
                      "generics": [],
                      "doc": "Raised when the underlying operating system indicates that the file\nwas not found.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 144,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 152,
                      "name": "PermissionDenied",
                      "generics": [],
                      "doc": "Raised when the underlying operating system indicates the current user\nwhich the Deno process is running under does not have the appropriate\npermissions to a file or resource, or the user _did not_ provide required\n`--allow-*` flag.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 152,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 158,
                      "name": "ConnectionRefused",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports that a connection to\na resource is refused.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 158,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 165,
                      "name": "ConnectionReset",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports that a connection has\nbeen reset. With network servers, it can be a _normal_ occurrence where a\nclient will abort a connection instead of properly shutting it down.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 165,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 171,
                      "name": "ConnectionAborted",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports an `ECONNABORTED`\nerror.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 171,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 176,
                      "name": "NotConnected",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports an `ENOTCONN` error.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 176,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 182,
                      "name": "AddrInUse",
                      "generics": [],
                      "doc": "Raised when attempting to open a server listener on an address and port\nthat already has a listener.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 182,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 188,
                      "name": "AddrNotAvailable",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports an `EADDRNOTAVAIL`\nerror.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 188,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 196,
                      "name": "BrokenPipe",
                      "generics": [],
                      "doc": "Raised when trying to write to a resource and a broken pipe error occurs.\nThis can happen when trying to write directly to `stdout` or `stderr`\nand the operating system is unable to pipe the output for a reason\nexternal to the Deno runtime.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 196,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 202,
                      "name": "AlreadyExists",
                      "generics": [],
                      "doc": "Raised when trying to create a resource, like a file, that already\nexits.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 202,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 208,
                      "name": "InvalidData",
                      "generics": [],
                      "doc": "Raised when an operation to returns data that is invalid for the\noperation being performed.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 208,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 214,
                      "name": "TimedOut",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports that an I/O operation\nhas timed out (`ETIMEDOUT`).",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 214,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 221,
                      "name": "Interrupted",
                      "generics": [],
                      "doc": "Raised when the underlying operating system reports an `EINTR` error. In\nmany cases, this underlying IO error will be handled internally within\nDeno, or result in an @{link BadResource} error instead.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 221,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 227,
                      "name": "WouldBlock",
                      "generics": [],
                      "doc": "Raised when the underlying operating system would need to block to\ncomplete but an asynchronous (non-blocking) API is used.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 227,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 233,
                      "name": "WriteZero",
                      "generics": [],
                      "doc": "Raised when expecting to write to a IO buffer resulted in zero bytes\nbeing written.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 233,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 239,
                      "name": "UnexpectedEof",
                      "generics": [],
                      "doc": "Raised when attempting to read bytes from a resource, but the EOF was\nunexpectedly encountered.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 239,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 245,
                      "name": "BadResource",
                      "generics": [],
                      "doc": "The underlying IO resource is invalid or closed, and so the operation\ncould not be performed.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 245,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 251,
                      "name": "Http",
                      "generics": [],
                      "doc": "Raised in situations where when attempting to load a dynamic import,\ntoo many redirects were encountered.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 251,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 257,
                      "name": "Busy",
                      "generics": [],
                      "doc": "Raised when the underlying IO resource is not available because it is\nbeing awaited on in another block of code.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 257,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    },
                    {
                      "_": 263,
                      "name": "NotSupported",
                      "generics": [],
                      "doc": "Raised when the underlying Deno API is asked to perform a function that\nis not currently supported.",
                      "heritage": [
                        [
                          {
                            "ref": "Error",
                            "targs": [],
                            "isNullable": false,
                            "_": 263,
                            "source": " Error"
                          }
                        ]
                      ],
                      "isInline": false,
                      "parent": "",
                      "source": "",
                      "indexes": [],
                      "ctors": [],
                      "members": [],
                      "calls": [],
                      "isClass": true
                    }
                  ],
                  "typedefs": [],
                  "modules": [],
                  "funcs": [],
                  "vars": [],
                  "enums": []
                }
              }
            ],
            "funcs": [
              {
                "_": 307,
                "name": "memoryUsage",
                "type": {
                  "ref": "MemoryUsage",
                  "targs": [],
                  "isNullable": false,
                  "_": 307,
                  "source": " MemoryUsage"
                },
                "generics": [],
                "doc": "Returns an object describing the memory usage of the Deno process and the\nV8 subsystem measured in bytes.",
                "params": [],
                "source": "\n\n  /**\n   * Returns an object describing the memory usage of the Deno process and the\n   * V8 subsystem measured in bytes.\n   *\n   * @category Runtime Environment\n   */\n  export function memoryUsage(): MemoryUsage;"
              },
              {
                "_": 321,
                "name": "hostname",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 321,
                  "source": " string"
                },
                "generics": [],
                "doc": "Get the `hostname` of the machine the Deno process is running on.\n\n```ts\nconsole.log(Deno.hostname());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Get the `hostname` of the machine the Deno process is running on.\n   *\n   * ```ts\n   * console.log(Deno.hostname());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function hostname(): string;"
              },
              {
                "_": 341,
                "name": "loadavg",
                "type": {
                  "core": "array",
                  "targs": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 341,
                      "source": " number"
                    }
                  ],
                  "isNullable": false,
                  "_": 341,
                  "source": " number[]"
                },
                "generics": [],
                "doc": "Returns an array containing the 1, 5, and 15 minute load averages. The\nload average is a measure of CPU and IO utilization of the last one, five,\nand 15 minute periods expressed as a fractional number.  Zero means there\nis no load. On Windows, the three values are always the same and represent\nthe current load, not the 1, 5 and 15 minute load averages.\n\n```ts\nconsole.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n```\n\nRequires `allow-sys` permission.\n\nOn Windows there is no API available to retrieve this information and this method returns `[ 0, 0, 0 ]`.",
                "params": [],
                "source": "\n\n  /**\n   * Returns an array containing the 1, 5, and 15 minute load averages. The\n   * load average is a measure of CPU and IO utilization of the last one, five,\n   * and 15 minute periods expressed as a fractional number.  Zero means there\n   * is no load. On Windows, the three values are always the same and represent\n   * the current load, not the 1, 5 and 15 minute load averages.\n   *\n   * ```ts\n   * console.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * On Windows there is no API available to retrieve this information and this method returns `[ 0, 0, 0 ]`.\n   *\n   * @tags allow-sys\n   * @category Observability\n   */\n  export function loadavg(): number[];"
              },
              {
                "_": 378,
                "name": "networkInterfaces",
                "type": {
                  "core": "array",
                  "targs": [
                    {
                      "ref": "NetworkInterfaceInfo",
                      "targs": [],
                      "isNullable": false,
                      "_": 378,
                      "source": " NetworkInterfaceInfo"
                    }
                  ],
                  "isNullable": false,
                  "_": 378,
                  "source": " NetworkInterfaceInfo[]"
                },
                "generics": [],
                "doc": "Returns an array of the network interface information.\n\n```ts\nconsole.log(Deno.networkInterfaces());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Returns an array of the network interface information.\n   *\n   * ```ts\n   * console.log(Deno.networkInterfaces());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Network\n   */\n  export function networkInterfaces(): NetworkInterfaceInfo[];"
              },
              {
                "_": 395,
                "name": "systemMemoryInfo",
                "type": {
                  "ref": "SystemMemoryInfo",
                  "targs": [],
                  "isNullable": false,
                  "_": 395,
                  "source": " SystemMemoryInfo"
                },
                "generics": [],
                "doc": "Displays the total amount of free and used physical and swap memory in the\nsystem, as well as the buffers and caches used by the kernel.\n\nThis is similar to the `free` command in Linux\n\n```ts\nconsole.log(Deno.systemMemoryInfo());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Displays the total amount of free and used physical and swap memory in the\n   * system, as well as the buffers and caches used by the kernel.\n   *\n   * This is similar to the `free` command in Linux\n   *\n   * ```ts\n   * console.log(Deno.systemMemoryInfo());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function systemMemoryInfo(): SystemMemoryInfo;"
              },
              {
                "_": 449,
                "name": "osRelease",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 449,
                  "source": " string"
                },
                "generics": [],
                "doc": "Returns the release version of the Operating System.\n\n```ts\nconsole.log(Deno.osRelease());\n```\n\nRequires `allow-sys` permission.\nUnder consideration to possibly move to Deno.build or Deno.versions and if\nit should depend sys-info, which may not be desirable.",
                "params": [],
                "source": "\n\n  /**\n   * Returns the release version of the Operating System.\n   *\n   * ```ts\n   * console.log(Deno.osRelease());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   * Under consideration to possibly move to Deno.build or Deno.versions and if\n   * it should depend sys-info, which may not be desirable.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function osRelease(): string;"
              },
              {
                "_": 463,
                "name": "osUptime",
                "type": {
                  "core": "number",
                  "isNullable": false,
                  "_": 463,
                  "source": " number"
                },
                "generics": [],
                "doc": "Returns the Operating System uptime in number of seconds.\n\n```ts\nconsole.log(Deno.osUptime());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Returns the Operating System uptime in number of seconds.\n   *\n   * ```ts\n   * console.log(Deno.osUptime());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function osUptime(): number;"
              },
              {
                "_": 827,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 827,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "t",
                    "type": {
                      "ref": "TestDefinition",
                      "targs": [],
                      "isNullable": false,
                      "_": 827,
                      "source": " TestDefinition"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.test({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(t: TestDefinition): void;"
              },
              {
                "_": 850,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 853,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 851,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 852,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 852,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 852,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 852,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 852,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 852,
                      "source": " (t: TestContext) => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\"My test description\", () => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(\"My async test description\", async () => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    name: string,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 876,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 876,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 876,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 876,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 876,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 876,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 876,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 876,
                      "source": " (t: TestContext) => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required. Declared function must have a name.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(function myTestName() {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(async function myOtherTestName() {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(fn: (t: TestContext) => void | Promise<void>): void;"
              },
              {
                "_": 899,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 903,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 900,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "TestDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 901,
                          "source": "TestDefinition"
                        },
                        {
                          "union": [
                            {
                              "core": "\"fn\"",
                              "isNullable": false,
                              "_": 901,
                              "source": " \"fn\""
                            },
                            {
                              "core": "\"name\"",
                              "isNullable": false,
                              "_": 901,
                              "source": " \"name\""
                            }
                          ],
                          "isNullable": false,
                          "_": 901,
                          "source": " \"fn\" | \"name\""
                        }
                      ],
                      "isNullable": false,
                      "_": 901,
                      "source": " Omit<TestDefinition, \"fn\" | \"name\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 902,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 902,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 902,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 902,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 902,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 902,
                      "source": " (t: TestContext) => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    name: string,\n    options: Omit<TestDefinition, \"fn\" | \"name\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 938,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 941,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "TestDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 939,
                          "source": "TestDefinition"
                        },
                        {
                          "core": "\"fn\"",
                          "isNullable": false,
                          "_": 939,
                          "source": " \"fn\""
                        }
                      ],
                      "isNullable": false,
                      "_": 939,
                      "source": " Omit<TestDefinition, \"fn\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 940,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 940,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 940,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 940,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 940,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 940,
                      "source": " (t: TestContext) => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\n   *   {\n   *     name: \"My test description\",\n   *     permissions: { read: true },\n   *   },\n   *   () => {\n   *     assertEquals(\"hello\", \"hello\");\n   *   },\n   * );\n   *\n   * Deno.test(\n   *   {\n   *     name: \"My async test description\",\n   *     permissions: { read: false },\n   *   },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   },\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    options: Omit<TestDefinition, \"fn\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 970,
                "name": "test",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 973,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n name: \"example test\",\n fn() {\n   assertEquals(\"world\", \"world\");\n },\n});\n\nDeno.test({\n name: \"example ignored test\",\n ignore: Deno.build.os === \"windows\",\n fn() {\n   // This test is ignored only on Windows machines\n },\n});\n\nDeno.test({\n name: \"example async test\",\n async fn() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n }\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", () => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(function myTestName() {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n const decoder = new TextDecoder(\"utf-8\");\n const data = await Deno.readFile(\"hello_world.txt\");\n assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n {\n   name: \"My test description\",\n   permissions: { read: true },\n },\n () => {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n {\n   name: \"My async test description\",\n   permissions: { read: false },\n },\n async () => {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```\nRegister a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\n { permissions: { read: true } },\n function myTestName() {\n   assertEquals(\"hello\", \"hello\");\n },\n);\n\nDeno.test(\n { permissions: { read: false } },\n async function myOtherTestName() {\n   const decoder = new TextDecoder(\"utf-8\");\n   const data = await Deno.readFile(\"hello_world.txt\");\n   assertEquals(decoder.decode(data), \"Hello world\");\n },\n);\n```",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "TestDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 971,
                          "source": "TestDefinition"
                        },
                        {
                          "union": [
                            {
                              "core": "\"fn\"",
                              "isNullable": false,
                              "_": 971,
                              "source": " \"fn\""
                            },
                            {
                              "core": "\"name\"",
                              "isNullable": false,
                              "_": 971,
                              "source": " \"name\""
                            }
                          ],
                          "isNullable": false,
                          "_": 971,
                          "source": " \"fn\" | \"name\""
                        }
                      ],
                      "isNullable": false,
                      "_": 971,
                      "source": " Omit<TestDefinition, \"fn\" | \"name\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 972,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 972,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 972,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 972,
                        "source": " void | Promise<void>"
                      },
                      "params": [
                        {
                          "name": "t",
                          "type": {
                            "ref": "TestContext",
                            "targs": [],
                            "isNullable": false,
                            "_": 972,
                            "source": " TestContext"
                          },
                          "varargs": false,
                          "isNullable": false
                        }
                      ],
                      "isNullable": false,
                      "_": 972,
                      "source": " (t: TestContext) => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module.\n   *\n   * `fn` can be async if required. Declared function must have a name.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.test(\n   *   { permissions: { read: true } },\n   *   function myTestName() {\n   *     assertEquals(\"hello\", \"hello\");\n   *   },\n   * );\n   *\n   * Deno.test(\n   *   { permissions: { read: false } },\n   *   async function myOtherTestName() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   },\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function test(\n    options: Omit<TestDefinition, \"fn\" | \"name\">,\n    fn: (t: TestContext) => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 1053,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1053,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "t",
                    "type": {
                      "ref": "BenchDefinition",
                      "targs": [],
                      "isNullable": false,
                      "_": 1053,
                      "source": " BenchDefinition"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench({\n   *   name: \"example test\",\n   *   fn() {\n   *     assertEquals(\"world\", \"world\");\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example ignored test\",\n   *   ignore: Deno.build.os === \"windows\",\n   *   fn() {\n   *     // This test is ignored only on Windows machines\n   *   },\n   * });\n   *\n   * Deno.bench({\n   *   name: \"example async test\",\n   *   async fn() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(t: BenchDefinition): void;"
              },
              {
                "_": 1078,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1081,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1079,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 1080,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 1080,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 1080,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 1080,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1080,
                      "source": " () => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\"My test description\", () => {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(\"My async test description\", async () => {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    fn: () => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 1106,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1106,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 1106,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 1106,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 1106,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 1106,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1106,
                      "source": " () => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(function myTestName() {\n   *   assertEquals(\"hello\", \"hello\");\n   * });\n   *\n   * Deno.bench(async function myOtherTestName() {\n   *   const decoder = new TextDecoder(\"utf-8\");\n   *   const data = await Deno.readFile(\"hello_world.txt\");\n   *   assertEquals(decoder.decode(data), \"Hello world\");\n   * });\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(fn: () => void | Promise<void>): void;"
              },
              {
                "_": 1139,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1143,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1140,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "BenchDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 1141,
                          "source": "BenchDefinition"
                        },
                        {
                          "union": [
                            {
                              "core": "\"fn\"",
                              "isNullable": false,
                              "_": 1141,
                              "source": " \"fn\""
                            },
                            {
                              "core": "\"name\"",
                              "isNullable": false,
                              "_": 1141,
                              "source": " \"name\""
                            }
                          ],
                          "isNullable": false,
                          "_": 1141,
                          "source": " \"fn\" | \"name\""
                        }
                      ],
                      "isNullable": false,
                      "_": 1141,
                      "source": " Omit<BenchDefinition, \"fn\" | \"name\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 1142,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 1142,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 1142,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 1142,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1142,
                      "source": " () => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   \"My test description\",\n   *   { permissions: { read: true } },\n   *   () => {\n   *    assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   \"My async test description\",\n   *   { permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    name: string,\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: () => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 1174,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1177,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "BenchDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 1175,
                          "source": "BenchDefinition"
                        },
                        {
                          "core": "\"fn\"",
                          "isNullable": false,
                          "_": 1175,
                          "source": " \"fn\""
                        }
                      ],
                      "isNullable": false,
                      "_": 1175,
                      "source": " Omit<BenchDefinition, \"fn\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 1176,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 1176,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 1176,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 1176,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1176,
                      "source": " () => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   { name: \"My test description\", permissions: { read: true } },\n   *   () => {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { name: \"My async test description\", permissions: { read: false } },\n   *   async () => {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\">,\n    fn: () => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 1208,
                "name": "bench",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1211,
                  "source": " void"
                },
                "generics": [],
                "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\nRegister a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "Omit",
                      "targs": [
                        {
                          "ref": "BenchDefinition",
                          "targs": [],
                          "isNullable": false,
                          "_": 1209,
                          "source": "BenchDefinition"
                        },
                        {
                          "union": [
                            {
                              "core": "\"fn\"",
                              "isNullable": false,
                              "_": 1209,
                              "source": " \"fn\""
                            },
                            {
                              "core": "\"name\"",
                              "isNullable": false,
                              "_": 1209,
                              "source": " \"name\""
                            }
                          ],
                          "isNullable": false,
                          "_": 1209,
                          "source": " \"fn\" | \"name\""
                        }
                      ],
                      "isNullable": false,
                      "_": 1209,
                      "source": " Omit<BenchDefinition, \"fn\" | \"name\">"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "fn",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "union": [
                          {
                            "core": "void",
                            "isNullable": false,
                            "_": 1210,
                            "source": " void"
                          },
                          {
                            "ref": "Promise",
                            "targs": [
                              {
                                "core": "void",
                                "isNullable": false,
                                "_": 1210,
                                "source": "void"
                              }
                            ],
                            "isNullable": false,
                            "_": 1210,
                            "source": " Promise<void>"
                          }
                        ],
                        "isNullable": false,
                        "_": 1210,
                        "source": " void | Promise<void>"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 1210,
                      "source": " () => void | Promise<void>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Register a benchmark test which will be run when `deno bench` is used on\n   * the command line and the containing module looks like a bench module.\n   *\n   * If the test function (`fn`) returns a promise or is async, the test runner\n   * will await resolution to consider the test complete.\n   *\n   * ```ts\n   * import { assertEquals } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * Deno.bench(\n   *   { permissions: { read: true } },\n   *   function myTestName() {\n   *     assertEquals(\"hello\", \"hello\");\n   *   }\n   * );\n   *\n   * Deno.bench(\n   *   { permissions: { read: false } },\n   *   async function myOtherTestName() {\n   *     const decoder = new TextDecoder(\"utf-8\");\n   *     const data = await Deno.readFile(\"hello_world.txt\");\n   *     assertEquals(decoder.decode(data), \"Hello world\");\n   *   }\n   * );\n   * ```\n   *\n   * @category Testing\n   */\n  export function bench(\n    options: Omit<BenchDefinition, \"fn\" | \"name\">,\n    fn: () => void | Promise<void>,\n  ): void;"
              },
              {
                "_": 1225,
                "name": "exit",
                "type": {
                  "core": "never",
                  "isNullable": false,
                  "_": 1225,
                  "source": " never"
                },
                "generics": [],
                "doc": "Exit the Deno process with optional exit code.\n\nIf no exit code is supplied then Deno will exit with return code of `0`.\n\nIn worker contexts this is an alias to `self.close();`.\n\n```ts\nDeno.exit(5);\n```",
                "params": [
                  {
                    "name": "code",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1225,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Exit the Deno process with optional exit code.\n   *\n   * If no exit code is supplied then Deno will exit with return code of `0`.\n   *\n   * In worker contexts this is an alias to `self.close();`.\n   *\n   * ```ts\n   * Deno.exit(5);\n   * ```\n   *\n   * @category Runtime Environment\n   */\n  export function exit(code?: number): never;"
              },
              {
                "_": 1326,
                "name": "execPath",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 1326,
                  "source": " string"
                },
                "generics": [],
                "doc": "Returns the path to the current deno executable.\n\n```ts\nconsole.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n```\n\nRequires `allow-read` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Returns the path to the current deno executable.\n   *\n   * ```ts\n   * console.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function execPath(): string;"
              },
              {
                "_": 1347,
                "name": "chdir",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1347,
                  "source": " void"
                },
                "generics": [],
                "doc": "Change the current working directory to the specified path.\n\n```ts\nDeno.chdir(\"/home/userA\");\nDeno.chdir(\"../userB\");\nDeno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not found.\n\nThrows {@linkcode Deno.errors.PermissionDenied} if the user does not have\noperating system file access rights.\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "directory",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1347,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 1347,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 1347,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Change the current working directory to the specified path.\n   *\n   * ```ts\n   * Deno.chdir(\"/home/userA\");\n   * Deno.chdir(\"../userB\");\n   * Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not found.\n   *\n   * Throws {@linkcode Deno.errors.PermissionDenied} if the user does not have\n   * operating system file access rights.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function chdir(directory: string | URL): void;"
              },
              {
                "_": 1366,
                "name": "cwd",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 1366,
                  "source": " string"
                },
                "generics": [],
                "doc": "Return a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\n```ts\nconst currentWorkingDirectory = Deno.cwd();\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not available.\n\nRequires `allow-read` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Return a string representing the current working directory.\n   *\n   * If the current directory can be reached via multiple paths (due to symbolic\n   * links), `cwd()` may return any one of them.\n   *\n   * ```ts\n   * const currentWorkingDirectory = Deno.cwd();\n   * ```\n   *\n   * Throws {@linkcode Deno.errors.NotFound} if directory not available.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category Runtime Environment\n   */\n  export function cwd(): string;"
              },
              {
                "_": 1380,
                "name": "link",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 1380,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 1380,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Creates `newpath` as a hard link to `oldpath`.\n\n```ts\nawait Deno.link(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1380,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1380,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * await Deno.link(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function link(oldpath: string, newpath: string): Promise<void>;"
              },
              {
                "_": 1394,
                "name": "linkSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1394,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously creates `newpath` as a hard link to `oldpath`.\n\n```ts\nDeno.linkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1394,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 1394,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously creates `newpath` as a hard link to `oldpath`.\n   *\n   * ```ts\n   * Deno.linkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function linkSync(oldpath: string, newpath: string): void;"
              },
              {
                "_": 1581,
                "name": "copy",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 1585,
                      "source": "number"
                    }
                  ],
                  "isNullable": false,
                  "_": 1585,
                  "source": " Promise<number>"
                },
                "generics": [],
                "doc": "Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\nan error occurs. It resolves to the number of bytes copied or rejects with\nthe first error encountered while copying.",
                "params": [
                  {
                    "name": "src",
                    "type": {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 1582,
                      "source": " Reader"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "dst",
                    "type": {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 1583,
                      "source": " Writer"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "IInline1",
                      "targs": [],
                      "isNullable": false,
                      "_": 1584,
                      "source": " { bufSize?: number }"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\n   * an error occurs. It resolves to the number of bytes copied or rejects with\n   * the first error encountered while copying.\n   *\n   * @deprecated Use\n   * [`copy`](https://deno.land/std/streams/copy.ts?s=copy) from\n   * [`std/streams/copy.ts`](https://deno.land/std/streams/copy.ts)\n   * instead. `Deno.copy` will be removed in the future.\n   *\n   * @category I/O\n   *\n   * @param src The source to copy from\n   * @param dst The destination to copy to\n   * @param options Can be used to tune size of the buffer. Default size is 32kB\n   */\n  export function copy(\n    src: Reader,\n    dst: Writer,\n    options?: { bufSize?: number },\n  ): Promise<number>;"
              },
              {
                "_": 1598,
                "name": "iter",
                "type": {
                  "ref": "AsyncIterableIterator",
                  "targs": [
                    {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1601,
                      "source": "Uint8Array"
                    }
                  ],
                  "isNullable": false,
                  "_": 1601,
                  "source": " AsyncIterableIterator<Uint8Array>"
                },
                "generics": [],
                "doc": "Turns a Reader, `r`, into an async iterator.",
                "params": [
                  {
                    "name": "r",
                    "type": {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 1599,
                      "source": " Reader"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "IInline2",
                      "targs": [],
                      "isNullable": false,
                      "_": 1600,
                      "source": " { bufSize?: number }"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Turns a Reader, `r`, into an async iterator.\n   *\n   * @deprecated Use\n   * [`iterateReader`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReader)\n   * from\n   * [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n   * instead. `Deno.iter` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function iter(\n    r: Reader,\n    options?: { bufSize?: number },\n  ): AsyncIterableIterator<Uint8Array>;"
              },
              {
                "_": 1614,
                "name": "iterSync",
                "type": {
                  "ref": "IterableIterator",
                  "targs": [
                    {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1619,
                      "source": "Uint8Array"
                    }
                  ],
                  "isNullable": false,
                  "_": 1619,
                  "source": " IterableIterator<Uint8Array>"
                },
                "generics": [],
                "doc": "Turns a ReaderSync, `r`, into an iterator.",
                "params": [
                  {
                    "name": "r",
                    "type": {
                      "ref": "ReaderSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 1615,
                      "source": " ReaderSync"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "IInline3",
                      "targs": [],
                      "isNullable": false,
                      "_": 1616,
                      "source": " {\n      bufSize?: number;\n    }"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Turns a ReaderSync, `r`, into an iterator.\n   *\n   * @deprecated Use\n   * [`iterateReaderSync`](https://deno.land/std/streams/iterate_reader.ts?s=iterateReaderSync)\n   * from\n   * [`std/streams/iterate_reader.ts`](https://deno.land/std/streams/iterate_reader.ts)\n   * instead. `Deno.iterSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function iterSync(\n    r: ReaderSync,\n    options?: {\n      bufSize?: number;\n    },\n  ): IterableIterator<Uint8Array>;"
              },
              {
                "_": 1638,
                "name": "open",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "FsFile",
                      "targs": [],
                      "isNullable": false,
                      "_": 1641,
                      "source": "FsFile"
                    }
                  ],
                  "isNullable": false,
                  "_": 1641,
                  "source": " Promise<FsFile>"
                },
                "generics": [],
                "doc": "Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\nfile does not need to previously exist if using the `create` or `createNew`\nopen options. It is the caller's responsibility to close the file when\nfinished with it.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1639,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 1639,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 1639,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "OpenOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1640,
                      "source": " OpenOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\n   * file does not need to previously exist if using the `create` or `createNew`\n   * open options. It is the caller's responsibility to close the file when\n   * finished with it.\n   *\n   * ```ts\n   * const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * file.close();\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function open(\n    path: string | URL,\n    options?: OpenOptions,\n  ): Promise<FsFile>;"
              },
              {
                "_": 1660,
                "name": "openSync",
                "type": {
                  "ref": "FsFile",
                  "targs": [],
                  "isNullable": false,
                  "_": 1660,
                  "source": " FsFile"
                },
                "generics": [],
                "doc": "Synchronously open a file and return an instance of\n{@linkcode Deno.FsFile}. The file does not need to previously exist if\nusing the `create` or `createNew` open options. It is the caller's\nresponsibility to close the file when finished with it.\n\n```ts\nconst file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1660,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 1660,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 1660,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "OpenOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 1660,
                      "source": " OpenOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously open a file and return an instance of\n   * {@linkcode Deno.FsFile}. The file does not need to previously exist if\n   * using the `create` or `createNew` open options. It is the caller's\n   * responsibility to close the file when finished with it.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n   * // Do work with file\n   * file.close();\n   * ```\n   *\n   * Requires `allow-read` and/or `allow-write` permissions depending on\n   * options.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function openSync(path: string | URL, options?: OpenOptions): FsFile;"
              },
              {
                "_": 1674,
                "name": "create",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "FsFile",
                      "targs": [],
                      "isNullable": false,
                      "_": 1674,
                      "source": "FsFile"
                    }
                  ],
                  "isNullable": false,
                  "_": 1674,
                  "source": " Promise<FsFile>"
                },
                "generics": [],
                "doc": "Creates a file if none exists or truncates an existing file and resolves to\nan instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = await Deno.create(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1674,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 1674,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 1674,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Creates a file if none exists or truncates an existing file and resolves to\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = await Deno.create(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function create(path: string | URL): Promise<FsFile>;"
              },
              {
                "_": 1688,
                "name": "createSync",
                "type": {
                  "ref": "FsFile",
                  "targs": [],
                  "isNullable": false,
                  "_": 1688,
                  "source": " FsFile"
                },
                "generics": [],
                "doc": "Creates a file if none exists or truncates an existing file and returns\nan instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = Deno.createSync(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 1688,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 1688,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 1688,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Creates a file if none exists or truncates an existing file and returns\n   *  an instance of {@linkcode Deno.FsFile}.\n   *\n   * ```ts\n   * const file = Deno.createSync(\"/foo/bar.txt\");\n   * ```\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function createSync(path: string | URL): FsFile;"
              },
              {
                "_": 1717,
                "name": "read",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 1717,
                          "source": "number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 1717,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 1717,
                      "source": "number | null"
                    }
                  ],
                  "isNullable": false,
                  "_": 1717,
                  "source": " Promise<number | null>"
                },
                "generics": [],
                "doc": "Read from a resource ID (`rid`) into an array buffer (`buffer`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use\n[`readAll()`](https://deno.land/std/streams/read_all.ts?s=readAll) from\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1717,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "buffer",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1717,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Read from a resource ID (`rid`) into an array buffer (`buffer`).\n   *\n   * Resolves to either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use\n   * [`readAll()`](https://deno.land/std/streams/read_all.ts?s=readAll) from\n   * [`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * const file = await Deno.open(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function read(rid: number, buffer: Uint8Array): Promise<number | null>;"
              },
              {
                "_": 1749,
                "name": "readSync",
                "type": {
                  "union": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 1749,
                      "source": " number"
                    },
                    {
                      "core": "null",
                      "isNullable": false,
                      "_": 1749,
                      "source": " null"
                    }
                  ],
                  "isNullable": false,
                  "_": 1749,
                  "source": " number | null"
                },
                "generics": [],
                "doc": "Synchronously read from a resource ID (`rid`) into an array buffer\n(`buffer`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use\n[`readAllSync()`](https://deno.land/std/streams/read_all.ts?s=readAllSync)\nfrom\n[`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1749,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "buffer",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1749,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously read from a resource ID (`rid`) into an array buffer\n   * (`buffer`).\n   *\n   * Returns either the number of bytes read during the operation or EOF\n   * (`null`) if there was nothing more to read.\n   *\n   * It is possible for a read to successfully return with `0` bytes. This does\n   * not indicate EOF.\n   *\n   * This function is one of the lowest level APIs and most users should not\n   * work with this directly, but rather use\n   * [`readAllSync()`](https://deno.land/std/streams/read_all.ts?s=readAllSync)\n   * from\n   * [`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be read in a single\n   * call.**\n   *\n   * ```ts\n   * // if \"/foo/bar.txt\" contains the text \"hello world\":\n   * const file = Deno.openSync(\"/foo/bar.txt\");\n   * const buf = new Uint8Array(100);\n   * const numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\n   * const text = new TextDecoder().decode(buf);  // \"hello world\"\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function readSync(rid: number, buffer: Uint8Array): number | null;"
              },
              {
                "_": 1772,
                "name": "write",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 1772,
                      "source": "number"
                    }
                  ],
                  "isNullable": false,
                  "_": 1772,
                  "source": " Promise<number>"
                },
                "generics": [],
                "doc": "Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n\nResolves to the number of bytes written. This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather use\n[`writeAll()`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await Deno.write(file.rid, data); // 11\nDeno.close(file.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1772,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1772,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n   *\n   * Resolves to the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather use\n   * [`writeAll()`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n   * [`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * const file = await Deno.open(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = await Deno.write(file.rid, data); // 11\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function write(rid: number, data: Uint8Array): Promise<number>;"
              },
              {
                "_": 1798,
                "name": "writeSync",
                "type": {
                  "core": "number",
                  "isNullable": false,
                  "_": 1798,
                  "source": " number"
                },
                "generics": [],
                "doc": "Synchronously write to the resource ID (`rid`) the contents of the array\nbuffer (`data`).\n\nReturns the number of bytes written. This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather\nuse\n[`writeAllSync()`](https://deno.land/std/streams/write_all.ts?s=writeAllSync)\nfrom\n[`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\ninstead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = Deno.writeSync(file.rid, data); // 11\nDeno.close(file.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1798,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 1798,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously write to the resource ID (`rid`) the contents of the array\n   * buffer (`data`).\n   *\n   * Returns the number of bytes written. This function is one of the lowest\n   * level APIs and most users should not work with this directly, but rather\n   * use\n   * [`writeAllSync()`](https://deno.land/std/streams/write_all.ts?s=writeAllSync)\n   * from\n   * [`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\n   * instead.\n   *\n   * **It is not guaranteed that the full buffer will be written in a single\n   * call.**\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\");\n   * const file = Deno.openSync(\"/foo/bar.txt\", { write: true });\n   * const bytesWritten = Deno.writeSync(file.rid, data); // 11\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function writeSync(rid: number, data: Uint8Array): number;"
              },
              {
                "_": 1841,
                "name": "seek",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 1845,
                      "source": "number"
                    }
                  ],
                  "isNullable": false,
                  "_": 1845,
                  "source": " Promise<number>"
                },
                "generics": [],
                "doc": "Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\nThe call resolves to the new position within the resource (bytes from the start).\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n \"hello.txt\",\n { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = await Deno.open(\n \"hello.txt\",\n { read: true, write: true, truncate: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\nfile.close();\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1842,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "offset",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 1843,
                          "source": " number"
                        },
                        {
                          "core": "bigint",
                          "isNullable": false,
                          "_": 1843,
                          "source": " bigint"
                        }
                      ],
                      "isNullable": false,
                      "_": 1843,
                      "source": " number | bigint"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "whence",
                    "type": {
                      "ref": "SeekMode",
                      "targs": [],
                      "isNullable": false,
                      "_": 1844,
                      "source": " SeekMode"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\n   * The call resolves to the new position within the resource (bytes from the start).\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * await file.read(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * file.close();\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = await Deno.open(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n   * file.close();\n   * ```\n   *\n   * @category I/O\n   */\n  export function seek(\n    rid: number,\n    offset: number | bigint,\n    whence: SeekMode,\n  ): Promise<number>;"
              },
              {
                "_": 1888,
                "name": "seekSync",
                "type": {
                  "core": "number",
                  "isNullable": false,
                  "_": 1892,
                  "source": " number"
                },
                "generics": [],
                "doc": "Synchronously seek a resource ID (`rid`) to the given `offset` under mode\ngiven by `whence`. The new position within the resource (bytes from the\nstart) is returned.\n\n```ts\nconst file = Deno.openSync(\n \"hello.txt\",\n { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\nfile.close();\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\nconst file = Deno.openSync(\n \"hello.txt\",\n { read: true, write: true, truncate: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\nfile.close();\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1889,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "offset",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1890,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "whence",
                    "type": {
                      "ref": "SeekMode",
                      "targs": [],
                      "isNullable": false,
                      "_": 1891,
                      "source": " SeekMode"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously seek a resource ID (`rid`) to the given `offset` under mode\n   * given by `whence`. The new position within the resource (bytes from the\n   * start) is returned.\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // advance cursor 6 bytes\n   * const cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\n   * console.log(cursorPosition);  // 6\n   * const buf = new Uint8Array(100);\n   * file.readSync(buf);\n   * console.log(new TextDecoder().decode(buf)); // \"world\"\n   * file.close();\n   * ```\n   *\n   * The seek modes work as follows:\n   *\n   * ```ts\n   * // Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n   * const file = Deno.openSync(\n   *   \"hello.txt\",\n   *   { read: true, write: true, truncate: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n   *\n   * // Seek 6 bytes from the start of the file\n   * console.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n   * // Seek 2 more bytes from the current position\n   * console.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n   * // Seek backwards 2 bytes from the end of the file\n   * console.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n   * file.close();\n   * ```\n   *\n   * @category I/O\n   */\n  export function seekSync(\n    rid: number,\n    offset: number,\n    whence: SeekMode,\n  ): number;"
              },
              {
                "_": 1911,
                "name": "fsync",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 1911,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 1911,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Flushes any pending data and metadata operations of the given file stream\nto disk.\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 1);\nawait Deno.fsync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1911,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Flushes any pending data and metadata operations of the given file stream\n   * to disk.\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.ftruncate(file.rid, 1);\n   * await Deno.fsync(file.rid);\n   * console.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n   * ```\n   *\n   * @category I/O\n   */\n  export function fsync(rid: number): Promise<void>;"
              },
              {
                "_": 1930,
                "name": "fsyncSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1930,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously flushes any pending data and metadata operations of the given\nfile stream to disk.\n\n```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 1);\nDeno.fsyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1930,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously flushes any pending data and metadata operations of the given\n   * file stream to disk.\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.ftruncateSync(file.rid, 1);\n   * Deno.fsyncSync(file.rid);\n   * console.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n   * ```\n   *\n   * @category I/O\n   */\n  export function fsyncSync(rid: number): void;"
              },
              {
                "_": 1946,
                "name": "fdatasync",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 1946,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 1946,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Flushes any pending data operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.fdatasync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1946,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Flushes any pending data operations of the given file stream to disk.\n   *  ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.fdatasync(file.rid);\n   * console.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n   * ```\n   *\n   * @category I/O\n   */\n  export function fdatasync(rid: number): Promise<void>;"
              },
              {
                "_": 1964,
                "name": "fdatasyncSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1964,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously flushes any pending data operations of the given file stream\nto disk.\n\n ```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.fdatasyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // Hello World\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1964,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously flushes any pending data operations of the given file stream\n   * to disk.\n   *\n   *  ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true },\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.fdatasyncSync(file.rid);\n   * console.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // Hello World\n   * ```\n   *\n   * @category I/O\n   */\n  export function fdatasyncSync(rid: number): void;"
              },
              {
                "_": 1978,
                "name": "close",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 1978,
                  "source": " void"
                },
                "generics": [],
                "doc": "Close the given resource ID (`rid`) which has been previously opened, such\nas via opening or creating a file. Closing a file when you are finished\nwith it is important to avoid leaking resources.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nDeno.close(file.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 1978,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Close the given resource ID (`rid`) which has been previously opened, such\n   * as via opening or creating a file. Closing a file when you are finished\n   * with it is important to avoid leaking resources.\n   *\n   * ```ts\n   * const file = await Deno.open(\"my_file.txt\");\n   * // do work with \"file\" object\n   * Deno.close(file.rid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function close(rid: number): void;"
              },
              {
                "_": 2303,
                "name": "consoleSize",
                "type": {
                  "ref": "IInline4",
                  "targs": [],
                  "isNullable": false,
                  "_": 2303,
                  "source": " {\n    columns: number;\n    rows: number;\n  }"
                },
                "generics": [],
                "doc": "Gets the size of the console as columns/rows.\n\n```ts\nconst { columns, rows } = Deno.consoleSize();\n```\n\nThis returns the size of the console window as reported by the operating\nsystem. It's not a reflection of how many characters will fit within the\nconsole window, but can be used as part of that calculation.",
                "params": [],
                "source": "\n\n  /** Gets the size of the console as columns/rows.\n   *\n   * ```ts\n   * const { columns, rows } = Deno.consoleSize();\n   * ```\n   *\n   * This returns the size of the console window as reported by the operating\n   * system. It's not a reflection of how many characters will fit within the\n   * console window, but can be used as part of that calculation.\n   *\n   * @category I/O\n   */\n  export function consoleSize(): {\n    columns: number;\n    rows: number;\n  };"
              },
              {
                "_": 2474,
                "name": "isatty",
                "type": {
                  "core": "boolean",
                  "isNullable": false,
                  "_": 2474,
                  "source": " boolean"
                },
                "generics": [],
                "doc": "Check if a given resource id (`rid`) is a TTY (a terminal).\n\n```ts\n// This example is system and context specific\nconst nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\nconst ttyRid = Deno.openSync(\"/dev/tty6\").rid;\nconsole.log(Deno.isatty(nonTTYRid)); // false\nconsole.log(Deno.isatty(ttyRid)); // true\nDeno.close(nonTTYRid);\nDeno.close(ttyRid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2474,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   *  Check if a given resource id (`rid`) is a TTY (a terminal).\n   *\n   * ```ts\n   * // This example is system and context specific\n   * const nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\n   * const ttyRid = Deno.openSync(\"/dev/tty6\").rid;\n   * console.log(Deno.isatty(nonTTYRid)); // false\n   * console.log(Deno.isatty(ttyRid)); // true\n   * Deno.close(nonTTYRid);\n   * Deno.close(ttyRid);\n   * ```\n   *\n   * @category I/O\n   */\n  export function isatty(rid: number): boolean;"
              },
              {
                "_": 2562,
                "name": "readAll",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 2562,
                      "source": "Uint8Array"
                    }
                  ],
                  "isNullable": false,
                  "_": 2562,
                  "source": " Promise<Uint8Array>"
                },
                "generics": [],
                "doc": "Read Reader `r` until EOF (`null`) and resolve to the content as\nUint8Array`.",
                "params": [
                  {
                    "name": "r",
                    "type": {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 2562,
                      "source": " Reader"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Read Reader `r` until EOF (`null`) and resolve to the content as\n   * Uint8Array`.\n   *\n   * @deprecated Use\n   *   [`readAll`](https://deno.land/std/streams/read_all.ts?s=readAll) from\n   *   [`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\n   *   instead. `Deno.readAll` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function readAll(r: Reader): Promise<Uint8Array>;"
              },
              {
                "_": 2576,
                "name": "readAllSync",
                "type": {
                  "ref": "Uint8Array",
                  "targs": [],
                  "isNullable": false,
                  "_": 2576,
                  "source": " Uint8Array"
                },
                "generics": [],
                "doc": "Synchronously reads Reader `r` until EOF (`null`) and returns the content\nas `Uint8Array`.",
                "params": [
                  {
                    "name": "r",
                    "type": {
                      "ref": "ReaderSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2576,
                      "source": " ReaderSync"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously reads Reader `r` until EOF (`null`) and returns the content\n   * as `Uint8Array`.\n   *\n   * @deprecated Use\n   *   [`readAllSync`](https://deno.land/std/streams/read_all.ts?s=readAllSync)\n   *   from\n   *   [`std/streams/read_all.ts`](https://deno.land/std/streams/read_all.ts)\n   *   instead. `Deno.readAllSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function readAllSync(r: ReaderSync): Uint8Array;"
              },
              {
                "_": 2588,
                "name": "writeAll",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2588,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2588,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Write all the content of the array buffer (`arr`) to the writer (`w`).",
                "params": [
                  {
                    "name": "w",
                    "type": {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2588,
                      "source": " Writer"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "arr",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 2588,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Write all the content of the array buffer (`arr`) to the writer (`w`).\n   *\n   * @deprecated Use\n   *   [`writeAll`](https://deno.land/std/streams/write_all.ts?s=writeAll) from\n   *   [`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\n   *   instead. `Deno.writeAll` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function writeAll(w: Writer, arr: Uint8Array): Promise<void>;"
              },
              {
                "_": 2602,
                "name": "writeAllSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2602,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously write all the content of the array buffer (`arr`) to the\nwriter (`w`).",
                "params": [
                  {
                    "name": "w",
                    "type": {
                      "ref": "WriterSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2602,
                      "source": " WriterSync"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "arr",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 2602,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously write all the content of the array buffer (`arr`) to the\n   * writer (`w`).\n   *\n   * @deprecated Use\n   *   [`writeAllSync`](https://deno.land/std/streams/write_all.ts?s=writeAllSync)\n   *   from\n   *   [`std/streams/write_all.ts`](https://deno.land/std/streams/write_all.ts)\n   *   instead. `Deno.writeAllSync` will be removed in the future.\n   *\n   * @category I/O\n   */\n  export function writeAllSync(w: WriterSync, arr: Uint8Array): void;"
              },
              {
                "_": 2643,
                "name": "mkdir",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2646,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2646,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Creates a new directory with the specified path.\n\n```ts\nawait Deno.mkdir(\"new_dir\");\nawait Deno.mkdir(\"nested/directories\", { recursive: true });\nawait Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2644,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2644,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2644,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "MkdirOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2645,
                      "source": " MkdirOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Creates a new directory with the specified path.\n   *\n   * ```ts\n   * await Deno.mkdir(\"new_dir\");\n   * await Deno.mkdir(\"nested/directories\", { recursive: true });\n   * await Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdir(\n    path: string | URL,\n    options?: MkdirOptions,\n  ): Promise<void>;"
              },
              {
                "_": 2663,
                "name": "mkdirSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2663,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously creates a new directory with the specified path.\n\n```ts\nDeno.mkdirSync(\"new_dir\");\nDeno.mkdirSync(\"nested/directories\", { recursive: true });\nDeno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2663,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2663,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2663,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "MkdirOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2663,
                      "source": " MkdirOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously creates a new directory with the specified path.\n   *\n   * ```ts\n   * Deno.mkdirSync(\"new_dir\");\n   * Deno.mkdirSync(\"nested/directories\", { recursive: true });\n   * Deno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n   * ```\n   *\n   * Defaults to throwing error if the directory already exists.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function mkdirSync(path: string | URL, options?: MkdirOptions): void;"
              },
              {
                "_": 2709,
                "name": "makeTempDir",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2709,
                      "source": "string"
                    }
                  ],
                  "isNullable": false,
                  "_": 2709,
                  "source": " Promise<string>"
                },
                "generics": [],
                "doc": "Creates a new temporary directory in the default directory for temporary\nfiles, unless `dir` is specified. Other optional options include\nprefixing and suffixing the directory name with `prefix` and `suffix`\nrespectively.\n\nThis call resolves to the full path to the newly created directory.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\nconst tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "MakeTempOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2709,
                      "source": " MakeTempOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Creates a new temporary directory in the default directory for temporary\n   * files, unless `dir` is specified. Other optional options include\n   * prefixing and suffixing the directory name with `prefix` and `suffix`\n   * respectively.\n   *\n   * This call resolves to the full path to the newly created directory.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDir(options?: MakeTempOptions): Promise<string>;"
              },
              {
                "_": 2733,
                "name": "makeTempDirSync",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 2733,
                  "source": " string"
                },
                "generics": [],
                "doc": "Synchronously creates a new temporary directory in the default directory\nfor temporary files, unless `dir` is specified. Other optional options\ninclude prefixing and suffixing the directory name with `prefix` and\n`suffix` respectively.\n\nThe full path to the newly created directory is returned.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\nconst tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "MakeTempOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2733,
                      "source": " MakeTempOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously creates a new temporary directory in the default directory\n   * for temporary files, unless `dir` is specified. Other optional options\n   * include prefixing and suffixing the directory name with `prefix` and\n   * `suffix` respectively.\n   *\n   * The full path to the newly created directory is returned.\n   *\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\n   * const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDirSync(options?: MakeTempOptions): string;"
              },
              {
                "_": 2757,
                "name": "makeTempFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2757,
                      "source": "string"
                    }
                  ],
                  "isNullable": false,
                  "_": 2757,
                  "source": " Promise<string>"
                },
                "generics": [],
                "doc": "Creates a new temporary file in the default directory for temporary\nfiles, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created file.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\nconst tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "MakeTempOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2757,
                      "source": " MakeTempOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Creates a new temporary file in the default directory for temporary\n   * files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * This call resolves to the full path to the newly created file.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\n   * const tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFile(options?: MakeTempOptions): Promise<string>;"
              },
              {
                "_": 2781,
                "name": "makeTempFileSync",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 2781,
                  "source": " string"
                },
                "generics": [],
                "doc": "Synchronously creates a new temporary file in the default directory for\ntemporary files, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThe full path to the newly created file is returned.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\nconst tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "MakeTempOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2781,
                      "source": " MakeTempOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously creates a new temporary file in the default directory for\n   * temporary files, unless `dir` is specified.\n   *\n   * Other options include prefixing and suffixing the directory name with\n   * `prefix` and `suffix` respectively.\n   *\n   * The full path to the newly created file is returned.\n   *\n   * Multiple programs calling this function simultaneously will create\n   * different files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   * ```ts\n   * const tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\n   * const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function makeTempFileSync(options?: MakeTempOptions): string;"
              },
              {
                "_": 2815,
                "name": "chmod",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2815,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2815,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n```ts\nawait Deno.chmod(\"/path/to/file\", 0o666);\n```\n\nThe mode is a sequence of 3 octal numbers. The first/left-most number\nspecifies the permissions for the owner. The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others. For example, with a mode of 0o764, the owner (7)\ncan read/write/execute, the group (6) can read/write and everyone else (4)\ncan read only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2815,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2815,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2815,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mode",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2815,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Changes the permission of a specific file/directory of specified path.\n   * Ignores the process's umask.\n   *\n   * ```ts\n   * await Deno.chmod(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * The mode is a sequence of 3 octal numbers. The first/left-most number\n   * specifies the permissions for the owner. The second number specifies the\n   * permissions for the group. The last/right-most number specifies the\n   * permissions for others. For example, with a mode of 0o764, the owner (7)\n   * can read/write/execute, the group (6) can read/write and everyone else (4)\n   * can read only.\n   *\n   * | Number | Description |\n   * | ------ | ----------- |\n   * | 7      | read, write, and execute |\n   * | 6      | read and write |\n   * | 5      | read and execute |\n   * | 4      | read only |\n   * | 3      | write and execute |\n   * | 2      | write only |\n   * | 1      | execute only |\n   * | 0      | no permission |\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmod(path: string | URL, mode: number): Promise<void>;"
              },
              {
                "_": 2833,
                "name": "chmodSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2833,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously changes the permission of a specific file/directory of\nspecified path. Ignores the process's umask.\n\n```ts\nDeno.chmodSync(\"/path/to/file\", 0o666);\n```\n\nFor a full description, see {@linkcode Deno.chmod}.\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2833,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2833,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2833,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mode",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 2833,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously changes the permission of a specific file/directory of\n   * specified path. Ignores the process's umask.\n   *\n   * ```ts\n   * Deno.chmodSync(\"/path/to/file\", 0o666);\n   * ```\n   *\n   * For a full description, see {@linkcode Deno.chmod}.\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function chmodSync(path: string | URL, mode: number): void;"
              },
              {
                "_": 2854,
                "name": "chown",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2858,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2858,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nawait Deno.chown(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2855,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2855,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2855,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "uid",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2856,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2856,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2856,
                      "source": " number | null"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "gid",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2857,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2857,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2857,
                      "source": " number | null"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * await Deno.chown(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chown(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): Promise<void>;"
              },
              {
                "_": 2879,
                "name": "chownSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2883,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nDeno.chownSync(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2880,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2880,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2880,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "uid",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2881,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2881,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2881,
                      "source": " number | null"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "gid",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 2882,
                          "source": " number"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 2882,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 2882,
                      "source": " number | null"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously change owner of a regular file or directory.\n   *\n   * This functionality is not available on Windows.\n   *\n   * ```ts\n   * Deno.chownSync(\"myFile.txt\", 1000, 1002);\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * Throws Error (not implemented) if executed on Windows.\n   *\n   * @tags allow-write\n   * @category File System\n   *\n   * @param path path to the file\n   * @param uid user id (UID) of the new owner, or `null` for no change\n   * @param gid group id (GID) of the new owner, or `null` for no change\n   */\n  export function chownSync(\n    path: string | URL,\n    uid: number | null,\n    gid: number | null,\n  ): void;"
              },
              {
                "_": 2912,
                "name": "remove",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2915,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2915,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Removes the named file or directory.\n\n```ts\nawait Deno.remove(\"/path/to/empty_dir/or/file\");\nawait Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2913,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2913,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2913,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "RemoveOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2914,
                      "source": " RemoveOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Removes the named file or directory.\n   *\n   * ```ts\n   * await Deno.remove(\"/path/to/empty_dir/or/file\");\n   * await Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function remove(\n    path: string | URL,\n    options?: RemoveOptions,\n  ): Promise<void>;"
              },
              {
                "_": 2932,
                "name": "removeSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2932,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously removes the named file or directory.\n\n```ts\nDeno.removeSync(\"/path/to/empty_dir/or/file\");\nDeno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2932,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2932,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2932,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "RemoveOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2932,
                      "source": " RemoveOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously removes the named file or directory.\n   *\n   * ```ts\n   * Deno.removeSync(\"/path/to/empty_dir/or/file\");\n   * Deno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n   * ```\n   *\n   * Throws error if permission denied, path not found, or path is a non-empty\n   * directory and the `recursive` option isn't set to `true`.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function removeSync(path: string | URL, options?: RemoveOptions): void;"
              },
              {
                "_": 2953,
                "name": "renameSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 2956,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\ndirectories. If `newpath` already exists and is not a directory,\n`renameSync()` replaces it. OS-specific restrictions may apply when\n`oldpath` and `newpath` are in different directories.\n\n```ts\nDeno.renameSync(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what\nthey are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2954,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2954,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2954,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2955,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2955,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2955,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\n   * directories. If `newpath` already exists and is not a directory,\n   * `renameSync()` replaces it. OS-specific restrictions may apply when\n   * `oldpath` and `newpath` are in different directories.\n   *\n   * ```ts\n   * Deno.renameSync(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so what\n   * they are. It's always an error to rename anything to a non-empty directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function renameSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): void;"
              },
              {
                "_": 2978,
                "name": "rename",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 2981,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 2981,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\nIf `newpath` already exists and is not a directory, `rename()` replaces it.\nOS-specific restrictions may apply when `oldpath` and `newpath` are in\ndifferent directories.\n\n```ts\nawait Deno.rename(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so\nwhat they are. It's always an error to rename anything to a non-empty\ndirectory.\n\nRequires `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2979,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2979,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2979,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2980,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2980,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2980,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\n   * If `newpath` already exists and is not a directory, `rename()` replaces it.\n   * OS-specific restrictions may apply when `oldpath` and `newpath` are in\n   * different directories.\n   *\n   * ```ts\n   * await Deno.rename(\"old/path\", \"new/path\");\n   * ```\n   *\n   * On Unix-like OSes, this operation does not follow symlinks at either path.\n   *\n   * It varies between platforms when the operation throws errors, and if so\n   * what they are. It's always an error to rename anything to a non-empty\n   * directory.\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function rename(\n    oldpath: string | URL,\n    newpath: string | URL,\n  ): Promise<void>;"
              },
              {
                "_": 2996,
                "name": "readTextFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 2999,
                      "source": "string"
                    }
                  ],
                  "isNullable": false,
                  "_": 2999,
                  "source": " Promise<string>"
                },
                "generics": [],
                "doc": "Asynchronously reads and returns the entire contents of a file as an UTF-8\ndecoded string. Reading a directory throws an error.\n\n```ts\nconst data = await Deno.readTextFile(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 2997,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 2997,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 2997,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ReadFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 2998,
                      "source": " ReadFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Asynchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = await Deno.readTextFile(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<string>;"
              },
              {
                "_": 3014,
                "name": "readTextFileSync",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 3014,
                  "source": " string"
                },
                "generics": [],
                "doc": "Synchronously reads and returns the entire contents of a file as an UTF-8\ndecoded string. Reading a directory throws an error.\n\n```ts\nconst data = Deno.readTextFileSync(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3014,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3014,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3014,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously reads and returns the entire contents of a file as an UTF-8\n   *  decoded string. Reading a directory throws an error.\n   *\n   * ```ts\n   * const data = Deno.readTextFileSync(\"hello.txt\");\n   * console.log(data);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readTextFileSync(path: string | URL): string;"
              },
              {
                "_": 3031,
                "name": "readFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 3034,
                      "source": "Uint8Array"
                    }
                  ],
                  "isNullable": false,
                  "_": 3034,
                  "source": " Promise<Uint8Array>"
                },
                "generics": [],
                "doc": "Reads and resolves to the entire contents of a file as an array of bytes.\n`TextDecoder` can be used to transform the bytes to string if required.\nReading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = await Deno.readFile(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3032,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3032,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3032,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ReadFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3033,
                      "source": " ReadFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Reads and resolves to the entire contents of a file as an array of bytes.\n   * `TextDecoder` can be used to transform the bytes to string if required.\n   * Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = await Deno.readFile(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFile(\n    path: string | URL,\n    options?: ReadFileOptions,\n  ): Promise<Uint8Array>;"
              },
              {
                "_": 3051,
                "name": "readFileSync",
                "type": {
                  "ref": "Uint8Array",
                  "targs": [],
                  "isNullable": false,
                  "_": 3051,
                  "source": " Uint8Array"
                },
                "generics": [],
                "doc": "Synchronously reads and returns the entire contents of a file as an array\nof bytes. `TextDecoder` can be used to transform the bytes to string if\nrequired. Reading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = Deno.readFileSync(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3051,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3051,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3051,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously reads and returns the entire contents of a file as an array\n   * of bytes. `TextDecoder` can be used to transform the bytes to string if\n   * required. Reading a directory returns an empty data array.\n   *\n   * ```ts\n   * const decoder = new TextDecoder(\"utf-8\");\n   * const data = Deno.readFileSync(\"hello.txt\");\n   * console.log(decoder.decode(data));\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readFileSync(path: string | URL): Uint8Array;"
              },
              {
                "_": 3140,
                "name": "realPath",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 3140,
                      "source": "string"
                    }
                  ],
                  "isNullable": false,
                  "_": 3140,
                  "source": " Promise<string>"
                },
                "generics": [],
                "doc": "Resolves to the absolute normalized path, with symbolic links resolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nawait Deno.symlink(\"file.txt\", \"symlink_file.txt\");\nconst realPath = await Deno.realPath(\"./file.txt\");\nconst realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3140,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3140,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3140,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Resolves to the absolute normalized path, with symbolic links resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * await Deno.symlink(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = await Deno.realPath(\"./file.txt\");\n   * const realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPath(path: string | URL): Promise<string>;"
              },
              {
                "_": 3162,
                "name": "realPathSync",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 3162,
                  "source": " string"
                },
                "generics": [],
                "doc": "Synchronously returns absolute normalized path, with symbolic links\nresolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nDeno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\nconst realPath = Deno.realPathSync(\"./file.txt\");\nconst realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3162,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3162,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3162,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously returns absolute normalized path, with symbolic links\n   * resolved.\n   *\n   * ```ts\n   * // e.g. given /home/alice/file.txt and current directory /home/alice\n   * Deno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\n   * const realPath = Deno.realPathSync(\"./file.txt\");\n   * const realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\n   * console.log(realPath);  // outputs \"/home/alice/file.txt\"\n   * console.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n   * ```\n   *\n   * Requires `allow-read` permission for the target path.\n   *\n   * Also requires `allow-read` permission for the `CWD` if the target path is\n   * relative.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function realPathSync(path: string | URL): string;"
              },
              {
                "_": 3200,
                "name": "readDir",
                "type": {
                  "ref": "AsyncIterable",
                  "targs": [
                    {
                      "ref": "DirEntry",
                      "targs": [],
                      "isNullable": false,
                      "_": 3200,
                      "source": "DirEntry"
                    }
                  ],
                  "isNullable": false,
                  "_": 3200,
                  "source": " AsyncIterable<DirEntry>"
                },
                "generics": [],
                "doc": "Reads the directory given by `path` and returns an async iterable of\n{@linkcode Deno.DirEntry}.\n\n```ts\nfor await (const dirEntry of Deno.readDir(\"/\")) {\n console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3200,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3200,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3200,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Reads the directory given by `path` and returns an async iterable of\n   * {@linkcode Deno.DirEntry}.\n   *\n   * ```ts\n   * for await (const dirEntry of Deno.readDir(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDir(path: string | URL): AsyncIterable<DirEntry>;"
              },
              {
                "_": 3218,
                "name": "readDirSync",
                "type": {
                  "ref": "Iterable",
                  "targs": [
                    {
                      "ref": "DirEntry",
                      "targs": [],
                      "isNullable": false,
                      "_": 3218,
                      "source": "DirEntry"
                    }
                  ],
                  "isNullable": false,
                  "_": 3218,
                  "source": " Iterable<DirEntry>"
                },
                "generics": [],
                "doc": "Synchronously reads the directory given by `path` and returns an iterable\nof `Deno.DirEntry`.\n\n```ts\nfor (const dirEntry of Deno.readDirSync(\"/\")) {\n console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3218,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3218,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3218,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously reads the directory given by `path` and returns an iterable\n   * of `Deno.DirEntry`.\n   *\n   * ```ts\n   * for (const dirEntry of Deno.readDirSync(\"/\")) {\n   *   console.log(dirEntry.name);\n   * }\n   * ```\n   *\n   * Throws error if `path` is not a directory.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readDirSync(path: string | URL): Iterable<DirEntry>;"
              },
              {
                "_": 3235,
                "name": "copyFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 3238,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 3238,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n```ts\nawait Deno.copyFile(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.",
                "params": [
                  {
                    "name": "fromPath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3236,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3236,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3236,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "toPath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3237,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3237,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3237,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Copies the contents and permissions of one file to another specified path,\n   * by default creating a new file if needed, else overwriting. Fails if target\n   * path is a directory or is unwritable.\n   *\n   * ```ts\n   * await Deno.copyFile(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFile(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): Promise<void>;"
              },
              {
                "_": 3255,
                "name": "copyFileSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3258,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n```ts\nDeno.copyFileSync(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.",
                "params": [
                  {
                    "name": "fromPath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3256,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3256,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3256,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "toPath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3257,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3257,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3257,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously copies the contents and permissions of one file to another\n   * specified path, by default creating a new file if needed, else overwriting.\n   * Fails if target path is a directory or is unwritable.\n   *\n   * ```ts\n   * Deno.copyFileSync(\"from.txt\", \"to.txt\");\n   * ```\n   *\n   * Requires `allow-read` permission on `fromPath`.\n   *\n   * Requires `allow-write` permission on `toPath`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function copyFileSync(\n    fromPath: string | URL,\n    toPath: string | URL,\n  ): void;"
              },
              {
                "_": 3274,
                "name": "readLink",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 3274,
                      "source": "string"
                    }
                  ],
                  "isNullable": false,
                  "_": 3274,
                  "source": " Promise<string>"
                },
                "generics": [],
                "doc": "Resolves to the full path destination of the named symbolic link.\n\n```ts\nawait Deno.symlink(\"./test.txt\", \"./test_link.txt\");\nconst target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3274,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3274,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3274,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Resolves to the full path destination of the named symbolic link.\n   *\n   * ```ts\n   * await Deno.symlink(\"./test.txt\", \"./test_link.txt\");\n   * const target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLink(path: string | URL): Promise<string>;"
              },
              {
                "_": 3291,
                "name": "readLinkSync",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 3291,
                  "source": " string"
                },
                "generics": [],
                "doc": "Synchronously returns the full path destination of the named symbolic\nlink.\n\n```ts\nDeno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\nconst target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3291,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3291,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3291,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously returns the full path destination of the named symbolic\n   * link.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\n   * const target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n   * ```\n   *\n   * Throws TypeError if called with a hard link.\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function readLinkSync(path: string | URL): string;"
              },
              {
                "_": 3308,
                "name": "lstat",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "FileInfo",
                      "targs": [],
                      "isNullable": false,
                      "_": 3308,
                      "source": "FileInfo"
                    }
                  ],
                  "isNullable": false,
                  "_": 3308,
                  "source": " Promise<FileInfo>"
                },
                "generics": [],
                "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned instead\nof what it points to.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.lstat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3308,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3308,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3308,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n   * `path` is a symlink, information for the symlink will be returned instead\n   * of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = await Deno.lstat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstat(path: string | URL): Promise<FileInfo>;"
              },
              {
                "_": 3325,
                "name": "lstatSync",
                "type": {
                  "ref": "FileInfo",
                  "targs": [],
                  "isNullable": false,
                  "_": 3325,
                  "source": " FileInfo"
                },
                "generics": [],
                "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. If `path` is a symlink, information for the symlink will be\nreturned instead of what it points to.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.lstatSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3325,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3325,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3325,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. If `path` is a symlink, information for the symlink will be\n   * returned instead of what it points to.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = Deno.lstatSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function lstatSync(path: string | URL): FileInfo;"
              },
              {
                "_": 3341,
                "name": "stat",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "FileInfo",
                      "targs": [],
                      "isNullable": false,
                      "_": 3341,
                      "source": "FileInfo"
                    }
                  ],
                  "isNullable": false,
                  "_": 3341,
                  "source": " Promise<FileInfo>"
                },
                "generics": [],
                "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\nalways follow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.stat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3341,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3341,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3341,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\n   * always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = await Deno.stat(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function stat(path: string | URL): Promise<FileInfo>;"
              },
              {
                "_": 3357,
                "name": "statSync",
                "type": {
                  "ref": "FileInfo",
                  "targs": [],
                  "isNullable": false,
                  "_": 3357,
                  "source": " FileInfo"
                },
                "generics": [],
                "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. Will always follow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.statSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3357,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3357,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3357,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n   * `path`. Will always follow symlinks.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   * const fileInfo = Deno.statSync(\"hello.txt\");\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function statSync(path: string | URL): FileInfo;"
              },
              {
                "_": 3407,
                "name": "writeFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 3411,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 3411,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Write `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nawait Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nawait Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nawait Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nawait Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3408,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3408,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3408,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "union": [
                        {
                          "ref": "Uint8Array",
                          "targs": [],
                          "isNullable": false,
                          "_": 3409,
                          "source": " Uint8Array"
                        },
                        {
                          "ref": "ReadableStream",
                          "targs": [
                            {
                              "ref": "Uint8Array",
                              "targs": [],
                              "isNullable": false,
                              "_": 3409,
                              "source": "Uint8Array"
                            }
                          ],
                          "isNullable": false,
                          "_": 3409,
                          "source": " ReadableStream<Uint8Array>"
                        }
                      ],
                      "isNullable": false,
                      "_": 3409,
                      "source": " Uint8Array | ReadableStream<Uint8Array>"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "WriteFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3410,
                      "source": " WriteFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Write `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * await Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * await Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * await Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * await Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFile(\n    path: string | URL,\n    data: Uint8Array | ReadableStream<Uint8Array>,\n    options?: WriteFileOptions,\n  ): Promise<void>;"
              },
              {
                "_": 3431,
                "name": "writeFileSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3435,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously write `data` to the given `path`, by default creating a new\nfile if needed, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nDeno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nDeno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nDeno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nDeno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3432,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3432,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3432,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "ref": "Uint8Array",
                      "targs": [],
                      "isNullable": false,
                      "_": 3433,
                      "source": " Uint8Array"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "WriteFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3434,
                      "source": " WriteFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously write `data` to the given `path`, by default creating a new\n   * file if needed, else overwriting.\n   *\n   * ```ts\n   * const encoder = new TextEncoder();\n   * const data = encoder.encode(\"Hello world\\n\");\n   * Deno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\n   * Deno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\n   * Deno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\n   * Deno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeFileSync(\n    path: string | URL,\n    data: Uint8Array,\n    options?: WriteFileOptions,\n  ): void;"
              },
              {
                "_": 3450,
                "name": "writeTextFile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 3454,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 3454,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Write string `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nawait Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3451,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3451,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3451,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3452,
                          "source": " string"
                        },
                        {
                          "ref": "ReadableStream",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3452,
                              "source": "string"
                            }
                          ],
                          "isNullable": false,
                          "_": 3452,
                          "source": " ReadableStream<string>"
                        }
                      ],
                      "isNullable": false,
                      "_": 3452,
                      "source": " string | ReadableStream<string>"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "WriteFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3453,
                      "source": " WriteFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Write string `data` to the given `path`, by default creating a new file if\n   * needed, else overwriting.\n   *\n   * ```ts\n   * await Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFile(\n    path: string | URL,\n    data: string | ReadableStream<string>,\n    options?: WriteFileOptions,\n  ): Promise<void>;"
              },
              {
                "_": 3469,
                "name": "writeTextFileSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3473,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously write string `data` to the given `path`, by default creating\na new file if needed, else overwriting.\n\n```ts\nDeno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3470,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 3470,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 3470,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "data",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3471,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "WriteFileOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3472,
                      "source": " WriteFileOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously write string `data` to the given `path`, by default creating\n   * a new file if needed, else overwriting.\n   *\n   * ```ts\n   * Deno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n   * ```\n   *\n   * Requires `allow-write` permission, and `allow-read` if `options.create` is\n   * `false`.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function writeTextFileSync(\n    path: string | URL,\n    data: string,\n    options?: WriteFileOptions,\n  ): void;"
              },
              {
                "_": 3498,
                "name": "truncate",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 3498,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 3498,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Truncates (or extends) the specified file, to reach the specified `len`.\nIf `len` is not specified then the entire file contents are truncated.\n\n### Truncate the entire file\n```ts\nawait Deno.truncate(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = await Deno.makeTempFile();\nawait Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\nawait Deno.truncate(file, 7);\nconst data = await Deno.readFile(file);\nconsole.log(new TextDecoder().decode(data));  // \"Hello W\"\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3498,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "len",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3498,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Truncates (or extends) the specified file, to reach the specified `len`.\n   * If `len` is not specified then the entire file contents are truncated.\n   *\n   * ### Truncate the entire file\n   * ```ts\n   * await Deno.truncate(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = await Deno.makeTempFile();\n   * await Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.truncate(file, 7);\n   * const data = await Deno.readFile(file);\n   * console.log(new TextDecoder().decode(data));  // \"Hello W\"\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncate(name: string, len?: number): Promise<void>;"
              },
              {
                "_": 3525,
                "name": "truncateSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3525,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously truncates (or extends) the specified file, to reach the\nspecified `len`. If `len` is not specified then the entire file contents\nare truncated.\n\n### Truncate the entire file\n\n```ts\nDeno.truncateSync(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = Deno.makeTempFileSync();\nDeno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\nDeno.truncateSync(file, 7);\nconst data = Deno.readFileSync(file);\nconsole.log(new TextDecoder().decode(data));\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "name",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 3525,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "len",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 3525,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Synchronously truncates (or extends) the specified file, to reach the\n   * specified `len`. If `len` is not specified then the entire file contents\n   * are truncated.\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * Deno.truncateSync(\"my_file.txt\");\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.makeTempFileSync();\n   * Deno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\n   * Deno.truncateSync(file, 7);\n   * const data = Deno.readFileSync(file);\n   * console.log(new TextDecoder().decode(data));\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function truncateSync(name: string, len?: number): void;"
              },
              {
                "_": 3572,
                "name": "metrics",
                "type": {
                  "ref": "Metrics",
                  "targs": [],
                  "isNullable": false,
                  "_": 3572,
                  "source": " Metrics"
                },
                "generics": [],
                "doc": "Receive metrics from the privileged side of Deno. This is primarily used\nin the development of Deno. _Ops_, also called _bindings_, are the\ngo-between between Deno JavaScript sandbox and the rest of Deno.\n\n```shell\n> console.table(Deno.metrics())\nâââââââââââââââââââââââââââ¬âââââââââ\nâ         (index)         â Values â\nâââââââââââââââââââââââââââ¼âââââââââ¤\nâ      opsDispatched      â   3    â\nâ    opsDispatchedSync    â   2    â\nâ   opsDispatchedAsync    â   1    â\nâ opsDispatchedAsyncUnref â   0    â\nâ      opsCompleted       â   3    â\nâ    opsCompletedSync     â   2    â\nâ    opsCompletedAsync    â   1    â\nâ opsCompletedAsyncUnref  â   0    â\nâ    bytesSentControl     â   73   â\nâ      bytesSentData      â   0    â\nâ      bytesReceived      â  375   â\nâââââââââââââââââââââââââââ´âââââââââ\n```",
                "params": [],
                "source": "\n\n  /** Receive metrics from the privileged side of Deno. This is primarily used\n   * in the development of Deno. _Ops_, also called _bindings_, are the\n   * go-between between Deno JavaScript sandbox and the rest of Deno.\n   *\n   * ```shell\n   * > console.table(Deno.metrics())\n   * âââââââââââââââââââââââââââ¬âââââââââ\n   * â         (index)         â Values â\n   * âââââââââââââââââââââââââââ¼âââââââââ¤\n   * â      opsDispatched      â   3    â\n   * â    opsDispatchedSync    â   2    â\n   * â   opsDispatchedAsync    â   1    â\n   * â opsDispatchedAsyncUnref â   0    â\n   * â      opsCompleted       â   3    â\n   * â    opsCompletedSync     â   2    â\n   * â    opsCompletedAsync    â   1    â\n   * â opsCompletedAsyncUnref  â   0    â\n   * â    bytesSentControl     â   73   â\n   * â      bytesSentData      â   0    â\n   * â      bytesReceived      â  375   â\n   * âââââââââââââââââââââââââââ´âââââââââ\n   * ```\n   *\n   * @category Observability\n   */\n  export function metrics(): Metrics;"
              },
              {
                "_": 3598,
                "name": "resources",
                "type": {
                  "ref": "ResourceMap",
                  "targs": [],
                  "isNullable": false,
                  "_": 3598,
                  "source": " ResourceMap"
                },
                "generics": [],
                "doc": "Returns a map of open resource IDs (_rid_) along with their string\nrepresentations. This is an internal API and as such resource\nrepresentation has `unknown` type; that means it can change any time and\nshould not be depended upon.\n\n```ts\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\nDeno.openSync('../test.file');\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n```",
                "params": [],
                "source": "\n\n  /** Returns a map of open resource IDs (_rid_) along with their string\n   * representations. This is an internal API and as such resource\n   * representation has `unknown` type; that means it can change any time and\n   * should not be depended upon.\n   *\n   * ```ts\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\n   * Deno.openSync('../test.file');\n   * console.log(Deno.resources());\n   * // { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n   * ```\n   *\n   * @category Observability\n   */\n  export function resources(): ResourceMap;"
              },
              {
                "_": 3689,
                "name": "watchFs",
                "type": {
                  "ref": "FsWatcher",
                  "targs": [],
                  "isNullable": false,
                  "_": 3692,
                  "source": " FsWatcher"
                },
                "generics": [],
                "doc": "Watch for file system events against one or more `paths`, which can be\nfiles or directories. These paths must exist already. One user action (e.g.\n`touch test.file`) can generate multiple file system events. Likewise,\none user action can result in multiple file paths in one event (e.g. `mv\nold_name.txt new_name.txt`).\n\nThe recursive option is `true` by default and, for directories, will watch\nthe specified directory and all sub directories.\n\nNote that the exact ordering of the events can vary between operating\nsystems.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n  // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n}\n```\n\nCall `watcher.close()` to stop watching.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\n\nsetTimeout(() => {\n watcher.close();\n}, 5000);\n\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n}\n```\n\nRequires `allow-read` permission.",
                "params": [
                  {
                    "name": "paths",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 3690,
                          "source": " string"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 3690,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 3690,
                          "source": " string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 3690,
                      "source": " string | string[]"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "IInline9",
                      "targs": [],
                      "isNullable": false,
                      "_": 3691,
                      "source": " { recursive: boolean }"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Watch for file system events against one or more `paths`, which can be\n   * files or directories. These paths must exist already. One user action (e.g.\n   * `touch test.file`) can generate multiple file system events. Likewise,\n   * one user action can result in multiple file paths in one event (e.g. `mv\n   * old_name.txt new_name.txt`).\n   *\n   * The recursive option is `true` by default and, for directories, will watch\n   * the specified directory and all sub directories.\n   *\n   * Note that the exact ordering of the events can vary between operating\n   * systems.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   *    // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n   * }\n   * ```\n   *\n   * Call `watcher.close()` to stop watching.\n   *\n   * ```ts\n   * const watcher = Deno.watchFs(\"/\");\n   *\n   * setTimeout(() => {\n   *   watcher.close();\n   * }, 5000);\n   *\n   * for await (const event of watcher) {\n   *    console.log(\">>>> event\", event);\n   * }\n   * ```\n   *\n   * Requires `allow-read` permission.\n   *\n   * @tags allow-read\n   * @category File System\n   */\n  export function watchFs(\n    paths: string | string[],\n    options?: { recursive: boolean },\n  ): FsWatcher;"
              },
              {
                "_": 3905,
                "name": "addSignalListener",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3905,
                  "source": " void"
                },
                "generics": [],
                "doc": "Registers the given function as a listener of the given signal event.\n\n```ts\nDeno.addSignalListener(\n \"SIGTERM\",\n () => {\n   console.log(\"SIGTERM!\")\n }\n);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.",
                "params": [
                  {
                    "name": "signal",
                    "type": {
                      "ref": "Signal",
                      "targs": [],
                      "isNullable": false,
                      "_": 3905,
                      "source": " Signal"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "handler",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "core": "void",
                        "isNullable": false,
                        "_": 3905,
                        "source": " void"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 3905,
                      "source": " () => void"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Registers the given function as a listener of the given signal event.\n   *\n   * ```ts\n   * Deno.addSignalListener(\n   *   \"SIGTERM\",\n   *   () => {\n   *     console.log(\"SIGTERM!\")\n   *   }\n   * );\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime Environment\n   */\n  export function addSignalListener(signal: Signal, handler: () => void): void;"
              },
              {
                "_": 3923,
                "name": "removeSignalListener",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 3926,
                  "source": " void"
                },
                "generics": [],
                "doc": "Removes the given signal listener that has been registered with\n{@linkcode Deno.addSignalListener}.\n\n```ts\nconst listener = () => {\n console.log(\"SIGTERM!\")\n};\nDeno.addSignalListener(\"SIGTERM\", listener);\nDeno.removeSignalListener(\"SIGTERM\", listener);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.",
                "params": [
                  {
                    "name": "signal",
                    "type": {
                      "ref": "Signal",
                      "targs": [],
                      "isNullable": false,
                      "_": 3924,
                      "source": " Signal"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "handler",
                    "type": {
                      "ctor": false,
                      "generics": [],
                      "returns": {
                        "core": "void",
                        "isNullable": false,
                        "_": 3925,
                        "source": " void"
                      },
                      "params": [],
                      "isNullable": false,
                      "_": 3925,
                      "source": " () => void"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Removes the given signal listener that has been registered with\n   * {@linkcode Deno.addSignalListener}.\n   *\n   * ```ts\n   * const listener = () => {\n   *   console.log(\"SIGTERM!\")\n   * };\n   * Deno.addSignalListener(\"SIGTERM\", listener);\n   * Deno.removeSignalListener(\"SIGTERM\", listener);\n   * ```\n   *\n   * _Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\n   * are supported.\n   *\n   * @category Runtime Environment\n   */\n  export function removeSignalListener(\n    signal: Signal,\n    handler: () => void,\n  ): void;"
              },
              {
                "_": 3976,
                "name": "run",
                "type": {
                  "ref": "Process",
                  "targs": [
                    {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 3976,
                      "source": "T"
                    }
                  ],
                  "isNullable": false,
                  "_": 3976,
                  "source": " Process<T>"
                },
                "generics": [
                  {
                    "name": "T",
                    "constraint": {
                      "ref": "RunOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3976,
                      "source": " RunOptions"
                    },
                    "default": {
                      "ref": "RunOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 3976,
                      "source": " RunOptions"
                    },
                    "_": 3976,
                    "source": "T extends RunOptions = RunOptions"
                  }
                ],
                "doc": "Spawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\nan array of program arguments, the first of which is the binary.\n\n```ts\nconst p = Deno.run({\n cmd: [\"curl\", \"https://example.com\"],\n});\nconst status = await p.status();\n```\n\nSubprocess uses same working directory as parent process unless `opt.cwd`\nis specified.\n\nEnvironmental variables from parent process can be cleared using `opt.clearEnv`.\nDoesn't guarantee that only `opt.env` variables are present,\nas the OS may set environmental variables for processes.\n\nEnvironmental variables for subprocess can be specified using `opt.env`\nmapping.\n\n`opt.uid` sets the child processâs user ID. This translates to a setuid call\nin the child process. Failure in the setuid call will cause the spawn to fail.\n\n`opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\nThis has the same semantics as the uid field.\n\nBy default subprocess inherits stdio of parent process. To change\nthis this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\nindependently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n`\"piped\"`, or `\"null\"`:\n\n- _number_: the resource ID of an open file/resource. This allows you to\n read or write to a file.\n- `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n parent.\n- `\"piped\"`: A new pipe should be arranged to connect the parent and child\n sub-process.\n- `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n the stream to `/dev/null`.\n\nDetails of the spawned process are returned as an instance of\n{@linkcode Deno.Process}.\n\nRequires `allow-run` permission.",
                "params": [
                  {
                    "name": "opt",
                    "type": {
                      "ref": "T",
                      "targs": [],
                      "isNullable": false,
                      "_": 3976,
                      "source": " T"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Spawns new subprocess. RunOptions must contain at a minimum the `opt.cmd`,\n   * an array of program arguments, the first of which is the binary.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"curl\", \"https://example.com\"],\n   * });\n   * const status = await p.status();\n   * ```\n   *\n   * Subprocess uses same working directory as parent process unless `opt.cwd`\n   * is specified.\n   *\n   * Environmental variables from parent process can be cleared using `opt.clearEnv`.\n   * Doesn't guarantee that only `opt.env` variables are present,\n   * as the OS may set environmental variables for processes.\n   *\n   * Environmental variables for subprocess can be specified using `opt.env`\n   * mapping.\n   *\n   * `opt.uid` sets the child processâs user ID. This translates to a setuid call\n   * in the child process. Failure in the setuid call will cause the spawn to fail.\n   *\n   * `opt.gid` is similar to `opt.uid`, but sets the group ID of the child process.\n   * This has the same semantics as the uid field.\n   *\n   * By default subprocess inherits stdio of parent process. To change\n   * this this, `opt.stdin`, `opt.stdout`, and `opt.stderr` can be set\n   * independently to a resource ID (_rid_) of an open file, `\"inherit\"`,\n   * `\"piped\"`, or `\"null\"`:\n   *\n   * - _number_: the resource ID of an open file/resource. This allows you to\n   *   read or write to a file.\n   * - `\"inherit\"`: The default if unspecified. The subprocess inherits from the\n   *   parent.\n   * - `\"piped\"`: A new pipe should be arranged to connect the parent and child\n   *   sub-process.\n   * - `\"null\"`: This stream will be ignored. This is the equivalent of attaching\n   *   the stream to `/dev/null`.\n   *\n   * Details of the spawned process are returned as an instance of\n   * {@linkcode Deno.Process}.\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Sub Process\n   */\n  export function run<T extends RunOptions = RunOptions>(opt: T): Process<T>;"
              },
              {
                "_": 4272,
                "name": "inspect",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 4272,
                  "source": " string"
                },
                "generics": [],
                "doc": "Converts the input into a string that has the same format as printed by\n`console.log()`.\n\n```ts\nconst obj = {\n a: 10,\n b: \"hello\",\n};\nconst objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\nconsole.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n```\n\nA custom inspect functions can be registered on objects, via the symbol\n`Symbol.for(\"Deno.customInspect\")`, to control and customize the output\nof `inspect()` or when using `console` logging:\n\n```ts\nclass A {\n x = 10;\n y = \"hello\";\n [Symbol.for(\"Deno.customInspect\")]() {\n   return `x=${this.x}, y=${this.y}`;\n }\n}\n\nconst inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\nconsole.log(inStringFormat);  // prints \"x=10, y=hello\"\n```\n\nA depth can be specified by using the `depth` option:\n\n```ts\nDeno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n```",
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "core": "unknown",
                      "isNullable": false,
                      "_": 4272,
                      "source": " unknown"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "InspectOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 4272,
                      "source": " InspectOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Converts the input into a string that has the same format as printed by\n   * `console.log()`.\n   *\n   * ```ts\n   * const obj = {\n   *   a: 10,\n   *   b: \"hello\",\n   * };\n   * const objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\n   * console.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n   * ```\n   *\n   * A custom inspect functions can be registered on objects, via the symbol\n   * `Symbol.for(\"Deno.customInspect\")`, to control and customize the output\n   * of `inspect()` or when using `console` logging:\n   *\n   * ```ts\n   * class A {\n   *   x = 10;\n   *   y = \"hello\";\n   *   [Symbol.for(\"Deno.customInspect\")]() {\n   *     return `x=${this.x}, y=${this.y}`;\n   *   }\n   * }\n   *\n   * const inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\n   * console.log(inStringFormat);  // prints \"x=10, y=hello\"\n   * ```\n   *\n   * A depth can be specified by using the `depth` option:\n   *\n   * ```ts\n   * Deno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n   * ```\n   *\n   * @category Console and Debugging\n   */\n  export function inspect(value: unknown, options?: InspectOptions): string;"
              },
              {
                "_": 4790,
                "name": "symlink",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 4794,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 4794,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\nargument is only available on Windows and ignored on other platforms.\n\n```ts\nawait Deno.symlink(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4791,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4791,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4791,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4792,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4792,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4792,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "SymlinkOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 4793,
                      "source": " SymlinkOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\n   * argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * await Deno.symlink(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlink(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): Promise<void>;"
              },
              {
                "_": 4811,
                "name": "symlinkSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 4815,
                  "source": " void"
                },
                "generics": [],
                "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\nargument is only available on Windows and ignored on other platforms.\n\n```ts\nDeno.symlinkSync(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.",
                "params": [
                  {
                    "name": "oldpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4812,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4812,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4812,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "newpath",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4813,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4813,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4813,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "SymlinkOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 4814,
                      "source": " SymlinkOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Creates `newpath` as a symbolic link to `oldpath`.\n   *\n   * The `options.type` parameter can be set to `\"file\"` or `\"dir\"`. This\n   * argument is only available on Windows and ignored on other platforms.\n   *\n   * ```ts\n   * Deno.symlinkSync(\"old/name\", \"new/name\");\n   * ```\n   *\n   * Requires full `allow-read` and `allow-write` permissions.\n   *\n   * @tags allow-read, allow-write\n   * @category File System\n   */\n  export function symlinkSync(\n    oldpath: string | URL,\n    newpath: string | URL,\n    options?: SymlinkOptions,\n  ): void;"
              },
              {
                "_": 4856,
                "name": "ftruncate",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 4856,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 4856,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Truncates or extends the specified file stream, to reach the specified\n`len`.\n\nIf `len` is not specified then the entire file contents are truncated as if\n`len` was set to `0`.\n\nIf the file previously was larger than this new length, the extra data is\nlost.\n\nIf the file previously was shorter, it is extended, and the extended part\nreads as null bytes ('\\0').\n\n### Truncate the entire file\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true }\n);\nawait Deno.ftruncate(file.rid);\n```\n\n### Truncate part of the file\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true }\n);\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 7);\nconst data = new Uint8Array(32);\nawait Deno.read(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4856,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "len",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4856,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Truncates or extends the specified file stream, to reach the specified\n   * `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await Deno.ftruncate(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = await Deno.open(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, create: true }\n   * );\n   * await Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * await Deno.ftruncate(file.rid, 7);\n   * const data = new Uint8Array(32);\n   * await Deno.read(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @category File System\n   */\n  export function ftruncate(rid: number, len?: number): Promise<void>;"
              },
              {
                "_": 4898,
                "name": "ftruncateSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 4898,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously truncates or extends the specified file stream, to reach the\nspecified `len`.\n\nIf `len` is not specified then the entire file contents are truncated as if\n`len` was set to `0`.\n\nIf the file previously was larger than this new length, the extra data is\nlost.\n\nIf the file previously was shorter, it is extended, and the extended part\nreads as null bytes ('\\0').\n\n### Truncate the entire file\n\n```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, truncate: true, create: true }\n);\nDeno.ftruncateSync(file.rid);\n```\n\n### Truncate part of the file\n\n```ts\nconst file = Deno.openSync(\n \"my_file.txt\",\n { read: true, write: true, create: true }\n);\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 7);\nDeno.seekSync(file.rid, 0, Deno.SeekMode.Start);\nconst data = new Uint8Array(32);\nDeno.readSync(file.rid, data);\nconsole.log(new TextDecoder().decode(data)); // Hello W\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4898,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "len",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4898,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously truncates or extends the specified file stream, to reach the\n   * specified `len`.\n   *\n   * If `len` is not specified then the entire file contents are truncated as if\n   * `len` was set to `0`.\n   *\n   * If the file previously was larger than this new length, the extra data is\n   * lost.\n   *\n   * If the file previously was shorter, it is extended, and the extended part\n   * reads as null bytes ('\\0').\n   *\n   * ### Truncate the entire file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *   \"my_file.txt\",\n   *   { read: true, write: true, truncate: true, create: true }\n   * );\n   * Deno.ftruncateSync(file.rid);\n   * ```\n   *\n   * ### Truncate part of the file\n   *\n   * ```ts\n   * const file = Deno.openSync(\n   *  \"my_file.txt\",\n   *  { read: true, write: true, create: true }\n   * );\n   * Deno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\n   * Deno.ftruncateSync(file.rid, 7);\n   * Deno.seekSync(file.rid, 0, Deno.SeekMode.Start);\n   * const data = new Uint8Array(32);\n   * Deno.readSync(file.rid, data);\n   * console.log(new TextDecoder().decode(data)); // Hello W\n   * ```\n   *\n   * @category File System\n   */\n  export function ftruncateSync(rid: number, len?: number): void;"
              },
              {
                "_": 4912,
                "name": "futimeSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 4916,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously changes the access (`atime`) and modification (`mtime`) times\nof a file stream resource referenced by `rid`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nconst file = Deno.openSync(\"file.txt\", { create: true, write: true });\nDeno.futimeSync(file.rid, 1556495550, new Date());\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4913,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "atime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4914,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4914,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4914,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mtime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4915,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4915,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4915,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file stream resource referenced by `rid`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = Deno.openSync(\"file.txt\", { create: true, write: true });\n   * Deno.futimeSync(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @category File System\n   */\n  export function futimeSync(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;"
              },
              {
                "_": 4930,
                "name": "futime",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 4934,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 4934,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Changes the access (`atime`) and modification (`mtime`) times of a file\nstream resource referenced by `rid`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nconst file = await Deno.open(\"file.txt\", { create: true, write: true });\nawait Deno.futime(file.rid, 1556495550, new Date());\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4931,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "atime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4932,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4932,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4932,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mtime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4933,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4933,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4933,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * stream resource referenced by `rid`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * const file = await Deno.open(\"file.txt\", { create: true, write: true });\n   * await Deno.futime(file.rid, 1556495550, new Date());\n   * ```\n   *\n   * @category File System\n   */\n  export function futime(\n    rid: number,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;"
              },
              {
                "_": 4949,
                "name": "fstat",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "FileInfo",
                      "targs": [],
                      "isNullable": false,
                      "_": 4949,
                      "source": "FileInfo"
                    }
                  ],
                  "isNullable": false,
                  "_": 4949,
                  "source": " Promise<FileInfo>"
                },
                "generics": [],
                "doc": "Returns a `Deno.FileInfo` for the given file stream.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = await Deno.open(\"file.txt\", { read: true });\nconst fileInfo = await Deno.fstat(file.rid);\nassert(fileInfo.isFile);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4949,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Returns a `Deno.FileInfo` for the given file stream.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * const file = await Deno.open(\"file.txt\", { read: true });\n   * const fileInfo = await Deno.fstat(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @category File System\n   */\n  export function fstat(rid: number): Promise<FileInfo>;"
              },
              {
                "_": 4965,
                "name": "fstatSync",
                "type": {
                  "ref": "FileInfo",
                  "targs": [],
                  "isNullable": false,
                  "_": 4965,
                  "source": " FileInfo"
                },
                "generics": [],
                "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the given file\nstream.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst file = Deno.openSync(\"file.txt\", { read: true });\nconst fileInfo = Deno.fstatSync(file.rid);\nassert(fileInfo.isFile);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 4965,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously returns a {@linkcode Deno.FileInfo} for the given file\n   * stream.\n   *\n   * ```ts\n   * import { assert } from \"https://deno.land/std/testing/asserts.ts\";\n   *\n   * const file = Deno.openSync(\"file.txt\", { read: true });\n   * const fileInfo = Deno.fstatSync(file.rid);\n   * assert(fileInfo.isFile);\n   * ```\n   *\n   * @category File System\n   */\n  export function fstatSync(rid: number): FileInfo;"
              },
              {
                "_": 4981,
                "name": "utimeSync",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 4985,
                  "source": " void"
                },
                "generics": [],
                "doc": "Synchronously changes the access (`atime`) and modification (`mtime`) times\nof a file system object referenced by `path`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nDeno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 4982,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 4982,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 4982,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "atime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4983,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4983,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4983,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mtime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 4984,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 4984,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 4984,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Synchronously changes the access (`atime`) and modification (`mtime`) times\n   * of a file system object referenced by `path`. Given times are either in\n   * seconds (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utimeSync(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): void;"
              },
              {
                "_": 5001,
                "name": "utime",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 5005,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 5005,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Changes the access (`atime`) and modification (`mtime`) times of a file\nsystem object referenced by `path`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nawait Deno.utime(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.",
                "params": [
                  {
                    "name": "path",
                    "type": {
                      "union": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5002,
                          "source": " string"
                        },
                        {
                          "ref": "URL",
                          "targs": [],
                          "isNullable": false,
                          "_": 5002,
                          "source": " URL"
                        }
                      ],
                      "isNullable": false,
                      "_": 5002,
                      "source": " string | URL"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "atime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 5003,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 5003,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 5003,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "mtime",
                    "type": {
                      "union": [
                        {
                          "core": "number",
                          "isNullable": false,
                          "_": 5004,
                          "source": " number"
                        },
                        {
                          "ref": "Date",
                          "targs": [],
                          "isNullable": false,
                          "_": 5004,
                          "source": " Date"
                        }
                      ],
                      "isNullable": false,
                      "_": 5004,
                      "source": " number | Date"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Changes the access (`atime`) and modification (`mtime`) times of a file\n   * system object referenced by `path`. Given times are either in seconds\n   * (UNIX epoch time) or as `Date` objects.\n   *\n   * ```ts\n   * await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n   * ```\n   *\n   * Requires `allow-write` permission.\n   *\n   * @tags allow-write\n   * @category File System\n   */\n  export function utime(\n    path: string | URL,\n    atime: number | Date,\n    mtime: number | Date,\n  ): Promise<void>;"
              },
              {
                "_": 5095,
                "name": "serveHttp",
                "type": {
                  "ref": "HttpConn",
                  "targs": [],
                  "isNullable": false,
                  "_": 5095,
                  "source": " HttpConn"
                },
                "generics": [],
                "doc": "Provides an interface to handle HTTP request and responses over TCP or TLS\nconnections. The method returns an {@linkcode HttpConn} which yields up\n{@linkcode RequestEvent} events, which utilize the web platform standard\n{@linkcode Request} and {@linkcode Response} objects to handle the request.\n\n```ts\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  e.respondWith(new Response(\"Hello World\"));\n}\n```\n\nAlternatively, you can also use the async iterator approach:\n\n```ts\nasync function handleHttp(conn: Deno.Conn) {\n  for await (const e of Deno.serveHttp(conn)) {\n    e.respondWith(new Response(\"Hello World\"));\n  }\n}\n\nfor await (const conn of Deno.listen({ port: 80 })) {\n  handleHttp(conn);\n}\n```\n\nIf `httpConn.nextRequest()` encounters an error or returns `null` then the\nunderlying {@linkcode HttpConn} resource is closed automatically.\n\nAlso see the experimental Flash HTTP server {@linkcode Deno.serve } which\nprovides a ground up rewrite of handling of HTTP requests and responses\nwithin the Deno CLI.\n\nNote that this function *consumes* the given connection passed to it, thus\nthe original connection will be unusable after calling this. Additionally,\nyou need to ensure that the connection is not being used elsewhere when\ncalling this function in order for the connection to be consumed properly.\n\nFor instance, if there is a `Promise` that is waiting for read operation on\nthe connection to complete, it is considered that the connection is being\nused elsewhere. In such a case, this function will fail.",
                "params": [
                  {
                    "name": "conn",
                    "type": {
                      "ref": "Conn",
                      "targs": [],
                      "isNullable": false,
                      "_": 5095,
                      "source": " Conn"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Provides an interface to handle HTTP request and responses over TCP or TLS\n   * connections. The method returns an {@linkcode HttpConn} which yields up\n   * {@linkcode RequestEvent} events, which utilize the web platform standard\n   * {@linkcode Request} and {@linkcode Response} objects to handle the request.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   e.respondWith(new Response(\"Hello World\"));\n   * }\n   * ```\n   *\n   * Alternatively, you can also use the async iterator approach:\n   *\n   * ```ts\n   * async function handleHttp(conn: Deno.Conn) {\n   *   for await (const e of Deno.serveHttp(conn)) {\n   *     e.respondWith(new Response(\"Hello World\"));\n   *   }\n   * }\n   *\n   * for await (const conn of Deno.listen({ port: 80 })) {\n   *   handleHttp(conn);\n   * }\n   * ```\n   *\n   * If `httpConn.nextRequest()` encounters an error or returns `null` then the\n   * underlying {@linkcode HttpConn} resource is closed automatically.\n   *\n   * Also see the experimental Flash HTTP server {@linkcode Deno.serve} which\n   * provides a ground up rewrite of handling of HTTP requests and responses\n   * within the Deno CLI.\n   *\n   * Note that this function *consumes* the given connection passed to it, thus\n   * the original connection will be unusable after calling this. Additionally,\n   * you need to ensure that the connection is not being used elsewhere when\n   * calling this function in order for the connection to be consumed properly.\n   *\n   * For instance, if there is a `Promise` that is waiting for read operation on\n   * the connection to complete, it is considered that the connection is being\n   * used elsewhere. In such a case, this function will fail.\n   *\n   * @category HTTP Server\n   */\n  export function serveHttp(conn: Conn): HttpConn;"
              },
              {
                "_": 5164,
                "name": "upgradeWebSocket",
                "type": {
                  "ref": "WebSocketUpgrade",
                  "targs": [],
                  "isNullable": false,
                  "_": 5167,
                  "source": " WebSocketUpgrade"
                },
                "generics": [],
                "doc": "Upgrade an incoming HTTP request to a WebSocket.\n\nGiven a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n{@linkcode Response} instances. The original request must be responded to\nwith the returned response for the websocket upgrade to be successful.\n\n```ts\nconst conn = Deno.listen({ port: 80 });\nconst httpConn = Deno.serveHttp(await conn.accept());\nconst e = await httpConn.nextRequest();\nif (e) {\n  const { socket, response } = Deno.upgradeWebSocket(e.request);\n  socket.onopen = () => {\n    socket.send(\"Hello World!\");\n  };\n  socket.onmessage = (e) => {\n    console.log(e.data);\n    socket.close();\n  };\n  socket.onclose = () => console.log(\"WebSocket has been closed.\");\n  socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n  e.respondWith(response);\n}\n```\n\nIf the request body is disturbed (read from) before the upgrade is\ncompleted, upgrading fails.\n\nThis operation does not yet consume the request or open the websocket. This\nonly happens once the returned response has been passed to `respondWith()`.",
                "params": [
                  {
                    "name": "request",
                    "type": {
                      "ref": "Request",
                      "targs": [],
                      "isNullable": false,
                      "_": 5165,
                      "source": " Request"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "UpgradeWebSocketOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5166,
                      "source": " UpgradeWebSocketOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Upgrade an incoming HTTP request to a WebSocket.\n   *\n   * Given a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n   * {@linkcode Response} instances. The original request must be responded to\n   * with the returned response for the websocket upgrade to be successful.\n   *\n   * ```ts\n   * const conn = Deno.listen({ port: 80 });\n   * const httpConn = Deno.serveHttp(await conn.accept());\n   * const e = await httpConn.nextRequest();\n   * if (e) {\n   *   const { socket, response } = Deno.upgradeWebSocket(e.request);\n   *   socket.onopen = () => {\n   *     socket.send(\"Hello World!\");\n   *   };\n   *   socket.onmessage = (e) => {\n   *     console.log(e.data);\n   *     socket.close();\n   *   };\n   *   socket.onclose = () => console.log(\"WebSocket has been closed.\");\n   *   socket.onerror = (e) => console.error(\"WebSocket error:\", e);\n   *   e.respondWith(response);\n   * }\n   * ```\n   *\n   * If the request body is disturbed (read from) before the upgrade is\n   * completed, upgrading fails.\n   *\n   * This operation does not yet consume the request or open the websocket. This\n   * only happens once the returned response has been passed to `respondWith()`.\n   *\n   * @category Web Sockets\n   */\n  export function upgradeWebSocket(\n    request: Request,\n    options?: UpgradeWebSocketOptions,\n  ): WebSocketUpgrade;"
              },
              {
                "_": 5194,
                "name": "kill",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 5194,
                  "source": " void"
                },
                "generics": [],
                "doc": "Send a signal to process under given `pid`. The value and meaning of the\n`signal` to the process is operating system and process dependant.\n{@linkcode Signal} provides the most common signals. Default signal\nis `\"SIGTERM\"`.\n\nThe term `kill` is adopted from the UNIX-like command line command `kill`\nwhich also signals processes.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`. An error will be thrown if a negative `pid` is used on\nWindows.\n\n```ts\nconst p = Deno.run({\n cmd: [\"sleep\", \"10000\"]\n});\n\nDeno.kill(p.pid, \"SIGINT\");\n```\n\nRequires `allow-run` permission.",
                "params": [
                  {
                    "name": "pid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5194,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "signo",
                    "type": {
                      "ref": "Signal",
                      "targs": [],
                      "isNullable": false,
                      "_": 5194,
                      "source": " Signal"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Send a signal to process under given `pid`. The value and meaning of the\n   * `signal` to the process is operating system and process dependant.\n   * {@linkcode Signal} provides the most common signals. Default signal\n   * is `\"SIGTERM\"`.\n   *\n   * The term `kill` is adopted from the UNIX-like command line command `kill`\n   * which also signals processes.\n   *\n   * If `pid` is negative, the signal will be sent to the process group\n   * identified by `pid`. An error will be thrown if a negative `pid` is used on\n   * Windows.\n   *\n   * ```ts\n   * const p = Deno.run({\n   *   cmd: [\"sleep\", \"10000\"]\n   * });\n   *\n   * Deno.kill(p.pid, \"SIGINT\");\n   * ```\n   *\n   * Requires `allow-run` permission.\n   *\n   * @tags allow-run\n   * @category Sub Process\n   */\n  export function kill(pid: number, signo?: Signal): void;"
              },
              {
                "_": 5338,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "core": "string",
                          "isNullable": false,
                          "_": 5342,
                          "source": "string"
                        }
                      ],
                      "isNullable": false,
                      "_": 5342,
                      "source": "string[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5342,
                  "source": " Promise<string[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5339,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "union": [
                        {
                          "core": "\"A\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"A\""
                        },
                        {
                          "core": "\"AAAA\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"AAAA\""
                        },
                        {
                          "core": "\"ANAME\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"ANAME\""
                        },
                        {
                          "core": "\"CNAME\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"CNAME\""
                        },
                        {
                          "core": "\"NS\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"NS\""
                        },
                        {
                          "core": "\"PTR\"",
                          "isNullable": false,
                          "_": 5340,
                          "source": " \"PTR\""
                        }
                      ],
                      "isNullable": false,
                      "_": 5340,
                      "source": " \"A\" | \"AAAA\" | \"ANAME\" | \"CNAME\" | \"NS\" | \"PTR\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5341,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"A\" | \"AAAA\" | \"ANAME\" | \"CNAME\" | \"NS\" | \"PTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[]>;"
              },
              {
                "_": 5368,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "CAARecord",
                          "targs": [],
                          "isNullable": false,
                          "_": 5372,
                          "source": "CAARecord"
                        }
                      ],
                      "isNullable": false,
                      "_": 5372,
                      "source": "CAARecord[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5372,
                  "source": " Promise<CAARecord[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5369,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"CAA\"",
                      "isNullable": false,
                      "_": 5370,
                      "source": " \"CAA\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5371,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"CAA\",\n    options?: ResolveDnsOptions,\n  ): Promise<CAARecord[]>;"
              },
              {
                "_": 5398,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "MXRecord",
                          "targs": [],
                          "isNullable": false,
                          "_": 5402,
                          "source": "MXRecord"
                        }
                      ],
                      "isNullable": false,
                      "_": 5402,
                      "source": "MXRecord[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5402,
                  "source": " Promise<MXRecord[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5399,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"MX\"",
                      "isNullable": false,
                      "_": 5400,
                      "source": " \"MX\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5401,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"MX\",\n    options?: ResolveDnsOptions,\n  ): Promise<MXRecord[]>;"
              },
              {
                "_": 5428,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "NAPTRRecord",
                          "targs": [],
                          "isNullable": false,
                          "_": 5432,
                          "source": "NAPTRRecord"
                        }
                      ],
                      "isNullable": false,
                      "_": 5432,
                      "source": "NAPTRRecord[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5432,
                  "source": " Promise<NAPTRRecord[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5429,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"NAPTR\"",
                      "isNullable": false,
                      "_": 5430,
                      "source": " \"NAPTR\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5431,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"NAPTR\",\n    options?: ResolveDnsOptions,\n  ): Promise<NAPTRRecord[]>;"
              },
              {
                "_": 5458,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "SOARecord",
                          "targs": [],
                          "isNullable": false,
                          "_": 5462,
                          "source": "SOARecord"
                        }
                      ],
                      "isNullable": false,
                      "_": 5462,
                      "source": "SOARecord[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5462,
                  "source": " Promise<SOARecord[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5459,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"SOA\"",
                      "isNullable": false,
                      "_": 5460,
                      "source": " \"SOA\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5461,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SOA\",\n    options?: ResolveDnsOptions,\n  ): Promise<SOARecord[]>;"
              },
              {
                "_": 5488,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "SRVRecord",
                          "targs": [],
                          "isNullable": false,
                          "_": 5492,
                          "source": "SRVRecord"
                        }
                      ],
                      "isNullable": false,
                      "_": 5492,
                      "source": "SRVRecord[]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5492,
                  "source": " Promise<SRVRecord[]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5489,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"SRV\"",
                      "isNullable": false,
                      "_": 5490,
                      "source": " \"SRV\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5491,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"SRV\",\n    options?: ResolveDnsOptions,\n  ): Promise<SRVRecord[]>;"
              },
              {
                "_": 5518,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "array",
                      "targs": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 5522,
                              "source": "string"
                            }
                          ],
                          "isNullable": false,
                          "_": 5522,
                          "source": "string[]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5522,
                      "source": "string[][]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5522,
                  "source": " Promise<string[][]>"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5519,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "core": "\"TXT\"",
                      "isNullable": false,
                      "_": 5520,
                      "source": " \"TXT\""
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5521,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: \"TXT\",\n    options?: ResolveDnsOptions,\n  ): Promise<string[][]>;"
              },
              {
                "_": 5548,
                "name": "resolveDns",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "union": [
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "string",
                              "isNullable": false,
                              "_": 5553,
                              "source": " string"
                            }
                          ],
                          "isNullable": false,
                          "_": 5553,
                          "source": " string[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "CAARecord",
                              "targs": [],
                              "isNullable": false,
                              "_": 5554,
                              "source": " CAARecord"
                            }
                          ],
                          "isNullable": false,
                          "_": 5554,
                          "source": " CAARecord[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "MXRecord",
                              "targs": [],
                              "isNullable": false,
                              "_": 5555,
                              "source": " MXRecord"
                            }
                          ],
                          "isNullable": false,
                          "_": 5555,
                          "source": " MXRecord[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "NAPTRRecord",
                              "targs": [],
                              "isNullable": false,
                              "_": 5556,
                              "source": " NAPTRRecord"
                            }
                          ],
                          "isNullable": false,
                          "_": 5556,
                          "source": " NAPTRRecord[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "SOARecord",
                              "targs": [],
                              "isNullable": false,
                              "_": 5557,
                              "source": " SOARecord"
                            }
                          ],
                          "isNullable": false,
                          "_": 5557,
                          "source": " SOARecord[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "ref": "SRVRecord",
                              "targs": [],
                              "isNullable": false,
                              "_": 5558,
                              "source": " SRVRecord"
                            }
                          ],
                          "isNullable": false,
                          "_": 5558,
                          "source": " SRVRecord[]"
                        },
                        {
                          "core": "array",
                          "targs": [
                            {
                              "core": "array",
                              "targs": [
                                {
                                  "core": "string",
                                  "isNullable": false,
                                  "_": 5559,
                                  "source": " string"
                                }
                              ],
                              "isNullable": false,
                              "_": 5559,
                              "source": " string[]"
                            }
                          ],
                          "isNullable": false,
                          "_": 5559,
                          "source": " string[][]"
                        }
                      ],
                      "isNullable": false,
                      "_": 5553,
                      "source": "\n    | string[]\n    | CAARecord[]\n    | MXRecord[]\n    | NAPTRRecord[]\n    | SOARecord[]\n    | SRVRecord[]\n    | string[][]"
                    }
                  ],
                  "isNullable": false,
                  "_": 5552,
                  "source": " Promise<\n    | string[]\n    | CAARecord[]\n    | MXRecord[]\n    | NAPTRRecord[]\n    | SOARecord[]\n    | SRVRecord[]\n    | string[][]\n  >"
                },
                "generics": [],
                "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "query",
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 5549,
                      "source": " string"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "recordType",
                    "type": {
                      "ref": "RecordType",
                      "targs": [],
                      "isNullable": false,
                      "_": 5550,
                      "source": " RecordType"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "ResolveDnsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 5551,
                      "source": " ResolveDnsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * Performs DNS resolution against the given query, returning resolved\n   * records.\n   *\n   * Fails in the cases such as:\n   *\n   * - the query is in invalid format.\n   * - the options have an invalid parameter. For example `nameServer.port` is\n   *   beyond the range of 16-bit unsigned integer.\n   * - the request timed out.\n   *\n   * ```ts\n   * const a = await Deno.resolveDns(\"example.com\", \"A\");\n   *\n   * const aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n   *   nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n   * });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function resolveDns(\n    query: string,\n    recordType: RecordType,\n    options?: ResolveDnsOptions,\n  ): Promise<\n    | string[]\n    | CAARecord[]\n    | MXRecord[]\n    | NAPTRRecord[]\n    | SOARecord[]\n    | SRVRecord[]\n    | string[][]\n  >;"
              },
              {
                "_": 5567,
                "name": "refTimer",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 5567,
                  "source": " void"
                },
                "generics": [],
                "doc": "Make the timer of the given `id` block the event loop from finishing.",
                "params": [
                  {
                    "name": "id",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5567,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Make the timer of the given `id` block the event loop from finishing.\n   *\n   * @category Timers\n   */\n  export function refTimer(id: number): void;"
              },
              {
                "_": 5574,
                "name": "unrefTimer",
                "type": {
                  "core": "void",
                  "isNullable": false,
                  "_": 5574,
                  "source": " void"
                },
                "generics": [],
                "doc": "Make the timer of the given `id` not block the event loop from finishing.",
                "params": [
                  {
                    "name": "id",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 5574,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Make the timer of the given `id` not block the event loop from finishing.\n   *\n   * @category Timers\n   */\n  export function unrefTimer(id: number): void;"
              },
              {
                "_": 5588,
                "name": "uid",
                "type": {
                  "union": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 5588,
                      "source": " number"
                    },
                    {
                      "core": "null",
                      "isNullable": false,
                      "_": 5588,
                      "source": " null"
                    }
                  ],
                  "isNullable": false,
                  "_": 5588,
                  "source": " number | null"
                },
                "generics": [],
                "doc": "Returns the user id of the process on POSIX platforms. Returns null on Windows.\n\n```ts\nconsole.log(Deno.uid());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Returns the user id of the process on POSIX platforms. Returns null on Windows.\n   *\n   * ```ts\n   * console.log(Deno.uid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function uid(): number | null;"
              },
              {
                "_": 5602,
                "name": "gid",
                "type": {
                  "union": [
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 5602,
                      "source": " number"
                    },
                    {
                      "core": "null",
                      "isNullable": false,
                      "_": 5602,
                      "source": " null"
                    }
                  ],
                  "isNullable": false,
                  "_": 5602,
                  "source": " number | null"
                },
                "generics": [],
                "doc": "Returns the group id of the process on POSIX platforms. Returns null on windows.\n\n```ts\nconsole.log(Deno.gid());\n```\n\nRequires `allow-sys` permission.",
                "params": [],
                "source": "\n\n  /**\n   * Returns the group id of the process on POSIX platforms. Returns null on windows.\n   *\n   * ```ts\n   * console.log(Deno.gid());\n   * ```\n   *\n   * Requires `allow-sys` permission.\n   *\n   * @tags allow-sys\n   * @category Runtime Environment\n   */\n  export function gid(): number | null;"
              },
              {
                "_": 8259,
                "name": "listen",
                "type": {
                  "ref": "Listener",
                  "targs": [],
                  "isNullable": false,
                  "_": 8261,
                  "source": " Listener"
                },
                "generics": [],
                "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listen({ port: 80 })\nconst listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\nconst listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\nconst listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "intersect": [
                        {
                          "ref": "TcpListenOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 8260,
                          "source": " TcpListenOptions"
                        },
                        {
                          "ref": "IInline44",
                          "targs": [],
                          "isNullable": false,
                          "_": 8260,
                          "source": " { transport?: \"tcp\" }"
                        }
                      ],
                      "isNullable": false,
                      "_": 8260,
                      "source": " TcpListenOptions & { transport?: \"tcp\" }"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Listen announces on the local transport address.\n   *\n   * ```ts\n   * const listener1 = Deno.listen({ port: 80 })\n   * const listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n   * const listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n   * const listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function listen(\n    options: TcpListenOptions & { transport?: \"tcp\" },\n  ): Listener;"
              },
              {
                "_": 8298,
                "name": "listenTls",
                "type": {
                  "ref": "TlsListener",
                  "targs": [],
                  "isNullable": false,
                  "_": 8298,
                  "source": " TlsListener"
                },
                "generics": [],
                "doc": "Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n```ts\nconst lstnr = Deno.listenTls({ port: 443, certFile: \"./server.crt\", keyFile: \"./server.key\" });\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "ListenTlsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8298,
                      "source": " ListenTlsOptions"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Listen announces on the local transport address over TLS (transport layer\n   * security).\n   *\n   * ```ts\n   * const lstnr = Deno.listenTls({ port: 443, certFile: \"./server.crt\", keyFile: \"./server.key\" });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function listenTls(options: ListenTlsOptions): TlsListener;"
              },
              {
                "_": 8328,
                "name": "connect",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "TcpConn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8328,
                      "source": "TcpConn"
                    }
                  ],
                  "isNullable": false,
                  "_": 8328,
                  "source": " Promise<TcpConn>"
                },
                "generics": [],
                "doc": "Connects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission for \"tcp\".",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "ConnectOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8328,
                      "source": " ConnectOptions"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * Connects to the hostname (default is \"127.0.0.1\") and port on the named\n   * transport (default is \"tcp\"), and resolves to the connection (`Conn`).\n   *\n   * ```ts\n   * const conn1 = await Deno.connect({ port: 80 });\n   * const conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\n   * const conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n   * const conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   * ```\n   *\n   * Requires `allow-net` permission for \"tcp\".\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function connect(options: ConnectOptions): Promise<TcpConn>;"
              },
              {
                "_": 8386,
                "name": "connectTls",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "TlsConn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8386,
                      "source": "TlsConn"
                    }
                  ],
                  "isNullable": false,
                  "_": 8386,
                  "source": " Promise<TlsConn>"
                },
                "generics": [],
                "doc": "Establishes a secure connection over TLS (transport layer security) using\nan optional cert file, hostname (default is \"127.0.0.1\") and port.  The\ncert file is optional and if not included Mozilla's root certificates will\nbe used (see also https://github.com/ctz/webpki-roots for specifics)\n\n```ts\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\nconst conn1 = await Deno.connectTls({ port: 80 });\nconst conn2 = await Deno.connectTls({ caCerts: [caCert], hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connectTls({ caCerts: [caCert], hostname: \"golang.org\", port: 80});\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "options",
                    "type": {
                      "ref": "ConnectTlsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8386,
                      "source": " ConnectTlsOptions"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Establishes a secure connection over TLS (transport layer security) using\n   * an optional cert file, hostname (default is \"127.0.0.1\") and port.  The\n   * cert file is optional and if not included Mozilla's root certificates will\n   * be used (see also https://github.com/ctz/webpki-roots for specifics)\n   *\n   * ```ts\n   * const caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\n   * const conn1 = await Deno.connectTls({ port: 80 });\n   * const conn2 = await Deno.connectTls({ caCerts: [caCert], hostname: \"192.0.2.1\", port: 80 });\n   * const conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\n   * const conn4 = await Deno.connectTls({ caCerts: [caCert], hostname: \"golang.org\", port: 80});\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function connectTls(options: ConnectTlsOptions): Promise<TlsConn>;"
              },
              {
                "_": 8427,
                "name": "startTls",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "TlsConn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8430,
                      "source": "TlsConn"
                    }
                  ],
                  "isNullable": false,
                  "_": 8430,
                  "source": " Promise<TlsConn>"
                },
                "generics": [],
                "doc": "Start TLS handshake from an existing connection using an optional list of\nCA certificates, and hostname (default is \"127.0.0.1\"). Specifying CA certs\nis optional. By default the configured root certificates are used. Using\nthis function requires that the other end of the connection is prepared for\na TLS handshake.\n\nNote that this function *consumes* the TCP connection passed to it, thus the\noriginal TCP connection will be unusable after calling this. Additionally,\nyou need to ensure that the TCP connection is not being used elsewhere when\ncalling this function in order for the TCP connection to be consumed properly.\nFor instance, if there is a `Promise` that is waiting for read operation on\nthe TCP connection to complete, it is considered that the TCP connection is\nbeing used elsewhere. In such a case, this function will fail.\n\n```ts\nconst conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\n// `conn` becomes unusable after calling `Deno.startTls`\nconst tlsConn = await Deno.startTls(conn, { caCerts: [caCert], hostname: \"localhost\" });\n```\n\nRequires `allow-net` permission.",
                "params": [
                  {
                    "name": "conn",
                    "type": {
                      "ref": "Conn",
                      "targs": [],
                      "isNullable": false,
                      "_": 8428,
                      "source": " Conn"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "options",
                    "type": {
                      "ref": "StartTlsOptions",
                      "targs": [],
                      "isNullable": false,
                      "_": 8429,
                      "source": " StartTlsOptions"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /** Start TLS handshake from an existing connection using an optional list of\n   * CA certificates, and hostname (default is \"127.0.0.1\"). Specifying CA certs\n   * is optional. By default the configured root certificates are used. Using\n   * this function requires that the other end of the connection is prepared for\n   * a TLS handshake.\n   *\n   * Note that this function *consumes* the TCP connection passed to it, thus the\n   * original TCP connection will be unusable after calling this. Additionally,\n   * you need to ensure that the TCP connection is not being used elsewhere when\n   * calling this function in order for the TCP connection to be consumed properly.\n   * For instance, if there is a `Promise` that is waiting for read operation on\n   * the TCP connection to complete, it is considered that the TCP connection is\n   * being used elsewhere. In such a case, this function will fail.\n   *\n   * ```ts\n   * const conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\n   * const caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\n   * // `conn` becomes unusable after calling `Deno.startTls`\n   * const tlsConn = await Deno.startTls(conn, { caCerts: [caCert], hostname: \"localhost\" });\n   * ```\n   *\n   * Requires `allow-net` permission.\n   *\n   * @tags allow-net\n   * @category Network\n   */\n  export function startTls(\n    conn: Conn,\n    options?: StartTlsOptions,\n  ): Promise<TlsConn>;"
              },
              {
                "_": 8444,
                "name": "shutdown",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "core": "void",
                      "isNullable": false,
                      "_": 8444,
                      "source": "void"
                    }
                  ],
                  "isNullable": false,
                  "_": 8444,
                  "source": " Promise<void>"
                },
                "generics": [],
                "doc": "Shutdown socket send operations.\n\nMatches behavior of POSIX shutdown(3).\n\n```ts\nconst listener = Deno.listen({ port: 80 });\nconst conn = await listener.accept();\nDeno.shutdown(conn.rid);\n```",
                "params": [
                  {
                    "name": "rid",
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8444,
                      "source": " number"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /** Shutdown socket send operations.\n   *\n   * Matches behavior of POSIX shutdown(3).\n   *\n   * ```ts\n   * const listener = Deno.listen({ port: 80 });\n   * const conn = await listener.accept();\n   * Deno.shutdown(conn.rid);\n   * ```\n   *\n   * @category Network\n   */\n  export function shutdown(rid: number): Promise<void>;"
              }
            ],
            "vars": [
              {
                "_": 274,
                "name": "pid",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "The current process ID of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.pid);\n```",
                "type": {
                  "core": "number",
                  "isNullable": false,
                  "_": 274,
                  "source": " number"
                },
                "source": " pid: number"
              },
              {
                "_": 285,
                "name": "ppid",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "The process ID of parent process of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.ppid);\n```",
                "type": {
                  "core": "number",
                  "isNullable": false,
                  "_": 285,
                  "source": " number"
                },
                "source": " ppid: number"
              },
              {
                "_": 433,
                "name": "noColor",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "Reflects the `NO_COLOR` environment variable at program start.\n\nWhen the value is `true`, the Deno CLI will attempt to not send color codes\nto `stderr` or `stdout` and other command line programs should also attempt\nto respect this value.\n\nSee: https://no-color.org/",
                "type": {
                  "core": "boolean",
                  "isNullable": false,
                  "_": 433,
                  "source": " boolean"
                },
                "source": " noColor: boolean"
              },
              {
                "_": 1312,
                "name": "env",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "An interface containing methods to interact with the process environment\nvariables.",
                "type": {
                  "ref": "Env",
                  "targs": [],
                  "isNullable": false,
                  "_": 1312,
                  "source": " Env"
                },
                "source": " env: Env"
              },
              {
                "_": 2289,
                "name": "File",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "The Deno abstraction for reading and writing files.",
                "type": {
                  "accessor": "FsFile",
                  "_": 2289,
                  "isNullable": false,
                  "source": " typeof FsFile"
                },
                "source": " File: typeof FsFile"
              },
              {
                "_": 2336,
                "name": "stdin",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "A reference to `stdin` which can be used to read directly from `stdin`.\nIt implements the Deno specific {@linkcode Reader}, {@linkcode ReaderSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode ReadableStream} interface.\n\n### Reading chunks from the readable stream\n\n```ts\nconst decoder = new TextDecoder();\nfor await (const chunk of Deno.stdin.readable) {\n const text = decoder.decode(chunk);\n // do something with the text\n}\n```",
                "type": {
                  "intersect": [
                    {
                      "ref": "Reader",
                      "targs": [],
                      "isNullable": false,
                      "_": 2336,
                      "source": " Reader"
                    },
                    {
                      "ref": "ReaderSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2336,
                      "source": " ReaderSync"
                    },
                    {
                      "ref": "Closer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2336,
                      "source": " Closer"
                    },
                    {
                      "ref": "IInline5",
                      "targs": [],
                      "isNullable": false,
                      "_": 2336,
                      "source": " {\n    /** The resource ID assigned to `stdin`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n  }"
                    }
                  ],
                  "isNullable": false,
                  "_": 2336,
                  "source": " Reader & ReaderSync & Closer & {\n    /** The resource ID assigned to `stdin`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n  }"
                },
                "source": " stdin: Reader & ReaderSync & Closer & {\n    /** The resource ID assigned to `stdin`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A readable stream interface to `stdin`. */\n    readonly readable: ReadableStream<Uint8Array>;\n    /**\n     * Set TTY to be under raw mode or not. In raw mode, characters are read and\n     * returned as is, without being processed. All special processing of\n     * characters by the terminal is disabled, including echoing input\n     * characters. Reading from a TTY device in raw mode is faster than reading\n     * from a TTY device in canonical mode.\n     *\n     * ```ts\n     * Deno.stdin.setRaw(true, { cbreak: true });\n     * ```\n     *\n     * @category I/O\n     */\n    setRaw(mode: boolean, options?: SetRawOptions): void;\n  }"
              },
              {
                "_": 2367,
                "name": "stdout",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "A reference to `stdout` which can be used to write directly to `stdout`.\nIt implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.",
                "type": {
                  "intersect": [
                    {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2367,
                      "source": " Writer"
                    },
                    {
                      "ref": "WriterSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2367,
                      "source": " WriterSync"
                    },
                    {
                      "ref": "Closer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2367,
                      "source": " Closer"
                    },
                    {
                      "ref": "IInline6",
                      "targs": [],
                      "isNullable": false,
                      "_": 2367,
                      "source": " {\n    /** The resource ID assigned to `stdout`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
                    }
                  ],
                  "isNullable": false,
                  "_": 2367,
                  "source": " Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stdout`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
                },
                "source": " stdout: Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stdout`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stdout`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
              },
              {
                "_": 2384,
                "name": "stderr",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "A reference to `stderr` which can be used to write directly to `stderr`.\nIt implements the Deno specific {@linkcode Writer}, {@linkcode WriterSync},\nand {@linkcode Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.",
                "type": {
                  "intersect": [
                    {
                      "ref": "Writer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2384,
                      "source": " Writer"
                    },
                    {
                      "ref": "WriterSync",
                      "targs": [],
                      "isNullable": false,
                      "_": 2384,
                      "source": " WriterSync"
                    },
                    {
                      "ref": "Closer",
                      "targs": [],
                      "isNullable": false,
                      "_": 2384,
                      "source": " Closer"
                    },
                    {
                      "ref": "IInline7",
                      "targs": [],
                      "isNullable": false,
                      "_": 2384,
                      "source": " {\n    /** The resource ID assigned to `stderr`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
                    }
                  ],
                  "isNullable": false,
                  "_": 2384,
                  "source": " Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stderr`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
                },
                "source": " stderr: Writer & WriterSync & Closer & {\n    /** The resource ID assigned to `stderr`. This can be used with the discreet\n     * I/O functions in the `Deno` namespace. */\n    readonly rid: number;\n    /** A writable stream interface to `stderr`. */\n    readonly writable: WritableStream<Uint8Array>;\n  }"
              },
              {
                "_": 4658,
                "name": "permissions",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "Deno's permission management API.\n\nIt is a singleton instance of the {@linkcode Permissions} object and is\nbased on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.\n\nRequesting already granted permissions will not prompt the user and will\nreturn that the permission was granted.\n\n### Querying\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n```ts\nconst status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n### Revoking\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\n\nconst status = Deno.permissions.revokeSync({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n### Requesting\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n console.log(\"'env' permission is granted.\");\n} else {\n console.log(\"'env' permission is denied.\");\n}\n```\n\n```ts\nconst status = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n console.log(\"'env' permission is granted.\");\n} else {\n console.log(\"'env' permission is denied.\");\n}\n```",
                "type": {
                  "ref": "Permissions",
                  "targs": [],
                  "isNullable": false,
                  "_": 4658,
                  "source": " Permissions"
                },
                "source": " permissions: Permissions"
              },
              {
                "_": 4671,
                "name": "build",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "Information related to the build of the current Deno runtime.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.",
                "type": {
                  "ref": "IInline12",
                  "targs": [],
                  "isNullable": false,
                  "_": 4671,
                  "source": " {\n    /** The [LLVM](https://llvm.org/) target triple, which is the combination\n     * of `${arch}-${vendor}-${os}` and represent the specific build target that\n     * the current runtime was built for. */\n    target: string;\n    /** Instruction set architecture that the Deno CLI was built for. */\n    arch: \"x86_64\" | \"aarch64\";\n    /** The operating system that the Deno CLI was built for. `\"darwin\"` is\n     * also known as OSX or MacOS. */\n    os:\n      | \"darwin\"\n      | \"linux\"\n      | \"windows\"\n      | \"freebsd\"\n      | \"netbsd\"\n      | \"aix\"\n      | \"solaris\"\n      | \"illumos\";\n    /** The computer vendor that the Deno CLI was built for. */\n    vendor: string;\n    /** Optional environment flags that were set for this build of Deno CLI. */\n    env?: string;\n  }"
                },
                "source": " build: {\n    /** The [LLVM](https://llvm.org/) target triple, which is the combination\n     * of `${arch}-${vendor}-${os}` and represent the specific build target that\n     * the current runtime was built for. */\n    target: string;\n    /** Instruction set architecture that the Deno CLI was built for. */\n    arch: \"x86_64\" | \"aarch64\";\n    /** The operating system that the Deno CLI was built for. `\"darwin\"` is\n     * also known as OSX or MacOS. */\n    os:\n      | \"darwin\"\n      | \"linux\"\n      | \"windows\"\n      | \"freebsd\"\n      | \"netbsd\"\n      | \"aix\"\n      | \"solaris\"\n      | \"illumos\";\n    /** The computer vendor that the Deno CLI was built for. */\n    vendor: string;\n    /** Optional environment flags that were set for this build of Deno CLI. */\n    env?: string;\n  }"
              },
              {
                "_": 4706,
                "name": "version",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "Version information related to the current Deno CLI runtime environment.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.",
                "type": {
                  "ref": "IInline13",
                  "targs": [],
                  "isNullable": false,
                  "_": 4706,
                  "source": " {\n    /** Deno CLI's version. For example: `\"1.26.0\"`. */\n    deno: string;\n    /** The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n     *\n     * V8 is the underlying JavaScript runtime platform that Deno is built on\n     * top of. */\n    v8: string;\n    /** The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n     *\n     * A version of the TypeScript type checker and language server is built-in\n     * to the Deno CLI. */\n    typescript: string;\n  }"
                },
                "source": " version: {\n    /** Deno CLI's version. For example: `\"1.26.0\"`. */\n    deno: string;\n    /** The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n     *\n     * V8 is the underlying JavaScript runtime platform that Deno is built on\n     * top of. */\n    v8: string;\n    /** The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n     *\n     * A version of the TypeScript type checker and language server is built-in\n     * to the Deno CLI. */\n    typescript: string;\n  }"
              },
              {
                "_": 4741,
                "name": "args",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "Returns the script arguments to the program.\n\nGive the following command line invocation of Deno:\n\n```sh\ndeno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n```\n\nThen `Deno.args` will contain:\n\n```ts\n[ \"/etc/passwd\" ]\n```\n\nIf you are looking for a structured way to parse arguments, there is the\n[`std/flags`](https://deno.land/std/flags) module as part of the Deno\nstandard library.",
                "type": {
                  "core": "array",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 4741,
                      "source": " string"
                    }
                  ],
                  "isNullable": false,
                  "_": 4741,
                  "source": " string[]"
                },
                "source": " args: string[]"
              },
              {
                "_": 4753,
                "name": "customInspect",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "A symbol which can be used as a key for a custom method which will be\ncalled when `Deno.inspect()` is called, or when the object is logged to\nthe console.",
                "type": {
                  "operator": 156,
                  "type": {
                    "core": "symbol",
                    "isNullable": false,
                    "_": 4753,
                    "source": " symbol"
                  },
                  "isNullable": false,
                  "_": 4753,
                  "source": " unique symbol"
                },
                "source": " customInspect: unique symbol"
              },
              {
                "_": 4763,
                "name": "mainModule",
                "isReadonly": true,
                "isStatic": false,
                "isNullable": false,
                "doc": "The URL of the entrypoint module entered from the command-line. It\nrequires read permission to the CWD.\n\nAlso see {@linkcode ImportMeta} for other related information.",
                "type": {
                  "core": "string",
                  "isNullable": false,
                  "_": 4763,
                  "source": " string"
                },
                "source": " mainModule: string"
              }
            ],
            "enums": [
              {
                "name": "SeekMode",
                "doc": "A enum which defines the seek mode for IO related APIs that support\nseeking.",
                "_": 1401,
                "source": "\n\n  /**\n   * A enum which defines the seek mode for IO related APIs that support\n   * seeking.\n   *\n   * @category I/O */\n  export enum SeekMode {\n    /* Seek from the start of the file/resource. */\n    Start = 0,\n    /* Seek from the current position within the file/resource. */\n    Current = 1,\n    /* Seek from the end of the current file/resource. */\n    End = 2,\n  }",
                "members": [
                  {
                    "name": "Start",
                    "doc": "",
                    "value": "0",
                    "_": 1403,
                    "source": "\n    /* Seek from the start of the file/resource. */\n    Start = 0"
                  },
                  {
                    "name": "Current",
                    "doc": "",
                    "value": "1",
                    "_": 1405,
                    "source": "\n    /* Seek from the current position within the file/resource. */\n    Current = 1"
                  },
                  {
                    "name": "End",
                    "doc": "",
                    "value": "2",
                    "_": 1407,
                    "source": "\n    /* Seek from the end of the current file/resource. */\n    End = 2"
                  }
                ]
              }
            ]
          }
        },
        {
          "_": 8463,
          "namespace": "WebAssembly",
          "from": "submodule ",
          "items": {
            "structs": [
              {
                "_": 8471,
                "name": "CompileError",
                "generics": [],
                "doc": "The `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError)",
                "heritage": [
                  [
                    {
                      "ref": "Error",
                      "targs": [],
                      "isNullable": false,
                      "_": 8471,
                      "source": " Error"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8473,
                    "source": "\n    /** Creates a new `WebAssembly.CompileError` object. */\n    constructor(message?: string, options?: ErrorOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 8473,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ErrorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 8473,
                          "source": " ErrorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8485,
                "name": "Global",
                "generics": [],
                "doc": "A `WebAssembly.Global` object represents a global variable instance, accessible from\nboth JavaScript and importable/exportable across one or more `WebAssembly.Module`\ninstances. This allows dynamic linking of multiple modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8487,
                    "source": "\n    /** Creates a new `Global` object. */\n    constructor(descriptor: GlobalDescriptor, v?: any);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "descriptor",
                        "type": {
                          "ref": "GlobalDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 8487,
                          "source": " GlobalDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "v",
                        "type": {
                          "core": "any",
                          "isNullable": false,
                          "_": 8487,
                          "source": " any"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "The value contained inside the global variable â this can be used to directly set\n and get the global's value.",
                    "isMethod": false,
                    "_": 8493,
                    "source": "\n\n    /**\n     * The value contained inside the global variable â this can be used to directly set\n     * and get the global's value.\n     */\n    value: any;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8493,
                      "source": " any"
                    }
                  },
                  {
                    "doc": "Old-style method that returns the value contained inside the global variable.",
                    "isMethod": true,
                    "_": 8496,
                    "source": "\n\n    /** Old-style method that returns the value contained inside the global variable. */\n    valueOf(): any;",
                    "name": "valueOf",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [],
                    "type": {
                      "core": "any",
                      "isNullable": false,
                      "_": 8496,
                      "source": " any"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8508,
                "name": "Instance",
                "generics": [],
                "doc": "A `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`.\nInstance objects contain all the Exported WebAssembly functions that allow calling into\nWebAssembly code from JavaScript.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8510,
                    "source": "\n    /** Creates a new Instance object. */\n    constructor(module: Module, importObject?: Imports);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "module",
                        "type": {
                          "ref": "Module",
                          "targs": [],
                          "isNullable": false,
                          "_": 8510,
                          "source": " Module"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "importObject",
                        "type": {
                          "ref": "Imports",
                          "targs": [],
                          "isNullable": false,
                          "_": 8510,
                          "source": " Imports"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Returns an object containing as its members all the functions exported from the\nWebAssembly module instance, to allow them to be accessed and used by JavaScript.\nRead-only.",
                    "isMethod": false,
                    "_": 8517,
                    "source": "\n\n    /**\n     * Returns an object containing as its members all the functions exported from the\n     * WebAssembly module instance, to allow them to be accessed and used by JavaScript.\n     * Read-only.\n     */\n    readonly exports: Exports;",
                    "name": "exports",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "ref": "Exports",
                      "targs": [],
                      "isNullable": false,
                      "_": 8517,
                      "source": " Exports"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8528,
                "name": "LinkError",
                "generics": [],
                "doc": "The `WebAssembly.LinkError` object indicates an error during module instantiation\n(besides traps from the start function).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError)",
                "heritage": [
                  [
                    {
                      "ref": "Error",
                      "targs": [],
                      "isNullable": false,
                      "_": 8528,
                      "source": " Error"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8530,
                    "source": "\n    /** Creates a new WebAssembly.LinkError object. */\n    constructor(message?: string, options?: ErrorOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 8530,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ErrorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 8530,
                          "source": " ErrorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8544,
                "name": "Memory",
                "generics": [],
                "doc": "The `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that\nholds the raw bytes of memory accessed by a WebAssembly Instance.\n\nA memory created by JavaScript or in WebAssembly code will be accessible and mutable\nfrom both JavaScript and WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8546,
                    "source": "\n    /** Creates a new `Memory` object. */\n    constructor(descriptor: MemoryDescriptor);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "descriptor",
                        "type": {
                          "ref": "MemoryDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 8546,
                          "source": " MemoryDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "An accessor property that returns the buffer contained in the memory.",
                    "isMethod": false,
                    "_": 8549,
                    "source": "\n\n    /** An accessor property that returns the buffer contained in the memory. */\n    readonly buffer: ArrayBuffer | SharedArrayBuffer;",
                    "name": "buffer",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "union": [
                        {
                          "ref": "ArrayBuffer",
                          "targs": [],
                          "isNullable": false,
                          "_": 8549,
                          "source": " ArrayBuffer"
                        },
                        {
                          "ref": "SharedArrayBuffer",
                          "targs": [],
                          "isNullable": false,
                          "_": 8549,
                          "source": " SharedArrayBuffer"
                        }
                      ],
                      "isNullable": false,
                      "_": 8549,
                      "source": " ArrayBuffer | SharedArrayBuffer"
                    }
                  },
                  {
                    "doc": "Increases the size of the memory instance by a specified number of WebAssembly\n pages (each one is 64KB in size).",
                    "isMethod": true,
                    "_": 8555,
                    "source": "\n\n    /**\n     * Increases the size of the memory instance by a specified number of WebAssembly\n     * pages (each one is 64KB in size).\n     */\n    grow(delta: number): number;",
                    "name": "grow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "delta",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 8555,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8555,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8566,
                "name": "Module",
                "generics": [],
                "doc": "A `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled\nby the browser â this can be efficiently shared with Workers, and instantiated multiple times.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8568,
                    "source": "\n    /** Creates a new `Module` object. */\n    constructor(bytes: BufferSource);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "bytes",
                        "type": {
                          "ref": "BufferSource",
                          "targs": [],
                          "isNullable": false,
                          "_": 8568,
                          "source": " BufferSource"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Given a `Module` and string, returns a copy of the contents of all custom sections in the\nmodule with the given string name.",
                    "isMethod": true,
                    "_": 8574,
                    "source": "\n\n    /**\n     * Given a `Module` and string, returns a copy of the contents of all custom sections in the\n     * module with the given string name.\n     */\n    static customSections(\n      moduleObject: Module,\n      sectionName: string,\n    ): ArrayBuffer[];",
                    "name": "customSections",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "moduleObject",
                        "type": {
                          "ref": "Module",
                          "targs": [],
                          "isNullable": false,
                          "_": 8575,
                          "source": " Module"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "sectionName",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 8576,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "ArrayBuffer",
                          "targs": [],
                          "isNullable": false,
                          "_": 8577,
                          "source": " ArrayBuffer"
                        }
                      ],
                      "isNullable": false,
                      "_": 8577,
                      "source": " ArrayBuffer[]"
                    }
                  },
                  {
                    "doc": "Given a `Module`, returns an array containing descriptions of all the declared exports.",
                    "isMethod": true,
                    "_": 8580,
                    "source": "\n\n    /** Given a `Module`, returns an array containing descriptions of all the declared exports. */\n    static exports(moduleObject: Module): ModuleExportDescriptor[];",
                    "name": "exports",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "moduleObject",
                        "type": {
                          "ref": "Module",
                          "targs": [],
                          "isNullable": false,
                          "_": 8580,
                          "source": " Module"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "ModuleExportDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 8580,
                          "source": " ModuleExportDescriptor"
                        }
                      ],
                      "isNullable": false,
                      "_": 8580,
                      "source": " ModuleExportDescriptor[]"
                    }
                  },
                  {
                    "doc": "Given a `Module`, returns an array containing descriptions of all the declared imports.",
                    "isMethod": true,
                    "_": 8583,
                    "source": "\n\n    /** Given a `Module`, returns an array containing descriptions of all the declared imports. */\n    static imports(moduleObject: Module): ModuleImportDescriptor[];",
                    "name": "imports",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": true,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "moduleObject",
                        "type": {
                          "ref": "Module",
                          "targs": [],
                          "isNullable": false,
                          "_": 8583,
                          "source": " Module"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "ref": "ModuleImportDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 8583,
                          "source": " ModuleImportDescriptor"
                        }
                      ],
                      "isNullable": false,
                      "_": 8583,
                      "source": " ModuleImportDescriptor[]"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8594,
                "name": "RuntimeError",
                "generics": [],
                "doc": "The `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly\nspecifies a trap.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError)",
                "heritage": [
                  [
                    {
                      "ref": "Error",
                      "targs": [],
                      "isNullable": false,
                      "_": 8594,
                      "source": " Error"
                    }
                  ]
                ],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8596,
                    "source": "\n    /** Creates a new `WebAssembly.RuntimeError` object. */\n    constructor(message?: string, options?: ErrorOptions);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "message",
                        "type": {
                          "core": "string",
                          "isNullable": false,
                          "_": 8596,
                          "source": " string"
                        },
                        "varargs": false,
                        "isNullable": true
                      },
                      {
                        "name": "options",
                        "type": {
                          "ref": "ErrorOptions",
                          "targs": [],
                          "isNullable": false,
                          "_": 8596,
                          "source": " ErrorOptions"
                        },
                        "varargs": false,
                        "isNullable": true
                      }
                    ]
                  }
                ],
                "members": [],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8609,
                "name": "Table",
                "generics": [],
                "doc": "The `WebAssembly.Table()` object is a JavaScript wrapper object â an array-like structure\nrepresenting a WebAssembly Table, which stores function references. A table created by\nJavaScript or in WebAssembly code will be accessible and mutable from both JavaScript\nand WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table)",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [
                  {
                    "doc": "",
                    "isMethod": true,
                    "_": 8611,
                    "source": "\n    /** Creates a new `Table` object. */\n    constructor(descriptor: TableDescriptor);",
                    "name": "__new",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "descriptor",
                        "type": {
                          "ref": "TableDescriptor",
                          "targs": [],
                          "isNullable": false,
                          "_": 8611,
                          "source": " TableDescriptor"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ]
                  }
                ],
                "members": [
                  {
                    "doc": "Returns the length of the table, i.e. the number of elements.",
                    "isMethod": false,
                    "_": 8614,
                    "source": "\n\n    /** Returns the length of the table, i.e. the number of elements. */\n    readonly length: number;",
                    "name": "length",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": true,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8614,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Accessor function â gets the element stored at a given index.",
                    "isMethod": true,
                    "_": 8617,
                    "source": "\n\n    /** Accessor function â gets the element stored at a given index. */\n    get(index: number): Function | null;",
                    "name": "get",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "index",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 8617,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "union": [
                        {
                          "ref": "Function",
                          "targs": [],
                          "isNullable": false,
                          "_": 8617,
                          "source": " Function"
                        },
                        {
                          "core": "null",
                          "isNullable": false,
                          "_": 8617,
                          "source": " null"
                        }
                      ],
                      "isNullable": false,
                      "_": 8617,
                      "source": " Function | null"
                    }
                  },
                  {
                    "doc": "Increases the size of the `Table` instance by a specified number of elements.",
                    "isMethod": true,
                    "_": 8620,
                    "source": "\n\n    /** Increases the size of the `Table` instance by a specified number of elements. */\n    grow(delta: number): number;",
                    "name": "grow",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "delta",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 8620,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8620,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "Sets an element stored at a given index to a given value.",
                    "isMethod": true,
                    "_": 8623,
                    "source": "\n\n    /** Sets an element stored at a given index to a given value. */\n    set(index: number, value: Function | null): void;",
                    "name": "set",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "params": [
                      {
                        "name": "index",
                        "type": {
                          "core": "number",
                          "isNullable": false,
                          "_": 8623,
                          "source": " number"
                        },
                        "varargs": false,
                        "isNullable": false
                      },
                      {
                        "name": "value",
                        "type": {
                          "union": [
                            {
                              "ref": "Function",
                              "targs": [],
                              "isNullable": false,
                              "_": 8623,
                              "source": " Function"
                            },
                            {
                              "core": "null",
                              "isNullable": false,
                              "_": 8623,
                              "source": " null"
                            }
                          ],
                          "isNullable": false,
                          "_": 8623,
                          "source": " Function | null"
                        },
                        "varargs": false,
                        "isNullable": false
                      }
                    ],
                    "type": {
                      "core": "void",
                      "isNullable": false,
                      "_": 8623,
                      "source": " void"
                    }
                  }
                ],
                "calls": [],
                "isClass": true
              },
              {
                "_": 8631,
                "name": "GlobalDescriptor",
                "generics": [],
                "doc": "The `GlobalDescriptor` describes the options you can pass to\n`new WebAssembly.Global()`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8632,
                    "source": "\n    mutable?: boolean;",
                    "name": "mutable",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8632,
                      "source": " boolean"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8633,
                    "source": "\n    value: ValueType;",
                    "name": "value",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ValueType",
                      "targs": [],
                      "isNullable": false,
                      "_": 8633,
                      "source": " ValueType"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8641,
                "name": "MemoryDescriptor",
                "generics": [],
                "doc": "The `MemoryDescriptor` describes the options you can pass to\n`new WebAssembly.Memory()`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8642,
                    "source": "\n    initial: number;",
                    "name": "initial",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8642,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8643,
                    "source": "\n    maximum?: number;",
                    "name": "maximum",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8643,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8644,
                    "source": "\n    shared?: boolean;",
                    "name": "shared",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "boolean",
                      "isNullable": false,
                      "_": 8644,
                      "source": " boolean"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8652,
                "name": "ModuleExportDescriptor",
                "generics": [],
                "doc": "A `ModuleExportDescriptor` is the description of a declared export in a\n`WebAssembly.Module`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8653,
                    "source": "\n    kind: ImportExportKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ImportExportKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 8653,
                      "source": " ImportExportKind"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8654,
                    "source": "\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8654,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8662,
                "name": "ModuleImportDescriptor",
                "generics": [],
                "doc": "A `ModuleImportDescriptor` is the description of a declared import in a\n`WebAssembly.Module`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8663,
                    "source": "\n    kind: ImportExportKind;",
                    "name": "kind",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "ImportExportKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 8663,
                      "source": " ImportExportKind"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8664,
                    "source": "\n    module: string;",
                    "name": "module",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8664,
                      "source": " string"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8665,
                    "source": "\n    name: string;",
                    "name": "name",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "string",
                      "isNullable": false,
                      "_": 8665,
                      "source": " string"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8673,
                "name": "TableDescriptor",
                "generics": [],
                "doc": "The `TableDescriptor` describes the options you can pass to\n`new WebAssembly.Table()`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8674,
                    "source": "\n    element: TableKind;",
                    "name": "element",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "TableKind",
                      "targs": [],
                      "isNullable": false,
                      "_": 8674,
                      "source": " TableKind"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8675,
                    "source": "\n    initial: number;",
                    "name": "initial",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8675,
                      "source": " number"
                    }
                  },
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8676,
                    "source": "\n    maximum?: number;",
                    "name": "maximum",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": true,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "core": "number",
                      "isNullable": false,
                      "_": 8676,
                      "source": " number"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              },
              {
                "_": 8683,
                "name": "WebAssemblyInstantiatedSource",
                "generics": [],
                "doc": "The value returned from `WebAssembly.instantiate`.",
                "heritage": [],
                "isInline": false,
                "parent": "",
                "source": "",
                "indexes": [],
                "ctors": [],
                "members": [
                  {
                    "doc": "",
                    "isMethod": false,
                    "_": 8685,
                    "source": "\n    /* A `WebAssembly.Instance` object that contains all the exported WebAssembly functions. */\n    instance: Instance;",
                    "name": "instance",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 8685,
                      "source": " Instance"
                    }
                  },
                  {
                    "doc": "A `WebAssembly.Module` object representing the compiled WebAssembly module.\n This `Module` can be instantiated again, or shared via postMessage().",
                    "isMethod": false,
                    "_": 8691,
                    "source": "\n\n    /**\n     * A `WebAssembly.Module` object representing the compiled WebAssembly module.\n     * This `Module` can be instantiated again, or shared via postMessage().\n     */\n    module: Module;",
                    "name": "module",
                    "generics": [],
                    "isGetter": false,
                    "isSetter": false,
                    "isNullable": false,
                    "isStatic": false,
                    "isReadonly": false,
                    "isPrivate": false,
                    "type": {
                      "ref": "Module",
                      "targs": [],
                      "isNullable": false,
                      "_": 8691,
                      "source": " Module"
                    }
                  }
                ],
                "calls": [],
                "isClass": false
              }
            ],
            "typedefs": [
              {
                "name": "ImportExportKind",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"function\"",
                      "isNullable": false,
                      "_": 8695,
                      "source": " \"function\""
                    },
                    {
                      "core": "\"global\"",
                      "isNullable": false,
                      "_": 8695,
                      "source": " \"global\""
                    },
                    {
                      "core": "\"memory\"",
                      "isNullable": false,
                      "_": 8695,
                      "source": " \"memory\""
                    },
                    {
                      "core": "\"table\"",
                      "isNullable": false,
                      "_": 8695,
                      "source": " \"table\""
                    }
                  ],
                  "isNullable": false,
                  "_": 8695,
                  "source": " \"function\" | \"global\" | \"memory\" | \"table\"",
                  "parent": "ImportExportKind"
                },
                "doc": "",
                "_": 8695,
                "source": "\n\n  /** @category WebAssembly */\n  export type ImportExportKind = \"function\" | \"global\" | \"memory\" | \"table\";"
              },
              {
                "name": "TableKind",
                "generics": [],
                "type": {
                  "core": "\"anyfunc\"",
                  "isNullable": false,
                  "_": 8697,
                  "source": " \"anyfunc\"",
                  "parent": "TableKind"
                },
                "doc": "",
                "_": 8697,
                "source": "\n  /** @category WebAssembly */\n  export type TableKind = \"anyfunc\";"
              },
              {
                "name": "ValueType",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "core": "\"f32\"",
                      "isNullable": false,
                      "_": 8699,
                      "source": " \"f32\""
                    },
                    {
                      "core": "\"f64\"",
                      "isNullable": false,
                      "_": 8699,
                      "source": " \"f64\""
                    },
                    {
                      "core": "\"i32\"",
                      "isNullable": false,
                      "_": 8699,
                      "source": " \"i32\""
                    },
                    {
                      "core": "\"i64\"",
                      "isNullable": false,
                      "_": 8699,
                      "source": " \"i64\""
                    }
                  ],
                  "isNullable": false,
                  "_": 8699,
                  "source": " \"f32\" | \"f64\" | \"i32\" | \"i64\"",
                  "parent": "ValueType"
                },
                "doc": "",
                "_": 8699,
                "source": "\n  /** @category WebAssembly */\n  export type ValueType = \"f32\" | \"f64\" | \"i32\" | \"i64\";"
              },
              {
                "name": "ExportValue",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "Function",
                      "targs": [],
                      "isNullable": false,
                      "_": 8701,
                      "source": " Function"
                    },
                    {
                      "ref": "Global",
                      "targs": [],
                      "isNullable": false,
                      "_": 8701,
                      "source": " Global"
                    },
                    {
                      "ref": "Memory",
                      "targs": [],
                      "isNullable": false,
                      "_": 8701,
                      "source": " Memory"
                    },
                    {
                      "ref": "Table",
                      "targs": [],
                      "isNullable": false,
                      "_": 8701,
                      "source": " Table"
                    }
                  ],
                  "isNullable": false,
                  "_": 8701,
                  "source": " Function | Global | Memory | Table",
                  "parent": "ExportValue"
                },
                "doc": "",
                "_": 8701,
                "source": "\n  /** @category WebAssembly */\n  export type ExportValue = Function | Global | Memory | Table;"
              },
              {
                "name": "Exports",
                "generics": [],
                "type": {
                  "ref": "Record",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 8703,
                      "source": "string"
                    },
                    {
                      "ref": "ExportValue",
                      "targs": [],
                      "isNullable": false,
                      "_": 8703,
                      "source": " ExportValue"
                    }
                  ],
                  "isNullable": false,
                  "_": 8703,
                  "source": " Record<string, ExportValue>",
                  "parent": "Exports"
                },
                "doc": "",
                "_": 8703,
                "source": "\n  /** @category WebAssembly */\n  export type Exports = Record<string, ExportValue>;"
              },
              {
                "name": "ImportValue",
                "generics": [],
                "type": {
                  "union": [
                    {
                      "ref": "ExportValue",
                      "targs": [],
                      "isNullable": false,
                      "_": 8705,
                      "source": " ExportValue"
                    },
                    {
                      "core": "number",
                      "isNullable": false,
                      "_": 8705,
                      "source": " number"
                    }
                  ],
                  "isNullable": false,
                  "_": 8705,
                  "source": " ExportValue | number",
                  "parent": "ImportValue"
                },
                "doc": "",
                "_": 8705,
                "source": "\n  /** @category WebAssembly */\n  export type ImportValue = ExportValue | number;"
              },
              {
                "name": "ModuleImports",
                "generics": [],
                "type": {
                  "ref": "Record",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 8707,
                      "source": "string"
                    },
                    {
                      "ref": "ImportValue",
                      "targs": [],
                      "isNullable": false,
                      "_": 8707,
                      "source": " ImportValue"
                    }
                  ],
                  "isNullable": false,
                  "_": 8707,
                  "source": " Record<string, ImportValue>",
                  "parent": "ModuleImports"
                },
                "doc": "",
                "_": 8707,
                "source": "\n  /** @category WebAssembly */\n  export type ModuleImports = Record<string, ImportValue>;"
              },
              {
                "name": "Imports",
                "generics": [],
                "type": {
                  "ref": "Record",
                  "targs": [
                    {
                      "core": "string",
                      "isNullable": false,
                      "_": 8709,
                      "source": "string"
                    },
                    {
                      "ref": "ModuleImports",
                      "targs": [],
                      "isNullable": false,
                      "_": 8709,
                      "source": " ModuleImports"
                    }
                  ],
                  "isNullable": false,
                  "_": 8709,
                  "source": " Record<string, ModuleImports>",
                  "parent": "Imports"
                },
                "doc": "",
                "_": 8709,
                "source": "\n  /** @category WebAssembly */\n  export type Imports = Record<string, ModuleImports>;"
              }
            ],
            "modules": [],
            "funcs": [
              {
                "_": 8721,
                "name": "compile",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "Module",
                      "targs": [],
                      "isNullable": false,
                      "_": 8721,
                      "source": "Module"
                    }
                  ],
                  "isNullable": false,
                  "_": 8721,
                  "source": " Promise<Module>"
                },
                "generics": [],
                "doc": "The `WebAssembly.compile()` function compiles WebAssembly binary code into a\n`WebAssembly.Module` object. This function is useful if it is necessary to compile\na module before it can be instantiated (otherwise, the `WebAssembly.instantiate()`\nfunction should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)",
                "params": [
                  {
                    "name": "bytes",
                    "type": {
                      "ref": "BufferSource",
                      "targs": [],
                      "isNullable": false,
                      "_": 8721,
                      "source": " BufferSource"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * The `WebAssembly.compile()` function compiles WebAssembly binary code into a\n   * `WebAssembly.Module` object. This function is useful if it is necessary to compile\n   * a module before it can be instantiated (otherwise, the `WebAssembly.instantiate()`\n   * function should be used).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)\n   *\n   * @category WebAssembly\n   */\n  export function compile(bytes: BufferSource): Promise<Module>;"
              },
              {
                "_": 8733,
                "name": "compileStreaming",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "Module",
                      "targs": [],
                      "isNullable": false,
                      "_": 8735,
                      "source": "Module"
                    }
                  ],
                  "isNullable": false,
                  "_": 8735,
                  "source": " Promise<Module>"
                },
                "generics": [],
                "doc": "The `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module`\ndirectly from a streamed underlying source. This function is useful if it is\nnecessary to a compile a module before it can be instantiated (otherwise, the\n`WebAssembly.instantiateStreaming()` function should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)",
                "params": [
                  {
                    "name": "source",
                    "type": {
                      "union": [
                        {
                          "ref": "Response",
                          "targs": [],
                          "isNullable": false,
                          "_": 8734,
                          "source": " Response"
                        },
                        {
                          "ref": "Promise",
                          "targs": [
                            {
                              "ref": "Response",
                              "targs": [],
                              "isNullable": false,
                              "_": 8734,
                              "source": "Response"
                            }
                          ],
                          "isNullable": false,
                          "_": 8734,
                          "source": " Promise<Response>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8734,
                      "source": " Response | Promise<Response>"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * The `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module`\n   * directly from a streamed underlying source. This function is useful if it is\n   * necessary to a compile a module before it can be instantiated (otherwise, the\n   * `WebAssembly.instantiateStreaming()` function should be used).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)\n   *\n   * @category WebAssembly\n   */\n  export function compileStreaming(\n    source: Response | Promise<Response>,\n  ): Promise<Module>;"
              },
              {
                "_": 8750,
                "name": "instantiate",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "WebAssemblyInstantiatedSource",
                      "targs": [],
                      "isNullable": false,
                      "_": 8753,
                      "source": "WebAssemblyInstantiatedSource"
                    }
                  ],
                  "isNullable": false,
                  "_": 8753,
                  "source": " Promise<WebAssemblyInstantiatedSource>"
                },
                "generics": [],
                "doc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed\narray or ArrayBuffer, and performs both compilation and instantiation in one step.\nThe returned Promise resolves to both a compiled WebAssembly.Module and its first\nWebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\nThe WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes an already-compiled WebAssembly.Module and returns\na Promise that resolves to an Instance of that Module. This overload is useful\nif the Module has already been compiled.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)",
                "params": [
                  {
                    "name": "bytes",
                    "type": {
                      "ref": "BufferSource",
                      "targs": [],
                      "isNullable": false,
                      "_": 8751,
                      "source": " BufferSource"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "importObject",
                    "type": {
                      "ref": "Imports",
                      "targs": [],
                      "isNullable": false,
                      "_": 8752,
                      "source": " Imports"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * The WebAssembly.instantiate() function allows you to compile and instantiate\n   * WebAssembly code.\n   *\n   * This overload takes the WebAssembly binary code, in the form of a typed\n   * array or ArrayBuffer, and performs both compilation and instantiation in one step.\n   * The returned Promise resolves to both a compiled WebAssembly.Module and its first\n   * WebAssembly.Instance.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n   *\n   * @category WebAssembly\n   */\n  export function instantiate(\n    bytes: BufferSource,\n    importObject?: Imports,\n  ): Promise<WebAssemblyInstantiatedSource>;"
              },
              {
                "_": 8767,
                "name": "instantiate",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "Instance",
                      "targs": [],
                      "isNullable": false,
                      "_": 8770,
                      "source": "Instance"
                    }
                  ],
                  "isNullable": false,
                  "_": 8770,
                  "source": " Promise<Instance>"
                },
                "generics": [],
                "doc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed\narray or ArrayBuffer, and performs both compilation and instantiation in one step.\nThe returned Promise resolves to both a compiled WebAssembly.Module and its first\nWebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\nThe WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes an already-compiled WebAssembly.Module and returns\na Promise that resolves to an Instance of that Module. This overload is useful\nif the Module has already been compiled.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)",
                "params": [
                  {
                    "name": "moduleObject",
                    "type": {
                      "ref": "Module",
                      "targs": [],
                      "isNullable": false,
                      "_": 8768,
                      "source": " Module"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "importObject",
                    "type": {
                      "ref": "Imports",
                      "targs": [],
                      "isNullable": false,
                      "_": 8769,
                      "source": " Imports"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * The WebAssembly.instantiate() function allows you to compile and instantiate\n   * WebAssembly code.\n   *\n   * This overload takes an already-compiled WebAssembly.Module and returns\n   * a Promise that resolves to an Instance of that Module. This overload is useful\n   * if the Module has already been compiled.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)\n   *\n   * @category WebAssembly\n   */\n  export function instantiate(\n    moduleObject: Module,\n    importObject?: Imports,\n  ): Promise<Instance>;"
              },
              {
                "_": 8781,
                "name": "instantiateStreaming",
                "type": {
                  "ref": "Promise",
                  "targs": [
                    {
                      "ref": "WebAssemblyInstantiatedSource",
                      "targs": [],
                      "isNullable": false,
                      "_": 8784,
                      "source": "WebAssemblyInstantiatedSource"
                    }
                  ],
                  "isNullable": false,
                  "_": 8784,
                  "source": " Promise<WebAssemblyInstantiatedSource>"
                },
                "generics": [],
                "doc": "The `WebAssembly.instantiateStreaming()` function compiles and instantiates a\nWebAssembly module directly from a streamed underlying source. This is the most\nefficient, optimized way to load wasm code.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)",
                "params": [
                  {
                    "name": "response",
                    "type": {
                      "union": [
                        {
                          "ref": "Response",
                          "targs": [],
                          "isNullable": false,
                          "_": 8782,
                          "source": " Response"
                        },
                        {
                          "ref": "PromiseLike",
                          "targs": [
                            {
                              "ref": "Response",
                              "targs": [],
                              "isNullable": false,
                              "_": 8782,
                              "source": "Response"
                            }
                          ],
                          "isNullable": false,
                          "_": 8782,
                          "source": " PromiseLike<Response>"
                        }
                      ],
                      "isNullable": false,
                      "_": 8782,
                      "source": " Response | PromiseLike<Response>"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "importObject",
                    "type": {
                      "ref": "Imports",
                      "targs": [],
                      "isNullable": false,
                      "_": 8783,
                      "source": " Imports"
                    },
                    "varargs": false,
                    "isNullable": true
                  }
                ],
                "source": "\n\n  /**\n   * The `WebAssembly.instantiateStreaming()` function compiles and instantiates a\n   * WebAssembly module directly from a streamed underlying source. This is the most\n   * efficient, optimized way to load wasm code.\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)\n   *\n   * @category WebAssembly\n   */\n  export function instantiateStreaming(\n    response: Response | PromiseLike<Response>,\n    importObject?: Imports,\n  ): Promise<WebAssemblyInstantiatedSource>;"
              },
              {
                "_": 8795,
                "name": "validate",
                "type": {
                  "core": "boolean",
                  "isNullable": false,
                  "_": 8795,
                  "source": " boolean"
                },
                "generics": [],
                "doc": "The `WebAssembly.validate()` function validates a given typed array of\nWebAssembly binary code, returning whether the bytes form a valid wasm\nmodule (`true`) or not (`false`).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)",
                "params": [
                  {
                    "name": "bytes",
                    "type": {
                      "ref": "BufferSource",
                      "targs": [],
                      "isNullable": false,
                      "_": 8795,
                      "source": " BufferSource"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "source": "\n\n  /**\n   * The `WebAssembly.validate()` function validates a given typed array of\n   * WebAssembly binary code, returning whether the bytes form a valid wasm\n   * module (`true`) or not (`false`).\n   *\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)\n   *\n   * @category WebAssembly\n   */\n  export function validate(bytes: BufferSource): boolean;"
              }
            ],
            "vars": [],
            "enums": []
          }
        }
      ],
      "funcs": [
        {
          "_": 6170,
          "name": "atob",
          "type": {
            "core": "string",
            "isNullable": false,
            "_": 6170,
            "source": " string"
          },
          "generics": [],
          "doc": "Decodes a string of data which has been encoded using base-64 encoding.\n\n```\nconsole.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'\n```",
          "params": [
            {
              "name": "s",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6170,
                "source": " string"
              },
              "varargs": false,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Decodes a string of data which has been encoded using base-64 encoding.\n *\n * ```\n * console.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'\n * ```\n *\n * @category Encoding API\n */\ndeclare function atob(s: string): string;"
        },
        {
          "_": 6180,
          "name": "btoa",
          "type": {
            "core": "string",
            "isNullable": false,
            "_": 6180,
            "source": " string"
          },
          "generics": [],
          "doc": "Creates a base-64 ASCII encoded string from the input string.\n\n```\nconsole.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"\n```",
          "params": [
            {
              "name": "s",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 6180,
                "source": " string"
              },
              "varargs": false,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Creates a base-64 ASCII encoded string from the input string.\n *\n * ```\n * console.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"\n * ```\n *\n * @category Encoding API\n */\ndeclare function btoa(s: string): string;"
        },
        {
          "_": 6937,
          "name": "structuredClone",
          "type": {
            "core": "any",
            "isNullable": false,
            "_": 6940,
            "source": " any"
          },
          "generics": [],
          "doc": "Creates a deep copy of a given value using the structured clone algorithm.\n\nUnlike a shallow copy, a deep copy does not hold the same references as the\nsource object, meaning its properties can be changed without affecting the\nsource. For more details, see\n[MDN](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy).\n\nThrows a `DataCloneError` if any part of the input value is not\nserializable.",
          "params": [
            {
              "name": "value",
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 6938,
                "source": " any"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "options",
              "type": {
                "ref": "StructuredSerializeOptions",
                "targs": [],
                "isNullable": false,
                "_": 6939,
                "source": " StructuredSerializeOptions"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/**\n * Creates a deep copy of a given value using the structured clone algorithm.\n *\n * Unlike a shallow copy, a deep copy does not hold the same references as the\n * source object, meaning its properties can be changed without affecting the\n * source. For more details, see\n * [MDN](https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy).\n *\n * Throws a `DataCloneError` if any part of the input value is not\n * serializable.\n *\n * @example\n * ```ts\n * const object = { x: 0, y: 1 };\n *\n * const deepCopy = structuredClone(object);\n * deepCopy.x = 1;\n * console.log(deepCopy.x, object.x); // 1 0\n *\n * const shallowCopy = object;\n * shallowCopy.x = 1;\n * // shallowCopy.x is pointing to the same location in memory as object.x\n * console.log(shallowCopy.x, object.x); // 1 1\n * ```\n *\n * @category DOM APIs\n */\ndeclare function structuredClone(\n  value: any,\n  options?: StructuredSerializeOptions,\n): any;"
        },
        {
          "_": 7014,
          "name": "reportError",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 7016,
            "source": " void"
          },
          "generics": [],
          "doc": "Dispatch an uncaught exception. Similar to a synchronous version of:\n```ts\nsetTimeout(() => { throw error; }, 0);\n```\nThe error can not be caught with a `try/catch` block. An error event will\nbe dispatched to the global scope. You can prevent the error from being\nreported to the console with `Event.prototype.preventDefault()`:\n```ts\naddEventListener(\"error\", (event) => {\n event.preventDefault();\n});\nreportError(new Error(\"foo\")); // Will not be reported.\n```\nIn Deno, this error will terminate the process if not intercepted like above.",
          "params": [
            {
              "name": "error",
              "type": {
                "core": "any",
                "isNullable": false,
                "_": 7015,
                "source": " any"
              },
              "varargs": false,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Dispatch an uncaught exception. Similar to a synchronous version of:\n * ```ts\n * setTimeout(() => { throw error; }, 0);\n * ```\n * The error can not be caught with a `try/catch` block. An error event will\n * be dispatched to the global scope. You can prevent the error from being\n * reported to the console with `Event.prototype.preventDefault()`:\n * ```ts\n * addEventListener(\"error\", (event) => {\n *   event.preventDefault();\n * });\n * reportError(new Error(\"foo\")); // Will not be reported.\n * ```\n * In Deno, this error will terminate the process if not intercepted like above.\n *\n * @category Web APIs\n */\ndeclare function reportError(\n  error: any,\n): void;"
        },
        {
          "_": 7486,
          "name": "fetch",
          "type": {
            "ref": "Promise",
            "targs": [
              {
                "ref": "Response",
                "targs": [],
                "isNullable": false,
                "_": 7489,
                "source": "Response"
              }
            ],
            "isNullable": false,
            "_": 7489,
            "source": " Promise<Response>"
          },
          "generics": [],
          "doc": "Fetch a resource from the network. It returns a `Promise` that resolves to the\n`Response` to that `Request`, whether it is successful or not.\n\n```ts\nconst response = await fetch(\"http://my.json.host/data.json\");\nconsole.log(response.status);  // e.g. 200\nconsole.log(response.statusText); // e.g. \"OK\"\nconst jsonData = await response.json();\n```",
          "params": [
            {
              "name": "input",
              "type": {
                "union": [
                  {
                    "ref": "URL",
                    "targs": [],
                    "isNullable": false,
                    "_": 7487,
                    "source": " URL"
                  },
                  {
                    "ref": "Request",
                    "targs": [],
                    "isNullable": false,
                    "_": 7487,
                    "source": " Request"
                  },
                  {
                    "core": "string",
                    "isNullable": false,
                    "_": 7487,
                    "source": " string"
                  }
                ],
                "isNullable": false,
                "_": 7487,
                "source": " URL | Request | string"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "init",
              "type": {
                "ref": "RequestInit",
                "targs": [],
                "isNullable": false,
                "_": 7488,
                "source": " RequestInit"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/** Fetch a resource from the network. It returns a `Promise` that resolves to the\n * `Response` to that `Request`, whether it is successful or not.\n *\n * ```ts\n * const response = await fetch(\"http://my.json.host/data.json\");\n * console.log(response.status);  // e.g. 200\n * console.log(response.statusText); // e.g. \"OK\"\n * const jsonData = await response.json();\n * ```\n *\n * @tags allow-net, allow-read\n * @category Fetch API\n */\ndeclare function fetch(\n  input: URL | Request | string,\n  init?: RequestInit,\n): Promise<Response>;"
        },
        {
          "_": 8807,
          "name": "setTimeout",
          "type": {
            "core": "number",
            "isNullable": false,
            "_": 8814,
            "source": " number"
          },
          "generics": [],
          "doc": "Sets a timer which executes a function once after the timer expires. Returns\nan id which may be used to cancel the timeout.\n\n```ts\nsetTimeout(() => { console.log('hello'); }, 500);\n```",
          "params": [
            {
              "name": "cb",
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 8809,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "args",
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 8809,
                          "source": " any"
                        }
                      ],
                      "isNullable": false,
                      "_": 8809,
                      "source": " any[]"
                    },
                    "varargs": true,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 8809,
                "source": " (...args: any[]) => void"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "delay",
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8811,
                "source": " number"
              },
              "varargs": false,
              "isNullable": true
            },
            {
              "name": "args",
              "type": {
                "core": "array",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 8813,
                    "source": " any"
                  }
                ],
                "isNullable": false,
                "_": 8813,
                "source": " any[]"
              },
              "varargs": true,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Sets a timer which executes a function once after the timer expires. Returns\n * an id which may be used to cancel the timeout.\n *\n * ```ts\n * setTimeout(() => { console.log('hello'); }, 500);\n * ```\n *\n * @category Timers\n */\ndeclare function setTimeout(\n  /** callback function to execute when timer expires */\n  cb: (...args: any[]) => void,\n  /** delay in ms */\n  delay?: number,\n  /** arguments passed to callback function */\n  ...args: any[]\n): number;"
        },
        {
          "_": 8825,
          "name": "setInterval",
          "type": {
            "core": "number",
            "isNullable": false,
            "_": 8832,
            "source": " number"
          },
          "generics": [],
          "doc": "Repeatedly calls a function , with a fixed time delay between each call.\n\n```ts\n// Outputs 'hello' to the console every 500ms\nsetInterval(() => { console.log('hello'); }, 500);\n```",
          "params": [
            {
              "name": "cb",
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "void",
                  "isNullable": false,
                  "_": 8827,
                  "source": " void"
                },
                "params": [
                  {
                    "name": "args",
                    "type": {
                      "core": "array",
                      "targs": [
                        {
                          "core": "any",
                          "isNullable": false,
                          "_": 8827,
                          "source": " any"
                        }
                      ],
                      "isNullable": false,
                      "_": 8827,
                      "source": " any[]"
                    },
                    "varargs": true,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 8827,
                "source": " (...args: any[]) => void"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "delay",
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8829,
                "source": " number"
              },
              "varargs": false,
              "isNullable": true
            },
            {
              "name": "args",
              "type": {
                "core": "array",
                "targs": [
                  {
                    "core": "any",
                    "isNullable": false,
                    "_": 8831,
                    "source": " any"
                  }
                ],
                "isNullable": false,
                "_": 8831,
                "source": " any[]"
              },
              "varargs": true,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Repeatedly calls a function , with a fixed time delay between each call.\n *\n * ```ts\n * // Outputs 'hello' to the console every 500ms\n * setInterval(() => { console.log('hello'); }, 500);\n * ```\n *\n * @category Timers\n */\ndeclare function setInterval(\n  /** callback function to execute when timer expires */\n  cb: (...args: any[]) => void,\n  /** delay in ms */\n  delay?: number,\n  /** arguments passed to callback function */\n  ...args: any[]\n): number;"
        },
        {
          "_": 8845,
          "name": "clearInterval",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 8845,
            "source": " void"
          },
          "generics": [],
          "doc": "Cancels a timed, repeating action which was previously started by a call\nto `setInterval()`\n\n```ts\nconst id = setInterval(() => {console.log('hello');}, 500);\n// ...\nclearInterval(id);\n```",
          "params": [
            {
              "name": "id",
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8845,
                "source": " number"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/** Cancels a timed, repeating action which was previously started by a call\n * to `setInterval()`\n *\n * ```ts\n * const id = setInterval(() => {console.log('hello');}, 500);\n * // ...\n * clearInterval(id);\n * ```\n *\n * @category Timers\n */\ndeclare function clearInterval(id?: number): void;"
        },
        {
          "_": 8857,
          "name": "clearTimeout",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 8857,
            "source": " void"
          },
          "generics": [],
          "doc": "Cancels a scheduled action initiated by `setTimeout()`\n\n```ts\nconst id = setTimeout(() => {console.log('hello');}, 500);\n// ...\nclearTimeout(id);\n```",
          "params": [
            {
              "name": "id",
              "type": {
                "core": "number",
                "isNullable": false,
                "_": 8857,
                "source": " number"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/** Cancels a scheduled action initiated by `setTimeout()`\n *\n * ```ts\n * const id = setTimeout(() => {console.log('hello');}, 500);\n * // ...\n * clearTimeout(id);\n * ```\n *\n * @category Timers\n */\ndeclare function clearTimeout(id?: number): void;"
        },
        {
          "_": 8876,
          "name": "queueMicrotask",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 8876,
            "source": " void"
          },
          "generics": [],
          "doc": "A microtask is a short function which is executed after the function or\nmodule which created it exits and only if the JavaScript execution stack is\nempty, but before returning control to the event loop being used to drive the\nscript's execution environment. This event loop may be either the main event\nloop or the event loop driving a web worker.\n\n```ts\nqueueMicrotask(() => { console.log('This event loop stack is complete'); });\n```",
          "params": [
            {
              "name": "func",
              "type": {
                "ref": "VoidFunction",
                "targs": [],
                "isNullable": false,
                "_": 8876,
                "source": " VoidFunction"
              },
              "varargs": false,
              "isNullable": false
            }
          ],
          "source": "\n\n/** A microtask is a short function which is executed after the function or\n * module which created it exits and only if the JavaScript execution stack is\n * empty, but before returning control to the event loop being used to drive the\n * script's execution environment. This event loop may be either the main event\n * loop or the event loop driving a web worker.\n *\n * ```ts\n * queueMicrotask(() => { console.log('This event loop stack is complete'); });\n * ```\n *\n * @category Scheduling\n */\ndeclare function queueMicrotask(func: VoidFunction): void;"
        },
        {
          "_": 8889,
          "name": "dispatchEvent",
          "type": {
            "core": "boolean",
            "isNullable": false,
            "_": 8889,
            "source": " boolean"
          },
          "generics": [],
          "doc": "Dispatches an event in the global scope, synchronously invoking any\nregistered event listeners for this event in the appropriate order. Returns\nfalse if event is cancelable and at least one of the event handlers which\nhandled this event called Event.preventDefault(). Otherwise it returns true.\n\n```ts\ndispatchEvent(new Event('unload'));\n```",
          "params": [
            {
              "name": "event",
              "type": {
                "ref": "Event",
                "targs": [],
                "isNullable": false,
                "_": 8889,
                "source": " Event"
              },
              "varargs": false,
              "isNullable": false
            }
          ],
          "source": "\n\n/** Dispatches an event in the global scope, synchronously invoking any\n * registered event listeners for this event in the appropriate order. Returns\n * false if event is cancelable and at least one of the event handlers which\n * handled this event called Event.preventDefault(). Otherwise it returns true.\n *\n * ```ts\n * dispatchEvent(new Event('unload'));\n * ```\n *\n * @category DOM Events\n */\ndeclare function dispatchEvent(event: Event): boolean;"
        },
        {
          "_": 9318,
          "name": "alert",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 9318,
            "source": " void"
          },
          "generics": [],
          "doc": "Shows the given message and waits for the enter key pressed.\n\nIf the stdin is not interactive, it does nothing.",
          "params": [
            {
              "name": "message",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9318,
                "source": " string"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/**\n * Shows the given message and waits for the enter key pressed.\n *\n * If the stdin is not interactive, it does nothing.\n *\n * @category Web APIs\n *\n * @param message\n */\ndeclare function alert(message?: string): void;"
        },
        {
          "_": 9331,
          "name": "confirm",
          "type": {
            "core": "boolean",
            "isNullable": false,
            "_": 9331,
            "source": " boolean"
          },
          "generics": [],
          "doc": "Shows the given message and waits for the answer. Returns the user's answer as boolean.\n\nOnly `y` and `Y` are considered as true.\n\nIf the stdin is not interactive, it returns false.",
          "params": [
            {
              "name": "message",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9331,
                "source": " string"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/**\n * Shows the given message and waits for the answer. Returns the user's answer as boolean.\n *\n * Only `y` and `Y` are considered as true.\n *\n * If the stdin is not interactive, it returns false.\n *\n * @category Web APIs\n *\n * @param message\n */\ndeclare function confirm(message?: string): boolean;"
        },
        {
          "_": 9348,
          "name": "prompt",
          "type": {
            "union": [
              {
                "core": "string",
                "isNullable": false,
                "_": 9348,
                "source": " string"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9348,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9348,
            "source": " string | null"
          },
          "generics": [],
          "doc": "Shows the given message and waits for the user's input. Returns the user's input as string.\n\nIf the default value is given and the user inputs the empty string, then it returns the given\ndefault value.\n\nIf the default value is not given and the user inputs the empty string, it returns null.\n\nIf the stdin is not interactive, it returns null.",
          "params": [
            {
              "name": "message",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9348,
                "source": " string"
              },
              "varargs": false,
              "isNullable": true
            },
            {
              "name": "defaultValue",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9348,
                "source": " string"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/**\n * Shows the given message and waits for the user's input. Returns the user's input as string.\n *\n * If the default value is given and the user inputs the empty string, then it returns the given\n * default value.\n *\n * If the default value is not given and the user inputs the empty string, it returns null.\n *\n * If the stdin is not interactive, it returns null.\n *\n * @category Web APIs\n *\n * @param message\n * @param defaultValue\n */\ndeclare function prompt(message?: string, defaultValue?: string): string | null;"
        },
        {
          "_": 9361,
          "name": "addEventListener",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 9367,
            "source": " void"
          },
          "generics": [
            {
              "name": "K",
              "constraint": {
                "operator": 141,
                "type": {
                  "ref": "WindowEventMap",
                  "targs": [],
                  "isNullable": false,
                  "_": 9362,
                  "source": " WindowEventMap"
                },
                "isNullable": false,
                "_": 9362,
                "source": " keyof WindowEventMap"
              },
              "_": 9362,
              "source": "\n  K extends keyof WindowEventMap"
            }
          ],
          "doc": "Registers an event listener in the global scope, which will be called\nsynchronously whenever the event `type` is dispatched.\n\n```ts\naddEventListener('unload', () => { console.log('All finished!'); });\n...\ndispatchEvent(new Event('unload'));\n```",
          "params": [
            {
              "name": "type",
              "type": {
                "ref": "K",
                "targs": [],
                "isNullable": false,
                "_": 9364,
                "source": " K"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "listener",
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9365,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9365,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "index": {
                        "ref": "K",
                        "targs": [],
                        "isNullable": false,
                        "_": 9365,
                        "source": "K"
                      },
                      "obj": {
                        "ref": "WindowEventMap",
                        "targs": [],
                        "isNullable": false,
                        "_": 9365,
                        "source": " WindowEventMap"
                      },
                      "isNullable": false,
                      "_": 9365,
                      "source": " WindowEventMap[K]"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9365,
                "source": " (this: Window, ev: WindowEventMap[K]) => any"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "options",
              "type": {
                "union": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9366,
                    "source": " boolean"
                  },
                  {
                    "ref": "AddEventListenerOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9366,
                    "source": " AddEventListenerOptions"
                  }
                ],
                "isNullable": false,
                "_": 9366,
                "source": " boolean | AddEventListenerOptions"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/** Registers an event listener in the global scope, which will be called\n * synchronously whenever the event `type` is dispatched.\n *\n * ```ts\n * addEventListener('unload', () => { console.log('All finished!'); });\n * ...\n * dispatchEvent(new Event('unload'));\n * ```\n *\n * @category DOM Events\n */\ndeclare function addEventListener<\n  K extends keyof WindowEventMap,\n>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): void;"
        },
        {
          "_": 9369,
          "name": "addEventListener",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 9373,
            "source": " void"
          },
          "generics": [],
          "doc": "Registers an event listener in the global scope, which will be called\nsynchronously whenever the event `type` is dispatched.\n\n```ts\naddEventListener('unload', () => { console.log('All finished!'); });\n...\ndispatchEvent(new Event('unload'));\n```",
          "params": [
            {
              "name": "type",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9370,
                "source": " string"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "listener",
              "type": {
                "ref": "EventListenerOrEventListenerObject",
                "targs": [],
                "isNullable": false,
                "_": 9371,
                "source": " EventListenerOrEventListenerObject"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "options",
              "type": {
                "union": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9372,
                    "source": " boolean"
                  },
                  {
                    "ref": "AddEventListenerOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9372,
                    "source": " AddEventListenerOptions"
                  }
                ],
                "isNullable": false,
                "_": 9372,
                "source": " boolean | AddEventListenerOptions"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n/** @category DOM Events */\ndeclare function addEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n): void;"
        },
        {
          "_": 9385,
          "name": "removeEventListener",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 9391,
            "source": " void"
          },
          "generics": [
            {
              "name": "K",
              "constraint": {
                "operator": 141,
                "type": {
                  "ref": "WindowEventMap",
                  "targs": [],
                  "isNullable": false,
                  "_": 9386,
                  "source": " WindowEventMap"
                },
                "isNullable": false,
                "_": 9386,
                "source": " keyof WindowEventMap"
              },
              "_": 9386,
              "source": "\n  K extends keyof WindowEventMap"
            }
          ],
          "doc": "Remove a previously registered event listener from the global scope\n\n```ts\nconst listener = () => { console.log('hello'); };\naddEventListener('load', listener);\nremoveEventListener('load', listener);\n```",
          "params": [
            {
              "name": "type",
              "type": {
                "ref": "K",
                "targs": [],
                "isNullable": false,
                "_": 9388,
                "source": " K"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "listener",
              "type": {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9389,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9389,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "index": {
                        "ref": "K",
                        "targs": [],
                        "isNullable": false,
                        "_": 9389,
                        "source": "K"
                      },
                      "obj": {
                        "ref": "WindowEventMap",
                        "targs": [],
                        "isNullable": false,
                        "_": 9389,
                        "source": " WindowEventMap"
                      },
                      "isNullable": false,
                      "_": 9389,
                      "source": " WindowEventMap[K]"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9389,
                "source": " (this: Window, ev: WindowEventMap[K]) => any"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "options",
              "type": {
                "union": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9390,
                    "source": " boolean"
                  },
                  {
                    "ref": "EventListenerOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9390,
                    "source": " EventListenerOptions"
                  }
                ],
                "isNullable": false,
                "_": 9390,
                "source": " boolean | EventListenerOptions"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\n\n/** Remove a previously registered event listener from the global scope\n *\n * ```ts\n * const listener = () => { console.log('hello'); };\n * addEventListener('load', listener);\n * removeEventListener('load', listener);\n * ```\n *\n * @category DOM Events\n */\ndeclare function removeEventListener<\n  K extends keyof WindowEventMap,\n>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | EventListenerOptions,\n): void;"
        },
        {
          "_": 9392,
          "name": "removeEventListener",
          "type": {
            "core": "void",
            "isNullable": false,
            "_": 9396,
            "source": " void"
          },
          "generics": [],
          "doc": "Remove a previously registered event listener from the global scope\n\n```ts\nconst listener = () => { console.log('hello'); };\naddEventListener('load', listener);\nremoveEventListener('load', listener);\n```",
          "params": [
            {
              "name": "type",
              "type": {
                "core": "string",
                "isNullable": false,
                "_": 9393,
                "source": " string"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "listener",
              "type": {
                "ref": "EventListenerOrEventListenerObject",
                "targs": [],
                "isNullable": false,
                "_": 9394,
                "source": " EventListenerOrEventListenerObject"
              },
              "varargs": false,
              "isNullable": false
            },
            {
              "name": "options",
              "type": {
                "union": [
                  {
                    "core": "boolean",
                    "isNullable": false,
                    "_": 9395,
                    "source": " boolean"
                  },
                  {
                    "ref": "EventListenerOptions",
                    "targs": [],
                    "isNullable": false,
                    "_": 9395,
                    "source": " EventListenerOptions"
                  }
                ],
                "isNullable": false,
                "_": 9395,
                "source": " boolean | EventListenerOptions"
              },
              "varargs": false,
              "isNullable": true
            }
          ],
          "source": "\ndeclare function removeEventListener(\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n): void;"
        }
      ],
      "vars": [
        {
          "_": 6207,
          "name": "TextDecoder",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline15",
            "targs": [],
            "isNullable": false,
            "_": 6207,
            "source": " {\n  prototype: TextDecoder;\n  new (label?: string, options?: TextDecoderOptions): TextDecoder;\n}"
          },
          "source": " TextDecoder: {\n  prototype: TextDecoder;\n  new (label?: string, options?: TextDecoderOptions): TextDecoder;\n}"
        },
        {
          "_": 6228,
          "name": "TextEncoder",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline16",
            "targs": [],
            "isNullable": false,
            "_": 6228,
            "source": " {\n  prototype: TextEncoder;\n  new (): TextEncoder;\n}"
          },
          "source": " TextEncoder: {\n  prototype: TextEncoder;\n  new (): TextEncoder;\n}"
        },
        {
          "_": 6247,
          "name": "TextDecoderStream",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline17",
            "targs": [],
            "isNullable": false,
            "_": 6247,
            "source": " {\n  prototype: TextDecoderStream;\n  new (label?: string, options?: TextDecoderOptions): TextDecoderStream;\n}"
          },
          "source": " TextDecoderStream: {\n  prototype: TextDecoderStream;\n  new (label?: string, options?: TextDecoderOptions): TextDecoderStream;\n}"
        },
        {
          "_": 6262,
          "name": "TextEncoderStream",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline18",
            "targs": [],
            "isNullable": false,
            "_": 6262,
            "source": " {\n  prototype: TextEncoderStream;\n  new (): TextEncoderStream;\n}"
          },
          "source": " TextEncoderStream: {\n  prototype: TextEncoderStream;\n  new (): TextEncoderStream;\n}"
        },
        {
          "_": 6323,
          "name": "AbortSignal",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "A signal object that allows you to communicate with a DOM request (such as a\nFetch) and abort it if required via an AbortController object.",
          "type": {
            "ref": "IInline19",
            "targs": [],
            "isNullable": false,
            "_": 6323,
            "source": " {\n  prototype: AbortSignal;\n  new (): AbortSignal;\n  abort(reason?: any): AbortSignal;\n  timeout(milliseconds: number): AbortSignal;\n}"
          },
          "source": " AbortSignal: {\n  prototype: AbortSignal;\n  new (): AbortSignal;\n  abort(reason?: any): AbortSignal;\n  timeout(milliseconds: number): AbortSignal;\n}"
        },
        {
          "_": 6389,
          "name": "FileReader",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "Lets web applications asynchronously read the contents of files (or raw data\nbuffers) stored on the user's computer, using File or Blob objects to specify\nthe file or data to read.",
          "type": {
            "ref": "IInline20",
            "targs": [],
            "isNullable": false,
            "_": 6389,
            "source": " {\n  prototype: FileReader;\n  new (): FileReader;\n  readonly DONE: number;\n  readonly EMPTY: number;\n  readonly LOADING: number;\n}"
          },
          "source": " FileReader: {\n  prototype: FileReader;\n  new (): FileReader;\n  readonly DONE: number;\n  readonly EMPTY: number;\n  readonly LOADING: number;\n}"
        },
        {
          "_": 6471,
          "name": "ReadableStreamDefaultReader",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline21",
            "targs": [],
            "isNullable": false,
            "_": 6471,
            "source": " {\n  prototype: ReadableStreamDefaultReader;\n  new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\n}"
          },
          "source": " ReadableStreamDefaultReader: {\n  prototype: ReadableStreamDefaultReader;\n  new <R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\n}"
        },
        {
          "_": 6504,
          "name": "ReadableStreamBYOBReader",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline22",
            "targs": [],
            "isNullable": false,
            "_": 6504,
            "source": " {\n  prototype: ReadableStreamBYOBReader;\n  new (stream: ReadableStream<Uint8Array>): ReadableStreamBYOBReader;\n}"
          },
          "source": " ReadableStreamBYOBReader: {\n  prototype: ReadableStreamBYOBReader;\n  new (stream: ReadableStream<Uint8Array>): ReadableStreamBYOBReader;\n}"
        },
        {
          "_": 6566,
          "name": "ReadableStreamDefaultController",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline23",
            "targs": [],
            "isNullable": false,
            "_": 6566,
            "source": " {\n  prototype: ReadableStreamDefaultController;\n  new (): ReadableStreamDefaultController;\n}"
          },
          "source": " ReadableStreamDefaultController: {\n  prototype: ReadableStreamDefaultController;\n  new (): ReadableStreamDefaultController;\n}"
        },
        {
          "_": 6581,
          "name": "ReadableByteStreamController",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline24",
            "targs": [],
            "isNullable": false,
            "_": 6581,
            "source": " {\n  prototype: ReadableByteStreamController;\n  new (): ReadableByteStreamController;\n}"
          },
          "source": " ReadableByteStreamController: {\n  prototype: ReadableByteStreamController;\n  new (): ReadableByteStreamController;\n}"
        },
        {
          "_": 6616,
          "name": "CountQueuingStrategy",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Streams API interface provides a built-in byte length queuing strategy\nthat can be used when constructing streams.",
          "type": {
            "ref": "IInline25",
            "targs": [],
            "isNullable": false,
            "_": 6616,
            "source": " {\n  prototype: CountQueuingStrategy;\n  new (options: { highWaterMark: number }): CountQueuingStrategy;\n}"
          },
          "source": " CountQueuingStrategy: {\n  prototype: CountQueuingStrategy;\n  new (options: { highWaterMark: number }): CountQueuingStrategy;\n}"
        },
        {
          "_": 6628,
          "name": "ByteLengthQueuingStrategy",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline27",
            "targs": [],
            "isNullable": false,
            "_": 6628,
            "source": " {\n  prototype: ByteLengthQueuingStrategy;\n  new (options: { highWaterMark: number }): ByteLengthQueuingStrategy;\n}"
          },
          "source": " ByteLengthQueuingStrategy: {\n  prototype: ByteLengthQueuingStrategy;\n  new (options: { highWaterMark: number }): ByteLengthQueuingStrategy;\n}"
        },
        {
          "_": 6656,
          "name": "ReadableStream",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Streams API interface represents a readable stream of byte data. The\nFetch API offers a concrete instance of a ReadableStream through the body\nproperty of a Response object.",
          "type": {
            "ref": "IInline33",
            "targs": [],
            "isNullable": false,
            "_": 6656,
            "source": " {\n  prototype: ReadableStream;\n  new (\n    underlyingSource: UnderlyingByteSource,\n    strategy?: { highWaterMark?: number; size?: undefined },\n  ): ReadableStream<Uint8Array>;\n  new <R = any>(\n    underlyingSource?: UnderlyingSource<R>,\n    strategy?: QueuingStrategy<R>,\n  ): ReadableStream<R>;\n}"
          },
          "source": " ReadableStream: {\n  prototype: ReadableStream;\n  new (\n    underlyingSource: UnderlyingByteSource,\n    strategy?: { highWaterMark?: number; size?: undefined },\n  ): ReadableStream<Uint8Array>;\n  new <R = any>(\n    underlyingSource?: UnderlyingSource<R>,\n    strategy?: QueuingStrategy<R>,\n  ): ReadableStream<R>;\n}"
        },
        {
          "_": 6706,
          "name": "WritableStream",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Streams API interface provides a standard abstraction for writing\nstreaming data to a destination, known as a sink. This object comes with\nbuilt-in backpressure and queuing.",
          "type": {
            "ref": "IInline35",
            "targs": [
              {
                "core": "any",
                "isNullable": false,
                "_": 6708,
                "source": " any"
              }
            ],
            "isNullable": false,
            "_": 6706,
            "source": " {\n  prototype: WritableStream;\n  new <W = any>(\n    underlyingSink?: UnderlyingSink<W>,\n    strategy?: QueuingStrategy<W>,\n  ): WritableStream<W>;\n}"
          },
          "source": " WritableStream: {\n  prototype: WritableStream;\n  new <W = any>(\n    underlyingSink?: UnderlyingSink<W>,\n    strategy?: QueuingStrategy<W>,\n  ): WritableStream<W>;\n}"
        },
        {
          "_": 6727,
          "name": "WritableStreamDefaultController",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Streams API interface represents a controller allowing control of a\nWritableStream's state. When constructing a WritableStream, the underlying\nsink is given a corresponding WritableStreamDefaultController instance to\nmanipulate.",
          "type": {
            "ref": "WritableStreamDefaultController",
            "targs": [],
            "isNullable": false,
            "_": 6727,
            "source": " WritableStreamDefaultController"
          },
          "source": " WritableStreamDefaultController: WritableStreamDefaultController"
        },
        {
          "_": 6747,
          "name": "WritableStreamDefaultWriter",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Streams API interface is the object returned by\nWritableStream.getWriter() and once created locks the < writer to the\nWritableStream ensuring that no other streams can write to the underlying\nsink.",
          "type": {
            "ref": "IInline36",
            "targs": [],
            "isNullable": false,
            "_": 6747,
            "source": " {\n  prototype: WritableStreamDefaultWriter;\n  new (): WritableStreamDefaultWriter;\n}"
          },
          "source": " WritableStreamDefaultWriter: {\n  prototype: WritableStreamDefaultWriter;\n  new (): WritableStreamDefaultWriter;\n}"
        },
        {
          "_": 6759,
          "name": "TransformStream",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline37",
            "targs": [
              {
                "core": "any",
                "isNullable": false,
                "_": 6761,
                "source": " any"
              },
              {
                "core": "any",
                "isNullable": false,
                "_": 6761,
                "source": " any"
              }
            ],
            "isNullable": false,
            "_": 6759,
            "source": " {\n  prototype: TransformStream;\n  new <I = any, O = any>(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>,\n  ): TransformStream<I, O>;\n}"
          },
          "source": " TransformStream: {\n  prototype: TransformStream;\n  new <I = any, O = any>(\n    transformer?: Transformer<I, O>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<O>,\n  ): TransformStream<I, O>;\n}"
        },
        {
          "_": 6777,
          "name": "TransformStreamDefaultController",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "TransformStreamDefaultController",
            "targs": [],
            "isNullable": false,
            "_": 6777,
            "source": " TransformStreamDefaultController"
          },
          "source": " TransformStreamDefaultController: TransformStreamDefaultController"
        },
        {
          "_": 7065,
          "name": "FormData",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "Provides a way to easily construct a set of key/value pairs representing\nform fields and their values, which can then be easily sent using the\nXMLHttpRequest.send() method. It uses the same format a form would use if the\nencoding type were set to \"multipart/form-data\".",
          "type": {
            "ref": "IInline38",
            "targs": [],
            "isNullable": false,
            "_": 7065,
            "source": " {\n  prototype: FormData;\n  new (): FormData;\n}"
          },
          "source": " FormData: {\n  prototype: FormData;\n  new (): FormData;\n}"
        },
        {
          "_": 7661,
          "name": "Storage",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Web Storage API interface provides access to a particular domain's\nsession or local storage. It allows, for example, the addition, modification,\nor deletion of stored data items.",
          "type": {
            "ref": "IInline39",
            "targs": [],
            "isNullable": false,
            "_": 7661,
            "source": " {\n  prototype: Storage;\n  new (): Storage;\n}"
          },
          "source": " Storage: {\n  prototype: Storage;\n  new (): Storage;\n}"
        },
        {
          "_": 7674,
          "name": "crypto",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Crypto",
            "targs": [],
            "isNullable": false,
            "_": 7674,
            "source": " Crypto"
          },
          "source": " crypto: Crypto"
        },
        {
          "_": 7877,
          "name": "CryptoKey",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "The CryptoKey dictionary of the Web Crypto API represents a cryptographic\nkey.",
          "type": {
            "ref": "IInline40",
            "targs": [],
            "isNullable": false,
            "_": 7877,
            "source": " {\n  prototype: CryptoKey;\n  new (): CryptoKey;\n}"
          },
          "source": " CryptoKey: {\n  prototype: CryptoKey;\n  new (): CryptoKey;\n}"
        },
        {
          "_": 7893,
          "name": "CryptoKeyPair",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "The CryptoKeyPair dictionary of the Web Crypto API represents a key pair for\nan asymmetric cryptography algorithm, also known as a public-key algorithm.",
          "type": {
            "ref": "IInline41",
            "targs": [],
            "isNullable": false,
            "_": 7893,
            "source": " {\n  prototype: CryptoKeyPair;\n  new (): CryptoKeyPair;\n}"
          },
          "source": " CryptoKeyPair: {\n  prototype: CryptoKeyPair;\n  new (): CryptoKeyPair;\n}"
        },
        {
          "_": 8057,
          "name": "SubtleCrypto",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "This Web Crypto API interface provides a number of low-level cryptographic\nfunctions. It is accessed via the Crypto.subtle properties available in a\nwindow context (via Window.crypto).",
          "type": {
            "ref": "IInline42",
            "targs": [],
            "isNullable": false,
            "_": 8057,
            "source": " {\n  prototype: SubtleCrypto;\n  new (): SubtleCrypto;\n}"
          },
          "source": " SubtleCrypto: {\n  prototype: SubtleCrypto;\n  new (): SubtleCrypto;\n}"
        },
        {
          "_": 8116,
          "name": "BroadcastChannel",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline43",
            "targs": [],
            "isNullable": false,
            "_": 8116,
            "source": " {\n  prototype: BroadcastChannel;\n  new (name: string): BroadcastChannel;\n}"
          },
          "source": " BroadcastChannel: {\n  prototype: BroadcastChannel;\n  new (name: string): BroadcastChannel;\n}"
        },
        {
          "_": 8906,
          "name": "console",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Console",
            "targs": [],
            "isNullable": false,
            "_": 8906,
            "source": " Console"
          },
          "source": " console: Console"
        },
        {
          "_": 9045,
          "name": "performance",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Performance",
            "targs": [],
            "isNullable": false,
            "_": 9045,
            "source": " Performance"
          },
          "source": " performance: Performance"
        },
        {
          "_": 9140,
          "name": "caches",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "CacheStorage",
            "targs": [],
            "isNullable": false,
            "_": 9140,
            "source": " CacheStorage"
          },
          "source": " caches: CacheStorage"
        },
        {
          "_": 9187,
          "name": "Cache",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline45",
            "targs": [],
            "isNullable": false,
            "_": 9187,
            "source": " {\n  prototype: Cache;\n  new (name: string): Cache;\n}"
          },
          "source": " Cache: {\n  prototype: Cache;\n  new (name: string): Cache;\n}"
        },
        {
          "_": 9193,
          "name": "CacheStorage",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "IInline46",
            "targs": [],
            "isNullable": false,
            "_": 9193,
            "source": " {\n  prototype: CacheStorage;\n  new (): CacheStorage;\n}"
          },
          "source": " CacheStorage: {\n  prototype: CacheStorage;\n  new (): CacheStorage;\n}"
        },
        {
          "_": 9275,
          "name": "window",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "intersect": [
              {
                "ref": "Window",
                "targs": [],
                "isNullable": false,
                "_": 9275,
                "source": " Window"
              },
              {
                "accessor": "globalThis",
                "_": 9275,
                "isNullable": false,
                "source": " typeof globalThis"
              }
            ],
            "isNullable": false,
            "_": 9275,
            "source": " Window & typeof globalThis"
          },
          "source": " window: Window & typeof globalThis"
        },
        {
          "_": 9277,
          "name": "self",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "intersect": [
              {
                "ref": "Window",
                "targs": [],
                "isNullable": false,
                "_": 9277,
                "source": " Window"
              },
              {
                "accessor": "globalThis",
                "_": 9277,
                "isNullable": false,
                "source": " typeof globalThis"
              }
            ],
            "isNullable": false,
            "_": 9277,
            "source": " Window & typeof globalThis"
          },
          "source": " self: Window & typeof globalThis"
        },
        {
          "_": 9279,
          "name": "onerror",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "union": [
              {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9279,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9279,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "ref": "ErrorEvent",
                      "targs": [],
                      "isNullable": false,
                      "_": 9279,
                      "source": " ErrorEvent"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9279,
                "source": " ((this: Window, ev: ErrorEvent) => any)"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9279,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9279,
            "source": " ((this: Window, ev: ErrorEvent) => any) | null"
          },
          "source": " onerror: ((this: Window, ev: ErrorEvent) => any) | null"
        },
        {
          "_": 9281,
          "name": "onload",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "union": [
              {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9281,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9281,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "ref": "Event",
                      "targs": [],
                      "isNullable": false,
                      "_": 9281,
                      "source": " Event"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9281,
                "source": " ((this: Window, ev: Event) => any)"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9281,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9281,
            "source": " ((this: Window, ev: Event) => any) | null"
          },
          "source": " onload: ((this: Window, ev: Event) => any) | null"
        },
        {
          "_": 9283,
          "name": "onbeforeunload",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "union": [
              {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9283,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9283,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "ref": "Event",
                      "targs": [],
                      "isNullable": false,
                      "_": 9283,
                      "source": " Event"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9283,
                "source": " ((this: Window, ev: Event) => any)"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9283,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9283,
            "source": " ((this: Window, ev: Event) => any) | null"
          },
          "source": " onbeforeunload: ((this: Window, ev: Event) => any) | null"
        },
        {
          "_": 9285,
          "name": "onunload",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "union": [
              {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9285,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9285,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "ref": "Event",
                      "targs": [],
                      "isNullable": false,
                      "_": 9285,
                      "source": " Event"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9285,
                "source": " ((this: Window, ev: Event) => any)"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9285,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9285,
            "source": " ((this: Window, ev: Event) => any) | null"
          },
          "source": " onunload: ((this: Window, ev: Event) => any) | null"
        },
        {
          "_": 9287,
          "name": "onunhandledrejection",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "union": [
              {
                "ctor": false,
                "generics": [],
                "returns": {
                  "core": "any",
                  "isNullable": false,
                  "_": 9288,
                  "source": " any"
                },
                "params": [
                  {
                    "name": "this",
                    "type": {
                      "ref": "Window",
                      "targs": [],
                      "isNullable": false,
                      "_": 9288,
                      "source": " Window"
                    },
                    "varargs": false,
                    "isNullable": false
                  },
                  {
                    "name": "ev",
                    "type": {
                      "ref": "PromiseRejectionEvent",
                      "targs": [],
                      "isNullable": false,
                      "_": 9288,
                      "source": " PromiseRejectionEvent"
                    },
                    "varargs": false,
                    "isNullable": false
                  }
                ],
                "isNullable": false,
                "_": 9288,
                "source": " ((this: Window, ev: PromiseRejectionEvent) => any)"
              },
              {
                "core": "null",
                "isNullable": false,
                "_": 9289,
                "source": " null"
              }
            ],
            "isNullable": false,
            "_": 9288,
            "source": "\n  | ((this: Window, ev: PromiseRejectionEvent) => any)\n  | null"
          },
          "source": " onunhandledrejection:\n  | ((this: Window, ev: PromiseRejectionEvent) => any)\n  | null"
        },
        {
          "_": 9291,
          "name": "localStorage",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Storage",
            "targs": [],
            "isNullable": false,
            "_": 9291,
            "source": " Storage"
          },
          "source": " localStorage: Storage"
        },
        {
          "_": 9293,
          "name": "sessionStorage",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Storage",
            "targs": [],
            "isNullable": false,
            "_": 9293,
            "source": " Storage"
          },
          "source": " sessionStorage: Storage"
        },
        {
          "_": 9295,
          "name": "caches",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "CacheStorage",
            "targs": [],
            "isNullable": false,
            "_": 9295,
            "source": " CacheStorage"
          },
          "source": " caches: CacheStorage"
        },
        {
          "_": 9307,
          "name": "navigator",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Navigator",
            "targs": [],
            "isNullable": false,
            "_": 9307,
            "source": " Navigator"
          },
          "source": " navigator: Navigator"
        },
        {
          "_": 9472,
          "name": "location",
          "isReadonly": true,
          "isStatic": false,
          "isNullable": false,
          "doc": "",
          "type": {
            "ref": "Location",
            "targs": [],
            "isNullable": false,
            "_": 9472,
            "source": " Location"
          },
          "source": " location: Location"
        }
      ],
      "enums": []
    },
    "name": "0lib.deno.d.ts"
  }
]